
CAN_Bluepill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000013f8  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f4  08001504  08001504  00002504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080016f8  080016f8  0000300c  2**0
                  CONTENTS
  4 .ARM          00000008  080016f8  080016f8  000026f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001700  08001700  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001700  08001700  00002700  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001704  08001704  00002704  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001708  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001cc  2000000c  08001714  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d8  08001714  000031d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000037c0  00000000  00000000  00003035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000ee2  00000000  00000000  000067f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000420  00000000  00000000  000076d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000002fe  00000000  00000000  00007af8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000166fd  00000000  00000000  00007df6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004907  00000000  00000000  0001e4f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081790  00000000  00000000  00022dfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a458a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000f00  00000000  00000000  000a45d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000a54d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080014ec 	.word	0x080014ec

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080014ec 	.word	0x080014ec

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800015c:	b480      	push	{r7}
 800015e:	b083      	sub	sp, #12
 8000160:	af00      	add	r7, sp, #0
 8000162:	4603      	mov	r3, r0
 8000164:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800016a:	2b00      	cmp	r3, #0
 800016c:	db0b      	blt.n	8000186 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800016e:	79fb      	ldrb	r3, [r7, #7]
 8000170:	f003 021f 	and.w	r2, r3, #31
 8000174:	4906      	ldr	r1, [pc, #24]	@ (8000190 <__NVIC_EnableIRQ+0x34>)
 8000176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800017a:	095b      	lsrs	r3, r3, #5
 800017c:	2001      	movs	r0, #1
 800017e:	fa00 f202 	lsl.w	r2, r0, r2
 8000182:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000186:	bf00      	nop
 8000188:	370c      	adds	r7, #12
 800018a:	46bd      	mov	sp, r7
 800018c:	bc80      	pop	{r7}
 800018e:	4770      	bx	lr
 8000190:	e000e100 	.word	0xe000e100

08000194 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000194:	b480      	push	{r7}
 8000196:	b083      	sub	sp, #12
 8000198:	af00      	add	r7, sp, #0
 800019a:	4603      	mov	r3, r0
 800019c:	6039      	str	r1, [r7, #0]
 800019e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001a4:	2b00      	cmp	r3, #0
 80001a6:	db0a      	blt.n	80001be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001a8:	683b      	ldr	r3, [r7, #0]
 80001aa:	b2da      	uxtb	r2, r3
 80001ac:	490c      	ldr	r1, [pc, #48]	@ (80001e0 <__NVIC_SetPriority+0x4c>)
 80001ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001b2:	0112      	lsls	r2, r2, #4
 80001b4:	b2d2      	uxtb	r2, r2
 80001b6:	440b      	add	r3, r1
 80001b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80001bc:	e00a      	b.n	80001d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001be:	683b      	ldr	r3, [r7, #0]
 80001c0:	b2da      	uxtb	r2, r3
 80001c2:	4908      	ldr	r1, [pc, #32]	@ (80001e4 <__NVIC_SetPriority+0x50>)
 80001c4:	79fb      	ldrb	r3, [r7, #7]
 80001c6:	f003 030f 	and.w	r3, r3, #15
 80001ca:	3b04      	subs	r3, #4
 80001cc:	0112      	lsls	r2, r2, #4
 80001ce:	b2d2      	uxtb	r2, r2
 80001d0:	440b      	add	r3, r1
 80001d2:	761a      	strb	r2, [r3, #24]
}
 80001d4:	bf00      	nop
 80001d6:	370c      	adds	r7, #12
 80001d8:	46bd      	mov	sp, r7
 80001da:	bc80      	pop	{r7}
 80001dc:	4770      	bx	lr
 80001de:	bf00      	nop
 80001e0:	e000e100 	.word	0xe000e100
 80001e4:	e000ed00 	.word	0xe000ed00

080001e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b082      	sub	sp, #8
 80001ec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ee:	f000 fc3f 	bl	8000a70 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001f2:	f000 f827 	bl	8000244 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  SysTick_Init(Clock_Frequency);
 80001f6:	f44f 50fa 	mov.w	r0, #8000	@ 0x1f40
 80001fa:	f000 f85f 	bl	80002bc <SysTick_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */
  LED_Init();
 80001fe:	f000 f89f 	bl	8000340 <LED_Init>
  Delay_Init();
 8000202:	f000 f8c7 	bl	8000394 <Delay_Init>
  UART_Init();
 8000206:	f000 f97f 	bl	8000508 <UART_Init>
  CAN_Init();
 800020a:	f000 fa77 	bl	80006fc <CAN_Init>
  PWM_Init();
 800020e:	f000 fb1f 	bl	8000850 <PWM_Init>
  PWM_SetDutyCycle(30);
 8000212:	201e      	movs	r0, #30
 8000214:	f000 fb84 	bl	8000920 <PWM_SetDutyCycle>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int delayId_0 = Delay_Start(0, 5000);
 8000218:	f241 3188 	movw	r1, #5000	@ 0x1388
 800021c:	2000      	movs	r0, #0
 800021e:	f000 f8e9 	bl	80003f4 <Delay_Start>
 8000222:	6078      	str	r0, [r7, #4]
  Delay_ErrorHandler(delayId_0);
 8000224:	6878      	ldr	r0, [r7, #4]
 8000226:	f000 f949 	bl	80004bc <Delay_ErrorHandler>

  while (1)
  {
      if (Delay_Completed(0))
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f910 	bl	8000450 <Delay_Completed>
 8000230:	4603      	mov	r3, r0
 8000232:	2b00      	cmp	r3, #0
 8000234:	d0f9      	beq.n	800022a <main+0x42>
      {
          LED_Toggle();
 8000236:	f000 f89f 	bl	8000378 <LED_Toggle>
          Delay_Start(0, 100);      // Restart the delay
 800023a:	2164      	movs	r1, #100	@ 0x64
 800023c:	2000      	movs	r0, #0
 800023e:	f000 f8d9 	bl	80003f4 <Delay_Start>
      if (Delay_Completed(0))
 8000242:	e7f2      	b.n	800022a <main+0x42>

08000244 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b090      	sub	sp, #64	@ 0x40
 8000248:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800024a:	f107 0318 	add.w	r3, r7, #24
 800024e:	2228      	movs	r2, #40	@ 0x28
 8000250:	2100      	movs	r1, #0
 8000252:	4618      	mov	r0, r3
 8000254:	f001 f91e 	bl	8001494 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000258:	1d3b      	adds	r3, r7, #4
 800025a:	2200      	movs	r2, #0
 800025c:	601a      	str	r2, [r3, #0]
 800025e:	605a      	str	r2, [r3, #4]
 8000260:	609a      	str	r2, [r3, #8]
 8000262:	60da      	str	r2, [r3, #12]
 8000264:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000266:	2302      	movs	r3, #2
 8000268:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800026a:	2301      	movs	r3, #1
 800026c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800026e:	2310      	movs	r3, #16
 8000270:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000272:	2300      	movs	r3, #0
 8000274:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000276:	f107 0318 	add.w	r3, r7, #24
 800027a:	4618      	mov	r0, r3
 800027c:	f000 fd2c 	bl	8000cd8 <HAL_RCC_OscConfig>
 8000280:	4603      	mov	r3, r0
 8000282:	2b00      	cmp	r3, #0
 8000284:	d001      	beq.n	800028a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000286:	f000 fb69 	bl	800095c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800028a:	230f      	movs	r3, #15
 800028c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800028e:	2300      	movs	r3, #0
 8000290:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000292:	2300      	movs	r3, #0
 8000294:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000296:	2300      	movs	r3, #0
 8000298:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800029a:	2300      	movs	r3, #0
 800029c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800029e:	1d3b      	adds	r3, r7, #4
 80002a0:	2100      	movs	r1, #0
 80002a2:	4618      	mov	r0, r3
 80002a4:	f000 ff9a 	bl	80011dc <HAL_RCC_ClockConfig>
 80002a8:	4603      	mov	r3, r0
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d001      	beq.n	80002b2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80002ae:	f000 fb55 	bl	800095c <Error_Handler>
  }
}
 80002b2:	bf00      	nop
 80002b4:	3740      	adds	r7, #64	@ 0x40
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bd80      	pop	{r7, pc}
	...

080002bc <SysTick_Init>:

/* USER CODE BEGIN 4 */
void SysTick_Init(uint32_t ticks)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b082      	sub	sp, #8
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	6078      	str	r0, [r7, #4]

	SysTick->CTRL = 0; // Disable SysTick
 80002c4:	4b12      	ldr	r3, [pc, #72]	@ (8000310 <SysTick_Init+0x54>)
 80002c6:	2200      	movs	r2, #0
 80002c8:	601a      	str	r2, [r3, #0]

	SysTick->LOAD = ticks-1; // Set Reload Register
 80002ca:	4a11      	ldr	r2, [pc, #68]	@ (8000310 <SysTick_Init+0x54>)
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	3b01      	subs	r3, #1
 80002d0:	6053      	str	r3, [r2, #4]

	// Setting Interrupt Priority to the highest
	NVIC_SetPriority(SysTick_IRQn, (1<<__NVIC_PRIO_BITS)-1);
 80002d2:	210f      	movs	r1, #15
 80002d4:	f04f 30ff 	mov.w	r0, #4294967295
 80002d8:	f7ff ff5c 	bl	8000194 <__NVIC_SetPriority>

	SysTick->VAL = 0; // Reset the SysTick counter value
 80002dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000310 <SysTick_Init+0x54>)
 80002de:	2200      	movs	r2, #0
 80002e0:	609a      	str	r2, [r3, #8]

	SysTick->CTRL |= SysTick_CTRL_CLKSOURCE_Msk; // Selecting internal clock source
 80002e2:	4b0b      	ldr	r3, [pc, #44]	@ (8000310 <SysTick_Init+0x54>)
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	4a0a      	ldr	r2, [pc, #40]	@ (8000310 <SysTick_Init+0x54>)
 80002e8:	f043 0304 	orr.w	r3, r3, #4
 80002ec:	6013      	str	r3, [r2, #0]
	SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk; // Enabling SysTick exception Request when 0
 80002ee:	4b08      	ldr	r3, [pc, #32]	@ (8000310 <SysTick_Init+0x54>)
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	4a07      	ldr	r2, [pc, #28]	@ (8000310 <SysTick_Init+0x54>)
 80002f4:	f043 0302 	orr.w	r3, r3, #2
 80002f8:	6013      	str	r3, [r2, #0]


	SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk; // Enable SysTick
 80002fa:	4b05      	ldr	r3, [pc, #20]	@ (8000310 <SysTick_Init+0x54>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	4a04      	ldr	r2, [pc, #16]	@ (8000310 <SysTick_Init+0x54>)
 8000300:	f043 0301 	orr.w	r3, r3, #1
 8000304:	6013      	str	r3, [r2, #0]
}
 8000306:	bf00      	nop
 8000308:	3708      	adds	r7, #8
 800030a:	46bd      	mov	sp, r7
 800030c:	bd80      	pop	{r7, pc}
 800030e:	bf00      	nop
 8000310:	e000e010 	.word	0xe000e010

08000314 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8000314:	b480      	push	{r7}
 8000316:	af00      	add	r7, sp, #0

	if (Globalcounter == 0xffffffff) {
 8000318:	4b08      	ldr	r3, [pc, #32]	@ (800033c <SysTick_Handler+0x28>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000320:	d103      	bne.n	800032a <SysTick_Handler+0x16>
        Globalcounter = 0; // Reset the counter if the maximum value is reached
 8000322:	4b06      	ldr	r3, [pc, #24]	@ (800033c <SysTick_Handler+0x28>)
 8000324:	2200      	movs	r2, #0
 8000326:	601a      	str	r2, [r3, #0]
    } else {
        Globalcounter++; // Increment the counter
    }

}
 8000328:	e004      	b.n	8000334 <SysTick_Handler+0x20>
        Globalcounter++; // Increment the counter
 800032a:	4b04      	ldr	r3, [pc, #16]	@ (800033c <SysTick_Handler+0x28>)
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	3301      	adds	r3, #1
 8000330:	4a02      	ldr	r2, [pc, #8]	@ (800033c <SysTick_Handler+0x28>)
 8000332:	6013      	str	r3, [r2, #0]
}
 8000334:	bf00      	nop
 8000336:	46bd      	mov	sp, r7
 8000338:	bc80      	pop	{r7}
 800033a:	4770      	bx	lr
 800033c:	20000028 	.word	0x20000028

08000340 <LED_Init>:

void LED_Init (void)
{
 8000340:	b480      	push	{r7}
 8000342:	af00      	add	r7, sp, #0

	// Enable clock for GPIOC
	RCC->APB2ENR |= RCC_APB2ENR_IOPCEN;
 8000344:	4b0a      	ldr	r3, [pc, #40]	@ (8000370 <LED_Init+0x30>)
 8000346:	699b      	ldr	r3, [r3, #24]
 8000348:	4a09      	ldr	r2, [pc, #36]	@ (8000370 <LED_Init+0x30>)
 800034a:	f043 0310 	orr.w	r3, r3, #16
 800034e:	6193      	str	r3, [r2, #24]

	// Set PC13 as output push-pull
	GPIOC->CRH &= ~GPIO_CRH_CNF13;    // Output Push-Pull
 8000350:	4b08      	ldr	r3, [pc, #32]	@ (8000374 <LED_Init+0x34>)
 8000352:	685b      	ldr	r3, [r3, #4]
 8000354:	4a07      	ldr	r2, [pc, #28]	@ (8000374 <LED_Init+0x34>)
 8000356:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800035a:	6053      	str	r3, [r2, #4]
	GPIOC->CRH |= GPIO_CRH_MODE13_0;  // Output mode, max speed 50 MHz
 800035c:	4b05      	ldr	r3, [pc, #20]	@ (8000374 <LED_Init+0x34>)
 800035e:	685b      	ldr	r3, [r3, #4]
 8000360:	4a04      	ldr	r2, [pc, #16]	@ (8000374 <LED_Init+0x34>)
 8000362:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000366:	6053      	str	r3, [r2, #4]
}
 8000368:	bf00      	nop
 800036a:	46bd      	mov	sp, r7
 800036c:	bc80      	pop	{r7}
 800036e:	4770      	bx	lr
 8000370:	40021000 	.word	0x40021000
 8000374:	40011000 	.word	0x40011000

08000378 <LED_Toggle>:

void LED_Toggle(void)
{
 8000378:	b480      	push	{r7}
 800037a:	af00      	add	r7, sp, #0
	GPIOC->ODR ^= GPIO_ODR_ODR13;
 800037c:	4b04      	ldr	r3, [pc, #16]	@ (8000390 <LED_Toggle+0x18>)
 800037e:	68db      	ldr	r3, [r3, #12]
 8000380:	4a03      	ldr	r2, [pc, #12]	@ (8000390 <LED_Toggle+0x18>)
 8000382:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8000386:	60d3      	str	r3, [r2, #12]
}
 8000388:	bf00      	nop
 800038a:	46bd      	mov	sp, r7
 800038c:	bc80      	pop	{r7}
 800038e:	4770      	bx	lr
 8000390:	40011000 	.word	0x40011000

08000394 <Delay_Init>:

void Delay_Init(void)
{
 8000394:	b480      	push	{r7}
 8000396:	b083      	sub	sp, #12
 8000398:	af00      	add	r7, sp, #0
    for (int i = 0; i < MAX_DELAYS; i++) {
 800039a:	2300      	movs	r3, #0
 800039c:	607b      	str	r3, [r7, #4]
 800039e:	e01d      	b.n	80003dc <Delay_Init+0x48>
        delays[i].id = i;               // Initialize each delay with a unique id
 80003a0:	4a13      	ldr	r2, [pc, #76]	@ (80003f0 <Delay_Init+0x5c>)
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	011b      	lsls	r3, r3, #4
 80003a6:	4413      	add	r3, r2
 80003a8:	687a      	ldr	r2, [r7, #4]
 80003aa:	601a      	str	r2, [r3, #0]
        delays[i].startTime = 0;        // Reset the start time
 80003ac:	4a10      	ldr	r2, [pc, #64]	@ (80003f0 <Delay_Init+0x5c>)
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	011b      	lsls	r3, r3, #4
 80003b2:	4413      	add	r3, r2
 80003b4:	3304      	adds	r3, #4
 80003b6:	2200      	movs	r2, #0
 80003b8:	601a      	str	r2, [r3, #0]
        delays[i].delayTime = 0;        // Reset the delay time
 80003ba:	4a0d      	ldr	r2, [pc, #52]	@ (80003f0 <Delay_Init+0x5c>)
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	011b      	lsls	r3, r3, #4
 80003c0:	4413      	add	r3, r2
 80003c2:	3308      	adds	r3, #8
 80003c4:	2200      	movs	r2, #0
 80003c6:	601a      	str	r2, [r3, #0]
        delays[i].activeFlag = 0;       // Initialize all delays as inactive
 80003c8:	4a09      	ldr	r2, [pc, #36]	@ (80003f0 <Delay_Init+0x5c>)
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	011b      	lsls	r3, r3, #4
 80003ce:	4413      	add	r3, r2
 80003d0:	330c      	adds	r3, #12
 80003d2:	2200      	movs	r2, #0
 80003d4:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < MAX_DELAYS; i++) {
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	3301      	adds	r3, #1
 80003da:	607b      	str	r3, [r7, #4]
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	2b09      	cmp	r3, #9
 80003e0:	ddde      	ble.n	80003a0 <Delay_Init+0xc>
    }
}
 80003e2:	bf00      	nop
 80003e4:	bf00      	nop
 80003e6:	370c      	adds	r7, #12
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bc80      	pop	{r7}
 80003ec:	4770      	bx	lr
 80003ee:	bf00      	nop
 80003f0:	2000002c 	.word	0x2000002c

080003f4 <Delay_Start>:

int Delay_Start(int id, int delayTime)
{
 80003f4:	b480      	push	{r7}
 80003f6:	b083      	sub	sp, #12
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
 80003fc:	6039      	str	r1, [r7, #0]
    if (id >= 0 && id < MAX_DELAYS) {
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	2b00      	cmp	r3, #0
 8000402:	db1a      	blt.n	800043a <Delay_Start+0x46>
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	2b09      	cmp	r3, #9
 8000408:	dc17      	bgt.n	800043a <Delay_Start+0x46>
        delays[id].startTime = Globalcounter; // Capture the current Globalcounter value
 800040a:	4b0f      	ldr	r3, [pc, #60]	@ (8000448 <Delay_Start+0x54>)
 800040c:	681a      	ldr	r2, [r3, #0]
 800040e:	490f      	ldr	r1, [pc, #60]	@ (800044c <Delay_Start+0x58>)
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	011b      	lsls	r3, r3, #4
 8000414:	440b      	add	r3, r1
 8000416:	3304      	adds	r3, #4
 8000418:	601a      	str	r2, [r3, #0]
        delays[id].delayTime = delayTime;
 800041a:	4a0c      	ldr	r2, [pc, #48]	@ (800044c <Delay_Start+0x58>)
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	011b      	lsls	r3, r3, #4
 8000420:	4413      	add	r3, r2
 8000422:	3308      	adds	r3, #8
 8000424:	683a      	ldr	r2, [r7, #0]
 8000426:	601a      	str	r2, [r3, #0]
        delays[id].activeFlag = 1;           // Mark this delay as active
 8000428:	4a08      	ldr	r2, [pc, #32]	@ (800044c <Delay_Start+0x58>)
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	011b      	lsls	r3, r3, #4
 800042e:	4413      	add	r3, r2
 8000430:	330c      	adds	r3, #12
 8000432:	2201      	movs	r2, #1
 8000434:	601a      	str	r2, [r3, #0]
        return id;                           // Return the id of the delay
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	e001      	b.n	800043e <Delay_Start+0x4a>
    }
    return -1; // Invalid id
 800043a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800043e:	4618      	mov	r0, r3
 8000440:	370c      	adds	r7, #12
 8000442:	46bd      	mov	sp, r7
 8000444:	bc80      	pop	{r7}
 8000446:	4770      	bx	lr
 8000448:	20000028 	.word	0x20000028
 800044c:	2000002c 	.word	0x2000002c

08000450 <Delay_Completed>:
        delays[id].activeFlag = 0; // Stop the specified delay
    }
}

int Delay_Completed(int id)
{
 8000450:	b480      	push	{r7}
 8000452:	b083      	sub	sp, #12
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
    if (id >= 0 && id < MAX_DELAYS) {
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	2b00      	cmp	r3, #0
 800045c:	db24      	blt.n	80004a8 <Delay_Completed+0x58>
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	2b09      	cmp	r3, #9
 8000462:	dc21      	bgt.n	80004a8 <Delay_Completed+0x58>
          if (delays[id].activeFlag && (Globalcounter >= delays[id].startTime + delays[id].delayTime)) {
 8000464:	4a13      	ldr	r2, [pc, #76]	@ (80004b4 <Delay_Completed+0x64>)
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	011b      	lsls	r3, r3, #4
 800046a:	4413      	add	r3, r2
 800046c:	330c      	adds	r3, #12
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	2b00      	cmp	r3, #0
 8000472:	d019      	beq.n	80004a8 <Delay_Completed+0x58>
 8000474:	4a0f      	ldr	r2, [pc, #60]	@ (80004b4 <Delay_Completed+0x64>)
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	011b      	lsls	r3, r3, #4
 800047a:	4413      	add	r3, r2
 800047c:	3304      	adds	r3, #4
 800047e:	681a      	ldr	r2, [r3, #0]
 8000480:	490c      	ldr	r1, [pc, #48]	@ (80004b4 <Delay_Completed+0x64>)
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	011b      	lsls	r3, r3, #4
 8000486:	440b      	add	r3, r1
 8000488:	3308      	adds	r3, #8
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	441a      	add	r2, r3
 800048e:	4b0a      	ldr	r3, [pc, #40]	@ (80004b8 <Delay_Completed+0x68>)
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	429a      	cmp	r2, r3
 8000494:	dc08      	bgt.n	80004a8 <Delay_Completed+0x58>
            delays[id].activeFlag = 0; // Deactivate the delay after completion
 8000496:	4a07      	ldr	r2, [pc, #28]	@ (80004b4 <Delay_Completed+0x64>)
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	011b      	lsls	r3, r3, #4
 800049c:	4413      	add	r3, r2
 800049e:	330c      	adds	r3, #12
 80004a0:	2200      	movs	r2, #0
 80004a2:	601a      	str	r2, [r3, #0]
            return 1; // Delay completed
 80004a4:	2301      	movs	r3, #1
 80004a6:	e000      	b.n	80004aa <Delay_Completed+0x5a>
        }
    }
    return 0; // Delay not yet completed
 80004a8:	2300      	movs	r3, #0
}
 80004aa:	4618      	mov	r0, r3
 80004ac:	370c      	adds	r7, #12
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bc80      	pop	{r7}
 80004b2:	4770      	bx	lr
 80004b4:	2000002c 	.word	0x2000002c
 80004b8:	20000028 	.word	0x20000028

080004bc <Delay_ErrorHandler>:

void Delay_ErrorHandler(int delayid)
{
 80004bc:	b5b0      	push	{r4, r5, r7, lr}
 80004be:	b08a      	sub	sp, #40	@ 0x28
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
	if (delayid == (-1))
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80004ca:	d116      	bne.n	80004fa <Delay_ErrorHandler+0x3e>
	{
		char errormsg[] = "Invalid Delay Id chosen....\n";
 80004cc:	4b0d      	ldr	r3, [pc, #52]	@ (8000504 <Delay_ErrorHandler+0x48>)
 80004ce:	f107 0408 	add.w	r4, r7, #8
 80004d2:	461d      	mov	r5, r3
 80004d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004d8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80004dc:	c407      	stmia	r4!, {r0, r1, r2}
 80004de:	7023      	strb	r3, [r4, #0]
		UART_Send((uint8_t*)errormsg, strlen(errormsg));
 80004e0:	f107 0308 	add.w	r3, r7, #8
 80004e4:	4618      	mov	r0, r3
 80004e6:	f7ff fe31 	bl	800014c <strlen>
 80004ea:	4603      	mov	r3, r0
 80004ec:	b29a      	uxth	r2, r3
 80004ee:	f107 0308 	add.w	r3, r7, #8
 80004f2:	4611      	mov	r1, r2
 80004f4:	4618      	mov	r0, r3
 80004f6:	f000 f83f 	bl	8000578 <UART_Send>
	}
}
 80004fa:	bf00      	nop
 80004fc:	3728      	adds	r7, #40	@ 0x28
 80004fe:	46bd      	mov	sp, r7
 8000500:	bdb0      	pop	{r4, r5, r7, pc}
 8000502:	bf00      	nop
 8000504:	08001504 	.word	0x08001504

08000508 <UART_Init>:

void UART_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
    // Enable clock for GPIOA and USART1
    RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;  // GPIOA clock
 800050c:	4b17      	ldr	r3, [pc, #92]	@ (800056c <UART_Init+0x64>)
 800050e:	699b      	ldr	r3, [r3, #24]
 8000510:	4a16      	ldr	r2, [pc, #88]	@ (800056c <UART_Init+0x64>)
 8000512:	f043 0304 	orr.w	r3, r3, #4
 8000516:	6193      	str	r3, [r2, #24]
    RCC->APB2ENR |= RCC_APB2ENR_USART1EN; // USART1 clock
 8000518:	4b14      	ldr	r3, [pc, #80]	@ (800056c <UART_Init+0x64>)
 800051a:	699b      	ldr	r3, [r3, #24]
 800051c:	4a13      	ldr	r2, [pc, #76]	@ (800056c <UART_Init+0x64>)
 800051e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000522:	6193      	str	r3, [r2, #24]

    // Configure PA9 (TX) as Alternate function push-pull
    GPIOA->CRH &= ~(GPIO_CRH_CNF9 | GPIO_CRH_MODE9);
 8000524:	4b12      	ldr	r3, [pc, #72]	@ (8000570 <UART_Init+0x68>)
 8000526:	685b      	ldr	r3, [r3, #4]
 8000528:	4a11      	ldr	r2, [pc, #68]	@ (8000570 <UART_Init+0x68>)
 800052a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800052e:	6053      	str	r3, [r2, #4]
    GPIOA->CRH |= (GPIO_CRH_CNF9_1 | GPIO_CRH_MODE9_1); // Output mode, max speed 2 MHz
 8000530:	4b0f      	ldr	r3, [pc, #60]	@ (8000570 <UART_Init+0x68>)
 8000532:	685b      	ldr	r3, [r3, #4]
 8000534:	4a0e      	ldr	r2, [pc, #56]	@ (8000570 <UART_Init+0x68>)
 8000536:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 800053a:	6053      	str	r3, [r2, #4]

    // Configure PA10 (RX) as input floating
    GPIOA->CRH &= ~(GPIO_CRH_CNF10 | GPIO_CRH_MODE10);
 800053c:	4b0c      	ldr	r3, [pc, #48]	@ (8000570 <UART_Init+0x68>)
 800053e:	685b      	ldr	r3, [r3, #4]
 8000540:	4a0b      	ldr	r2, [pc, #44]	@ (8000570 <UART_Init+0x68>)
 8000542:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000546:	6053      	str	r3, [r2, #4]
    GPIOA->CRH |= GPIO_CRH_CNF10_0; // Input floating
 8000548:	4b09      	ldr	r3, [pc, #36]	@ (8000570 <UART_Init+0x68>)
 800054a:	685b      	ldr	r3, [r3, #4]
 800054c:	4a08      	ldr	r2, [pc, #32]	@ (8000570 <UART_Init+0x68>)
 800054e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000552:	6053      	str	r3, [r2, #4]

    // Configure baud rate
    USART1->BRR = (Clock_Frequency*1000) / BAUD_RATE;
 8000554:	4b07      	ldr	r3, [pc, #28]	@ (8000574 <UART_Init+0x6c>)
 8000556:	2245      	movs	r2, #69	@ 0x45
 8000558:	609a      	str	r2, [r3, #8]

    // Enable USART, TX, RX and RXNE interrupt
    USART1->CR1 = USART_CR1_TE | USART_CR1_RE | USART_CR1_RXNEIE | USART_CR1_UE;
 800055a:	4b06      	ldr	r3, [pc, #24]	@ (8000574 <UART_Init+0x6c>)
 800055c:	f242 022c 	movw	r2, #8236	@ 0x202c
 8000560:	60da      	str	r2, [r3, #12]

    // Enable USART1 global interrupt
    NVIC_EnableIRQ(USART1_IRQn);
 8000562:	2025      	movs	r0, #37	@ 0x25
 8000564:	f7ff fdfa 	bl	800015c <__NVIC_EnableIRQ>
}
 8000568:	bf00      	nop
 800056a:	bd80      	pop	{r7, pc}
 800056c:	40021000 	.word	0x40021000
 8000570:	40010800 	.word	0x40010800
 8000574:	40013800 	.word	0x40013800

08000578 <UART_Send>:

void UART_Send(uint8_t *data, uint16_t size)
{
 8000578:	b480      	push	{r7}
 800057a:	b085      	sub	sp, #20
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
 8000580:	460b      	mov	r3, r1
 8000582:	807b      	strh	r3, [r7, #2]
    for (uint16_t i = 0; i < size; i++) {
 8000584:	2300      	movs	r3, #0
 8000586:	81fb      	strh	r3, [r7, #14]
 8000588:	e02a      	b.n	80005e0 <UART_Send+0x68>
        while (((txHead + 1) % TX_BUFFER_SIZE) == txTail); // Wait if buffer is full
 800058a:	bf00      	nop
 800058c:	4b20      	ldr	r3, [pc, #128]	@ (8000610 <UART_Send+0x98>)
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	b2db      	uxtb	r3, r3
 8000592:	3301      	adds	r3, #1
 8000594:	425a      	negs	r2, r3
 8000596:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800059a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800059e:	bf58      	it	pl
 80005a0:	4253      	negpl	r3, r2
 80005a2:	4a1c      	ldr	r2, [pc, #112]	@ (8000614 <UART_Send+0x9c>)
 80005a4:	7812      	ldrb	r2, [r2, #0]
 80005a6:	b2d2      	uxtb	r2, r2
 80005a8:	4293      	cmp	r3, r2
 80005aa:	d0ef      	beq.n	800058c <UART_Send+0x14>
        txBuffer[txHead] = data[i];
 80005ac:	89fb      	ldrh	r3, [r7, #14]
 80005ae:	687a      	ldr	r2, [r7, #4]
 80005b0:	4413      	add	r3, r2
 80005b2:	4a17      	ldr	r2, [pc, #92]	@ (8000610 <UART_Send+0x98>)
 80005b4:	7812      	ldrb	r2, [r2, #0]
 80005b6:	b2d2      	uxtb	r2, r2
 80005b8:	7819      	ldrb	r1, [r3, #0]
 80005ba:	4b17      	ldr	r3, [pc, #92]	@ (8000618 <UART_Send+0xa0>)
 80005bc:	5499      	strb	r1, [r3, r2]
        txHead = (txHead + 1) % TX_BUFFER_SIZE;
 80005be:	4b14      	ldr	r3, [pc, #80]	@ (8000610 <UART_Send+0x98>)
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	b2db      	uxtb	r3, r3
 80005c4:	3301      	adds	r3, #1
 80005c6:	425a      	negs	r2, r3
 80005c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80005cc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80005d0:	bf58      	it	pl
 80005d2:	4253      	negpl	r3, r2
 80005d4:	b2da      	uxtb	r2, r3
 80005d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000610 <UART_Send+0x98>)
 80005d8:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++) {
 80005da:	89fb      	ldrh	r3, [r7, #14]
 80005dc:	3301      	adds	r3, #1
 80005de:	81fb      	strh	r3, [r7, #14]
 80005e0:	89fa      	ldrh	r2, [r7, #14]
 80005e2:	887b      	ldrh	r3, [r7, #2]
 80005e4:	429a      	cmp	r2, r3
 80005e6:	d3d0      	bcc.n	800058a <UART_Send+0x12>
    }

    // Enable TXE interrupt to start transmitting
    if (!txBusy) {
 80005e8:	4b0c      	ldr	r3, [pc, #48]	@ (800061c <UART_Send+0xa4>)
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	b2db      	uxtb	r3, r3
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d108      	bne.n	8000604 <UART_Send+0x8c>
        txBusy = 1;
 80005f2:	4b0a      	ldr	r3, [pc, #40]	@ (800061c <UART_Send+0xa4>)
 80005f4:	2201      	movs	r2, #1
 80005f6:	701a      	strb	r2, [r3, #0]
        USART1->CR1 |= USART_CR1_TXEIE;
 80005f8:	4b09      	ldr	r3, [pc, #36]	@ (8000620 <UART_Send+0xa8>)
 80005fa:	68db      	ldr	r3, [r3, #12]
 80005fc:	4a08      	ldr	r2, [pc, #32]	@ (8000620 <UART_Send+0xa8>)
 80005fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000602:	60d3      	str	r3, [r2, #12]
    }
}
 8000604:	bf00      	nop
 8000606:	3714      	adds	r7, #20
 8000608:	46bd      	mov	sp, r7
 800060a:	bc80      	pop	{r7}
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	200001cc 	.word	0x200001cc
 8000614:	200001cd 	.word	0x200001cd
 8000618:	200000cc 	.word	0x200000cc
 800061c:	200001d0 	.word	0x200001d0
 8000620:	40013800 	.word	0x40013800

08000624 <USART1_IRQHandler>:
        rxTail = (rxTail + 1) % RX_BUFFER_SIZE;
    }
}

void USART1_IRQHandler(void)
{
 8000624:	b480      	push	{r7}
 8000626:	b083      	sub	sp, #12
 8000628:	af00      	add	r7, sp, #0
    // Check if data is ready to be read
    if (USART1->SR & USART_SR_RXNE) {
 800062a:	4b2c      	ldr	r3, [pc, #176]	@ (80006dc <USART1_IRQHandler+0xb8>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	f003 0320 	and.w	r3, r3, #32
 8000632:	2b00      	cmp	r3, #0
 8000634:	d01e      	beq.n	8000674 <USART1_IRQHandler+0x50>
        uint8_t data = USART1->DR; // Read received data
 8000636:	4b29      	ldr	r3, [pc, #164]	@ (80006dc <USART1_IRQHandler+0xb8>)
 8000638:	685b      	ldr	r3, [r3, #4]
 800063a:	71fb      	strb	r3, [r7, #7]
        uint8_t nextHead = (rxHead + 1) % RX_BUFFER_SIZE;
 800063c:	4b28      	ldr	r3, [pc, #160]	@ (80006e0 <USART1_IRQHandler+0xbc>)
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	b2db      	uxtb	r3, r3
 8000642:	3301      	adds	r3, #1
 8000644:	425a      	negs	r2, r3
 8000646:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800064a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800064e:	bf58      	it	pl
 8000650:	4253      	negpl	r3, r2
 8000652:	71bb      	strb	r3, [r7, #6]
        if (nextHead != rxTail) { // If buffer is not full
 8000654:	4b23      	ldr	r3, [pc, #140]	@ (80006e4 <USART1_IRQHandler+0xc0>)
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	b2db      	uxtb	r3, r3
 800065a:	79ba      	ldrb	r2, [r7, #6]
 800065c:	429a      	cmp	r2, r3
 800065e:	d009      	beq.n	8000674 <USART1_IRQHandler+0x50>
            rxBuffer[rxHead] = data;
 8000660:	4b1f      	ldr	r3, [pc, #124]	@ (80006e0 <USART1_IRQHandler+0xbc>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	b2db      	uxtb	r3, r3
 8000666:	4619      	mov	r1, r3
 8000668:	4a1f      	ldr	r2, [pc, #124]	@ (80006e8 <USART1_IRQHandler+0xc4>)
 800066a:	79fb      	ldrb	r3, [r7, #7]
 800066c:	5453      	strb	r3, [r2, r1]
            rxHead = nextHead;
 800066e:	4a1c      	ldr	r2, [pc, #112]	@ (80006e0 <USART1_IRQHandler+0xbc>)
 8000670:	79bb      	ldrb	r3, [r7, #6]
 8000672:	7013      	strb	r3, [r2, #0]
        }
    }

    // Check if transmit data register is empty
    if (USART1->SR & USART_SR_TXE) {
 8000674:	4b19      	ldr	r3, [pc, #100]	@ (80006dc <USART1_IRQHandler+0xb8>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800067c:	2b00      	cmp	r3, #0
 800067e:	d028      	beq.n	80006d2 <USART1_IRQHandler+0xae>
        if (txTail != txHead) { // If data is available to transmit
 8000680:	4b1a      	ldr	r3, [pc, #104]	@ (80006ec <USART1_IRQHandler+0xc8>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	b2da      	uxtb	r2, r3
 8000686:	4b1a      	ldr	r3, [pc, #104]	@ (80006f0 <USART1_IRQHandler+0xcc>)
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	b2db      	uxtb	r3, r3
 800068c:	429a      	cmp	r2, r3
 800068e:	d017      	beq.n	80006c0 <USART1_IRQHandler+0x9c>
            USART1->DR = txBuffer[txTail];
 8000690:	4b16      	ldr	r3, [pc, #88]	@ (80006ec <USART1_IRQHandler+0xc8>)
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	b2db      	uxtb	r3, r3
 8000696:	461a      	mov	r2, r3
 8000698:	4b16      	ldr	r3, [pc, #88]	@ (80006f4 <USART1_IRQHandler+0xd0>)
 800069a:	5c9b      	ldrb	r3, [r3, r2]
 800069c:	b2da      	uxtb	r2, r3
 800069e:	4b0f      	ldr	r3, [pc, #60]	@ (80006dc <USART1_IRQHandler+0xb8>)
 80006a0:	605a      	str	r2, [r3, #4]
            txTail = (txTail + 1) % TX_BUFFER_SIZE;
 80006a2:	4b12      	ldr	r3, [pc, #72]	@ (80006ec <USART1_IRQHandler+0xc8>)
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	b2db      	uxtb	r3, r3
 80006a8:	3301      	adds	r3, #1
 80006aa:	425a      	negs	r2, r3
 80006ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80006b0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80006b4:	bf58      	it	pl
 80006b6:	4253      	negpl	r3, r2
 80006b8:	b2da      	uxtb	r2, r3
 80006ba:	4b0c      	ldr	r3, [pc, #48]	@ (80006ec <USART1_IRQHandler+0xc8>)
 80006bc:	701a      	strb	r2, [r3, #0]
            // No more data to send, disable TXE interrupt
            USART1->CR1 &= ~USART_CR1_TXEIE;
            txBusy = 0;
        }
    }
}
 80006be:	e008      	b.n	80006d2 <USART1_IRQHandler+0xae>
            USART1->CR1 &= ~USART_CR1_TXEIE;
 80006c0:	4b06      	ldr	r3, [pc, #24]	@ (80006dc <USART1_IRQHandler+0xb8>)
 80006c2:	68db      	ldr	r3, [r3, #12]
 80006c4:	4a05      	ldr	r2, [pc, #20]	@ (80006dc <USART1_IRQHandler+0xb8>)
 80006c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80006ca:	60d3      	str	r3, [r2, #12]
            txBusy = 0;
 80006cc:	4b0a      	ldr	r3, [pc, #40]	@ (80006f8 <USART1_IRQHandler+0xd4>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	701a      	strb	r2, [r3, #0]
}
 80006d2:	bf00      	nop
 80006d4:	370c      	adds	r7, #12
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bc80      	pop	{r7}
 80006da:	4770      	bx	lr
 80006dc:	40013800 	.word	0x40013800
 80006e0:	200001ce 	.word	0x200001ce
 80006e4:	200001cf 	.word	0x200001cf
 80006e8:	2000014c 	.word	0x2000014c
 80006ec:	200001cd 	.word	0x200001cd
 80006f0:	200001cc 	.word	0x200001cc
 80006f4:	200000cc 	.word	0x200000cc
 80006f8:	200001d0 	.word	0x200001d0

080006fc <CAN_Init>:

void CAN_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
    /* Enable clock for GPIOB and CAN */
    RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;  // Enable GPIOB clock
 8000700:	4b4c      	ldr	r3, [pc, #304]	@ (8000834 <CAN_Init+0x138>)
 8000702:	699b      	ldr	r3, [r3, #24]
 8000704:	4a4b      	ldr	r2, [pc, #300]	@ (8000834 <CAN_Init+0x138>)
 8000706:	f043 0308 	orr.w	r3, r3, #8
 800070a:	6193      	str	r3, [r2, #24]
    RCC->APB1ENR |= RCC_APB1ENR_CAN1EN;  // Enable CAN clock
 800070c:	4b49      	ldr	r3, [pc, #292]	@ (8000834 <CAN_Init+0x138>)
 800070e:	69db      	ldr	r3, [r3, #28]
 8000710:	4a48      	ldr	r2, [pc, #288]	@ (8000834 <CAN_Init+0x138>)
 8000712:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000716:	61d3      	str	r3, [r2, #28]

    /* Configure PB8 as CAN_RX (input floating) */
    GPIOB->CRH &= ~(GPIO_CRH_CNF8 | GPIO_CRH_MODE8);
 8000718:	4b47      	ldr	r3, [pc, #284]	@ (8000838 <CAN_Init+0x13c>)
 800071a:	685b      	ldr	r3, [r3, #4]
 800071c:	4a46      	ldr	r2, [pc, #280]	@ (8000838 <CAN_Init+0x13c>)
 800071e:	f023 030f 	bic.w	r3, r3, #15
 8000722:	6053      	str	r3, [r2, #4]
    GPIOB->CRH |= GPIO_CRH_CNF8_0;
 8000724:	4b44      	ldr	r3, [pc, #272]	@ (8000838 <CAN_Init+0x13c>)
 8000726:	685b      	ldr	r3, [r3, #4]
 8000728:	4a43      	ldr	r2, [pc, #268]	@ (8000838 <CAN_Init+0x13c>)
 800072a:	f043 0304 	orr.w	r3, r3, #4
 800072e:	6053      	str	r3, [r2, #4]

    /* Configure PB9 as CAN_TX (alternate function push-pull) */
    GPIOB->CRH &= ~(GPIO_CRH_CNF9 | GPIO_CRH_MODE9);
 8000730:	4b41      	ldr	r3, [pc, #260]	@ (8000838 <CAN_Init+0x13c>)
 8000732:	685b      	ldr	r3, [r3, #4]
 8000734:	4a40      	ldr	r2, [pc, #256]	@ (8000838 <CAN_Init+0x13c>)
 8000736:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800073a:	6053      	str	r3, [r2, #4]
    GPIOB->CRH |= GPIO_CRH_CNF9_1 | GPIO_CRH_MODE9_0;
 800073c:	4b3e      	ldr	r3, [pc, #248]	@ (8000838 <CAN_Init+0x13c>)
 800073e:	685b      	ldr	r3, [r3, #4]
 8000740:	4a3d      	ldr	r2, [pc, #244]	@ (8000838 <CAN_Init+0x13c>)
 8000742:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8000746:	6053      	str	r3, [r2, #4]

    /* Enter initialization mode */
    CAN1->MCR = CAN_MCR_INRQ;
 8000748:	4b3c      	ldr	r3, [pc, #240]	@ (800083c <CAN_Init+0x140>)
 800074a:	2201      	movs	r2, #1
 800074c:	601a      	str	r2, [r3, #0]
    while (!(CAN1->MSR & CAN_MSR_INAK)); // Wait until initialization mode is entered
 800074e:	bf00      	nop
 8000750:	4b3a      	ldr	r3, [pc, #232]	@ (800083c <CAN_Init+0x140>)
 8000752:	685b      	ldr	r3, [r3, #4]
 8000754:	f003 0301 	and.w	r3, r3, #1
 8000758:	2b00      	cmp	r3, #0
 800075a:	d0f9      	beq.n	8000750 <CAN_Init+0x54>

    /* Set CAN bit timing */
    CAN1->BTR = (CAN_SJW - 1) << 24 |
 800075c:	4b37      	ldr	r3, [pc, #220]	@ (800083c <CAN_Init+0x140>)
 800075e:	4a38      	ldr	r2, [pc, #224]	@ (8000840 <CAN_Init+0x144>)
 8000760:	61da      	str	r2, [r3, #28]
                (CAN_TS1 - 1) << 16 |
                (CAN_TS2 - 1) << 20 |
                (CAN_BAUD_PRESCALER - 1);

    /* Set CAN filters */
    CAN1->FMR |= CAN_FMR_FINIT;  // Enter filter initialization mode
 8000762:	4b36      	ldr	r3, [pc, #216]	@ (800083c <CAN_Init+0x140>)
 8000764:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000768:	4a34      	ldr	r2, [pc, #208]	@ (800083c <CAN_Init+0x140>)
 800076a:	f043 0301 	orr.w	r3, r3, #1
 800076e:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
    CAN1->FA1R &= ~CAN_FA1R_FACT; // Deactivate all filters
 8000772:	4b32      	ldr	r3, [pc, #200]	@ (800083c <CAN_Init+0x140>)
 8000774:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 8000778:	4a30      	ldr	r2, [pc, #192]	@ (800083c <CAN_Init+0x140>)
 800077a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800077e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000782:	f8c2 321c 	str.w	r3, [r2, #540]	@ 0x21c

    /* Filter 0: accept all standard IDs */
    CAN1->FS1R |= CAN_FS1R_FSC;  // Single 32-bit scale configuration
 8000786:	4b2d      	ldr	r3, [pc, #180]	@ (800083c <CAN_Init+0x140>)
 8000788:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800078c:	4a2b      	ldr	r2, [pc, #172]	@ (800083c <CAN_Init+0x140>)
 800078e:	ea6f 3393 	mvn.w	r3, r3, lsr #14
 8000792:	ea6f 3383 	mvn.w	r3, r3, lsl #14
 8000796:	f8c2 320c 	str.w	r3, [r2, #524]	@ 0x20c
    CAN1->FM1R &= ~CAN_FM1R_FBM; // Identifier mask mode
 800079a:	4b28      	ldr	r3, [pc, #160]	@ (800083c <CAN_Init+0x140>)
 800079c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80007a0:	4a26      	ldr	r2, [pc, #152]	@ (800083c <CAN_Init+0x140>)
 80007a2:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80007a6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80007aa:	f8c2 3204 	str.w	r3, [r2, #516]	@ 0x204
    CAN1->sFilterRegister[0].FR1 = 0x00000000; // Filter ID
 80007ae:	4b23      	ldr	r3, [pc, #140]	@ (800083c <CAN_Init+0x140>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	f8c3 2240 	str.w	r2, [r3, #576]	@ 0x240
    CAN1->sFilterRegister[0].FR2 = 0x00000000; // Filter mask
 80007b6:	4b21      	ldr	r3, [pc, #132]	@ (800083c <CAN_Init+0x140>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	f8c3 2244 	str.w	r2, [r3, #580]	@ 0x244
    CAN1->FA1R |= CAN_FA1R_FACT;  // Enable filter 0
 80007be:	4b1f      	ldr	r3, [pc, #124]	@ (800083c <CAN_Init+0x140>)
 80007c0:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 80007c4:	4a1d      	ldr	r2, [pc, #116]	@ (800083c <CAN_Init+0x140>)
 80007c6:	ea6f 3393 	mvn.w	r3, r3, lsr #14
 80007ca:	ea6f 3383 	mvn.w	r3, r3, lsl #14
 80007ce:	f8c2 321c 	str.w	r3, [r2, #540]	@ 0x21c

    CAN1->FMR &= ~CAN_FMR_FINIT;  // Leave filter initialization mode
 80007d2:	4b1a      	ldr	r3, [pc, #104]	@ (800083c <CAN_Init+0x140>)
 80007d4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80007d8:	4a18      	ldr	r2, [pc, #96]	@ (800083c <CAN_Init+0x140>)
 80007da:	f023 0301 	bic.w	r3, r3, #1
 80007de:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

    /* Leave initialization mode, enter normal mode */
    CAN1->MCR &= ~CAN_MCR_INRQ;
 80007e2:	4b16      	ldr	r3, [pc, #88]	@ (800083c <CAN_Init+0x140>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	4a15      	ldr	r2, [pc, #84]	@ (800083c <CAN_Init+0x140>)
 80007e8:	f023 0301 	bic.w	r3, r3, #1
 80007ec:	6013      	str	r3, [r2, #0]
    while (CAN1->MSR & CAN_MSR_INAK); // Wait until normal mode is entered
 80007ee:	bf00      	nop
 80007f0:	4b12      	ldr	r3, [pc, #72]	@ (800083c <CAN_Init+0x140>)
 80007f2:	685b      	ldr	r3, [r3, #4]
 80007f4:	f003 0301 	and.w	r3, r3, #1
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d1f9      	bne.n	80007f0 <CAN_Init+0xf4>

    // Check CAN mode status and send status over UART
    if (CAN1->MSR & CAN_MSR_INAK)
 80007fc:	4b0f      	ldr	r3, [pc, #60]	@ (800083c <CAN_Init+0x140>)
 80007fe:	685b      	ldr	r3, [r3, #4]
 8000800:	f003 0301 	and.w	r3, r3, #1
 8000804:	2b00      	cmp	r3, #0
 8000806:	d004      	beq.n	8000812 <CAN_Init+0x116>
    {
        UART_Send((uint8_t *)"CAN is still in Initialization mode\r\n", 38);
 8000808:	2126      	movs	r1, #38	@ 0x26
 800080a:	480e      	ldr	r0, [pc, #56]	@ (8000844 <CAN_Init+0x148>)
 800080c:	f7ff feb4 	bl	8000578 <UART_Send>
    }
    else
    {
        UART_Send((uint8_t *)"CAN is in Normal mode\r\n", 24);
    }
}
 8000810:	e00e      	b.n	8000830 <CAN_Init+0x134>
    else if (CAN1->MSR & CAN_MSR_SLAK)
 8000812:	4b0a      	ldr	r3, [pc, #40]	@ (800083c <CAN_Init+0x140>)
 8000814:	685b      	ldr	r3, [r3, #4]
 8000816:	f003 0302 	and.w	r3, r3, #2
 800081a:	2b00      	cmp	r3, #0
 800081c:	d004      	beq.n	8000828 <CAN_Init+0x12c>
        UART_Send((uint8_t *)"CAN is in Sleep mode\r\n", 23);
 800081e:	2117      	movs	r1, #23
 8000820:	4809      	ldr	r0, [pc, #36]	@ (8000848 <CAN_Init+0x14c>)
 8000822:	f7ff fea9 	bl	8000578 <UART_Send>
}
 8000826:	e003      	b.n	8000830 <CAN_Init+0x134>
        UART_Send((uint8_t *)"CAN is in Normal mode\r\n", 24);
 8000828:	2118      	movs	r1, #24
 800082a:	4808      	ldr	r0, [pc, #32]	@ (800084c <CAN_Init+0x150>)
 800082c:	f7ff fea4 	bl	8000578 <UART_Send>
}
 8000830:	bf00      	nop
 8000832:	bd80      	pop	{r7, pc}
 8000834:	40021000 	.word	0x40021000
 8000838:	40010c00 	.word	0x40010c00
 800083c:	40006400 	.word	0x40006400
 8000840:	001c0008 	.word	0x001c0008
 8000844:	08001524 	.word	0x08001524
 8000848:	0800154c 	.word	0x0800154c
 800084c:	08001564 	.word	0x08001564

08000850 <PWM_Init>:

    UART_Send((uint8_t *)errorMsg, strlen(errorMsg));  // Send the error message over UART
}

void PWM_Init(void)
{
 8000850:	b480      	push	{r7}
 8000852:	b083      	sub	sp, #12
 8000854:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;  // Enable GPIOA clock
 8000856:	4b2e      	ldr	r3, [pc, #184]	@ (8000910 <PWM_Init+0xc0>)
 8000858:	699b      	ldr	r3, [r3, #24]
 800085a:	4a2d      	ldr	r2, [pc, #180]	@ (8000910 <PWM_Init+0xc0>)
 800085c:	f043 0304 	orr.w	r3, r3, #4
 8000860:	6193      	str	r3, [r2, #24]
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;  // Enable TIM2 clock
 8000862:	4b2b      	ldr	r3, [pc, #172]	@ (8000910 <PWM_Init+0xc0>)
 8000864:	69db      	ldr	r3, [r3, #28]
 8000866:	4a2a      	ldr	r2, [pc, #168]	@ (8000910 <PWM_Init+0xc0>)
 8000868:	f043 0301 	orr.w	r3, r3, #1
 800086c:	61d3      	str	r3, [r2, #28]

    GPIOA->CRL &= ~(GPIO_CRL_CNF0 | GPIO_CRL_MODE0);
 800086e:	4b29      	ldr	r3, [pc, #164]	@ (8000914 <PWM_Init+0xc4>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	4a28      	ldr	r2, [pc, #160]	@ (8000914 <PWM_Init+0xc4>)
 8000874:	f023 030f 	bic.w	r3, r3, #15
 8000878:	6013      	str	r3, [r2, #0]
    GPIOA->CRL |= (GPIO_CRL_CNF0_1 | GPIO_CRL_MODE0_1); // AF push-pull, 10 MHz output
 800087a:	4b26      	ldr	r3, [pc, #152]	@ (8000914 <PWM_Init+0xc4>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	4a25      	ldr	r2, [pc, #148]	@ (8000914 <PWM_Init+0xc4>)
 8000880:	f043 030a 	orr.w	r3, r3, #10
 8000884:	6013      	str	r3, [r2, #0]

    uint32_t timerClock = Clock_Frequency * 1000; // Timer clock in Hz
 8000886:	4b24      	ldr	r3, [pc, #144]	@ (8000918 <PWM_Init+0xc8>)
 8000888:	607b      	str	r3, [r7, #4]
    uint32_t period = (timerClock / PWM_FREQUENCY) - 1; // Calculate period for 800 kHz
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	0a1b      	lsrs	r3, r3, #8
 800088e:	4a23      	ldr	r2, [pc, #140]	@ (800091c <PWM_Init+0xcc>)
 8000890:	fba2 2303 	umull	r2, r3, r2, r3
 8000894:	091b      	lsrs	r3, r3, #4
 8000896:	3b01      	subs	r3, #1
 8000898:	603b      	str	r3, [r7, #0]
    TIM2->PSC = 0; // Prescaler set to 0
 800089a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800089e:	2200      	movs	r2, #0
 80008a0:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM2->ARR = period;
 80008a2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80008a6:	683b      	ldr	r3, [r7, #0]
 80008a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    TIM2->CCMR1 |= (TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1M_2); // PWM mode 1: OC1M = 110
 80008aa:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80008ae:	699b      	ldr	r3, [r3, #24]
 80008b0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80008b4:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80008b8:	6193      	str	r3, [r2, #24]
    TIM2->CCMR1 |= TIM_CCMR1_OC1PE;  // Enable preload register on TIM2_CH1
 80008ba:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80008be:	699b      	ldr	r3, [r3, #24]
 80008c0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80008c4:	f043 0308 	orr.w	r3, r3, #8
 80008c8:	6193      	str	r3, [r2, #24]
    TIM2->CCR1 = period / 2; // Set the initial duty cycle to 50%
 80008ca:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	6353      	str	r3, [r2, #52]	@ 0x34

    TIM2->CCER |= TIM_CCER_CC1E; // Enable TIM2_CH1 output
 80008d4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80008d8:	6a1b      	ldr	r3, [r3, #32]
 80008da:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80008de:	f043 0301 	orr.w	r3, r3, #1
 80008e2:	6213      	str	r3, [r2, #32]
    TIM2->CR1 |= TIM_CR1_CEN; // Enable TIM2 counter
 80008e4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80008ee:	f043 0301 	orr.w	r3, r3, #1
 80008f2:	6013      	str	r3, [r2, #0]
    TIM2->EGR |= TIM_EGR_UG; // Force update generation
 80008f4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80008f8:	695b      	ldr	r3, [r3, #20]
 80008fa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80008fe:	f043 0301 	orr.w	r3, r3, #1
 8000902:	6153      	str	r3, [r2, #20]
}
 8000904:	bf00      	nop
 8000906:	370c      	adds	r7, #12
 8000908:	46bd      	mov	sp, r7
 800090a:	bc80      	pop	{r7}
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	40021000 	.word	0x40021000
 8000914:	40010800 	.word	0x40010800
 8000918:	007a1200 	.word	0x007a1200
 800091c:	014f8b59 	.word	0x014f8b59

08000920 <PWM_SetDutyCycle>:

void PWM_SetDutyCycle(uint8_t dutyCycle)
{
 8000920:	b480      	push	{r7}
 8000922:	b085      	sub	sp, #20
 8000924:	af00      	add	r7, sp, #0
 8000926:	4603      	mov	r3, r0
 8000928:	71fb      	strb	r3, [r7, #7]
    uint32_t period = TIM2->ARR;
 800092a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800092e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000930:	60fb      	str	r3, [r7, #12]
    uint32_t pulse = (period * dutyCycle) / 100; // Calculate pulse length
 8000932:	79fb      	ldrb	r3, [r7, #7]
 8000934:	68fa      	ldr	r2, [r7, #12]
 8000936:	fb02 f303 	mul.w	r3, r2, r3
 800093a:	4a07      	ldr	r2, [pc, #28]	@ (8000958 <PWM_SetDutyCycle+0x38>)
 800093c:	fba2 2303 	umull	r2, r3, r2, r3
 8000940:	095b      	lsrs	r3, r3, #5
 8000942:	60bb      	str	r3, [r7, #8]
    TIM2->CCR1 = pulse; // Set the duty cycle
 8000944:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000948:	68bb      	ldr	r3, [r7, #8]
 800094a:	6353      	str	r3, [r2, #52]	@ 0x34
}
 800094c:	bf00      	nop
 800094e:	3714      	adds	r7, #20
 8000950:	46bd      	mov	sp, r7
 8000952:	bc80      	pop	{r7}
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop
 8000958:	51eb851f 	.word	0x51eb851f

0800095c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000960:	b672      	cpsid	i
}
 8000962:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000964:	bf00      	nop
 8000966:	e7fd      	b.n	8000964 <Error_Handler+0x8>

08000968 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000968:	b480      	push	{r7}
 800096a:	b085      	sub	sp, #20
 800096c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800096e:	4b15      	ldr	r3, [pc, #84]	@ (80009c4 <HAL_MspInit+0x5c>)
 8000970:	699b      	ldr	r3, [r3, #24]
 8000972:	4a14      	ldr	r2, [pc, #80]	@ (80009c4 <HAL_MspInit+0x5c>)
 8000974:	f043 0301 	orr.w	r3, r3, #1
 8000978:	6193      	str	r3, [r2, #24]
 800097a:	4b12      	ldr	r3, [pc, #72]	@ (80009c4 <HAL_MspInit+0x5c>)
 800097c:	699b      	ldr	r3, [r3, #24]
 800097e:	f003 0301 	and.w	r3, r3, #1
 8000982:	60bb      	str	r3, [r7, #8]
 8000984:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000986:	4b0f      	ldr	r3, [pc, #60]	@ (80009c4 <HAL_MspInit+0x5c>)
 8000988:	69db      	ldr	r3, [r3, #28]
 800098a:	4a0e      	ldr	r2, [pc, #56]	@ (80009c4 <HAL_MspInit+0x5c>)
 800098c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000990:	61d3      	str	r3, [r2, #28]
 8000992:	4b0c      	ldr	r3, [pc, #48]	@ (80009c4 <HAL_MspInit+0x5c>)
 8000994:	69db      	ldr	r3, [r3, #28]
 8000996:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800099a:	607b      	str	r3, [r7, #4]
 800099c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800099e:	4b0a      	ldr	r3, [pc, #40]	@ (80009c8 <HAL_MspInit+0x60>)
 80009a0:	685b      	ldr	r3, [r3, #4]
 80009a2:	60fb      	str	r3, [r7, #12]
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80009aa:	60fb      	str	r3, [r7, #12]
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80009b2:	60fb      	str	r3, [r7, #12]
 80009b4:	4a04      	ldr	r2, [pc, #16]	@ (80009c8 <HAL_MspInit+0x60>)
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ba:	bf00      	nop
 80009bc:	3714      	adds	r7, #20
 80009be:	46bd      	mov	sp, r7
 80009c0:	bc80      	pop	{r7}
 80009c2:	4770      	bx	lr
 80009c4:	40021000 	.word	0x40021000
 80009c8:	40010000 	.word	0x40010000

080009cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009d0:	bf00      	nop
 80009d2:	e7fd      	b.n	80009d0 <NMI_Handler+0x4>

080009d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009d8:	bf00      	nop
 80009da:	e7fd      	b.n	80009d8 <HardFault_Handler+0x4>

080009dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009e0:	bf00      	nop
 80009e2:	e7fd      	b.n	80009e0 <MemManage_Handler+0x4>

080009e4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009e8:	bf00      	nop
 80009ea:	e7fd      	b.n	80009e8 <BusFault_Handler+0x4>

080009ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009f0:	bf00      	nop
 80009f2:	e7fd      	b.n	80009f0 <UsageFault_Handler+0x4>

080009f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009f8:	bf00      	nop
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bc80      	pop	{r7}
 80009fe:	4770      	bx	lr

08000a00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a04:	bf00      	nop
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bc80      	pop	{r7}
 8000a0a:	4770      	bx	lr

08000a0c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a10:	bf00      	nop
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bc80      	pop	{r7}
 8000a16:	4770      	bx	lr

08000a18 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a1c:	bf00      	nop
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bc80      	pop	{r7}
 8000a22:	4770      	bx	lr

08000a24 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a24:	f7ff fff8 	bl	8000a18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a28:	480b      	ldr	r0, [pc, #44]	@ (8000a58 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000a2a:	490c      	ldr	r1, [pc, #48]	@ (8000a5c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000a2c:	4a0c      	ldr	r2, [pc, #48]	@ (8000a60 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000a2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a30:	e002      	b.n	8000a38 <LoopCopyDataInit>

08000a32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a36:	3304      	adds	r3, #4

08000a38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a3c:	d3f9      	bcc.n	8000a32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a3e:	4a09      	ldr	r2, [pc, #36]	@ (8000a64 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000a40:	4c09      	ldr	r4, [pc, #36]	@ (8000a68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a44:	e001      	b.n	8000a4a <LoopFillZerobss>

08000a46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a48:	3204      	adds	r2, #4

08000a4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a4c:	d3fb      	bcc.n	8000a46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a4e:	f000 fd29 	bl	80014a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a52:	f7ff fbc9 	bl	80001e8 <main>
  bx lr
 8000a56:	4770      	bx	lr
  ldr r0, =_sdata
 8000a58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a5c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a60:	08001708 	.word	0x08001708
  ldr r2, =_sbss
 8000a64:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a68:	200001d8 	.word	0x200001d8

08000a6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a6c:	e7fe      	b.n	8000a6c <ADC1_2_IRQHandler>
	...

08000a70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a74:	4b08      	ldr	r3, [pc, #32]	@ (8000a98 <HAL_Init+0x28>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a07      	ldr	r2, [pc, #28]	@ (8000a98 <HAL_Init+0x28>)
 8000a7a:	f043 0310 	orr.w	r3, r3, #16
 8000a7e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a80:	2003      	movs	r0, #3
 8000a82:	f000 f8f5 	bl	8000c70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a86:	200f      	movs	r0, #15
 8000a88:	f000 f808 	bl	8000a9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a8c:	f7ff ff6c 	bl	8000968 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a90:	2300      	movs	r3, #0
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	40022000 	.word	0x40022000

08000a9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000aa4:	4b12      	ldr	r3, [pc, #72]	@ (8000af0 <HAL_InitTick+0x54>)
 8000aa6:	681a      	ldr	r2, [r3, #0]
 8000aa8:	4b12      	ldr	r3, [pc, #72]	@ (8000af4 <HAL_InitTick+0x58>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	4619      	mov	r1, r3
 8000aae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ab2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ab6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aba:	4618      	mov	r0, r3
 8000abc:	f000 f8ff 	bl	8000cbe <HAL_SYSTICK_Config>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	e00e      	b.n	8000ae8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	2b0f      	cmp	r3, #15
 8000ace:	d80a      	bhi.n	8000ae6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	6879      	ldr	r1, [r7, #4]
 8000ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad8:	f000 f8d5 	bl	8000c86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000adc:	4a06      	ldr	r2, [pc, #24]	@ (8000af8 <HAL_InitTick+0x5c>)
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	e000      	b.n	8000ae8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ae6:	2301      	movs	r3, #1
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	3708      	adds	r7, #8
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	20000000 	.word	0x20000000
 8000af4:	20000008 	.word	0x20000008
 8000af8:	20000004 	.word	0x20000004

08000afc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  return uwTick;
 8000b00:	4b02      	ldr	r3, [pc, #8]	@ (8000b0c <HAL_GetTick+0x10>)
 8000b02:	681b      	ldr	r3, [r3, #0]
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bc80      	pop	{r7}
 8000b0a:	4770      	bx	lr
 8000b0c:	200001d4 	.word	0x200001d4

08000b10 <__NVIC_SetPriorityGrouping>:
{
 8000b10:	b480      	push	{r7}
 8000b12:	b085      	sub	sp, #20
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	f003 0307 	and.w	r3, r3, #7
 8000b1e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b20:	4b0c      	ldr	r3, [pc, #48]	@ (8000b54 <__NVIC_SetPriorityGrouping+0x44>)
 8000b22:	68db      	ldr	r3, [r3, #12]
 8000b24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b26:	68ba      	ldr	r2, [r7, #8]
 8000b28:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b34:	68bb      	ldr	r3, [r7, #8]
 8000b36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b38:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b42:	4a04      	ldr	r2, [pc, #16]	@ (8000b54 <__NVIC_SetPriorityGrouping+0x44>)
 8000b44:	68bb      	ldr	r3, [r7, #8]
 8000b46:	60d3      	str	r3, [r2, #12]
}
 8000b48:	bf00      	nop
 8000b4a:	3714      	adds	r7, #20
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bc80      	pop	{r7}
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	e000ed00 	.word	0xe000ed00

08000b58 <__NVIC_GetPriorityGrouping>:
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b5c:	4b04      	ldr	r3, [pc, #16]	@ (8000b70 <__NVIC_GetPriorityGrouping+0x18>)
 8000b5e:	68db      	ldr	r3, [r3, #12]
 8000b60:	0a1b      	lsrs	r3, r3, #8
 8000b62:	f003 0307 	and.w	r3, r3, #7
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bc80      	pop	{r7}
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	e000ed00 	.word	0xe000ed00

08000b74 <__NVIC_SetPriority>:
{
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	6039      	str	r1, [r7, #0]
 8000b7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	db0a      	blt.n	8000b9e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	b2da      	uxtb	r2, r3
 8000b8c:	490c      	ldr	r1, [pc, #48]	@ (8000bc0 <__NVIC_SetPriority+0x4c>)
 8000b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b92:	0112      	lsls	r2, r2, #4
 8000b94:	b2d2      	uxtb	r2, r2
 8000b96:	440b      	add	r3, r1
 8000b98:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000b9c:	e00a      	b.n	8000bb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	b2da      	uxtb	r2, r3
 8000ba2:	4908      	ldr	r1, [pc, #32]	@ (8000bc4 <__NVIC_SetPriority+0x50>)
 8000ba4:	79fb      	ldrb	r3, [r7, #7]
 8000ba6:	f003 030f 	and.w	r3, r3, #15
 8000baa:	3b04      	subs	r3, #4
 8000bac:	0112      	lsls	r2, r2, #4
 8000bae:	b2d2      	uxtb	r2, r2
 8000bb0:	440b      	add	r3, r1
 8000bb2:	761a      	strb	r2, [r3, #24]
}
 8000bb4:	bf00      	nop
 8000bb6:	370c      	adds	r7, #12
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bc80      	pop	{r7}
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	e000e100 	.word	0xe000e100
 8000bc4:	e000ed00 	.word	0xe000ed00

08000bc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b089      	sub	sp, #36	@ 0x24
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	60f8      	str	r0, [r7, #12]
 8000bd0:	60b9      	str	r1, [r7, #8]
 8000bd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	f003 0307 	and.w	r3, r3, #7
 8000bda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bdc:	69fb      	ldr	r3, [r7, #28]
 8000bde:	f1c3 0307 	rsb	r3, r3, #7
 8000be2:	2b04      	cmp	r3, #4
 8000be4:	bf28      	it	cs
 8000be6:	2304      	movcs	r3, #4
 8000be8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bea:	69fb      	ldr	r3, [r7, #28]
 8000bec:	3304      	adds	r3, #4
 8000bee:	2b06      	cmp	r3, #6
 8000bf0:	d902      	bls.n	8000bf8 <NVIC_EncodePriority+0x30>
 8000bf2:	69fb      	ldr	r3, [r7, #28]
 8000bf4:	3b03      	subs	r3, #3
 8000bf6:	e000      	b.n	8000bfa <NVIC_EncodePriority+0x32>
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bfc:	f04f 32ff 	mov.w	r2, #4294967295
 8000c00:	69bb      	ldr	r3, [r7, #24]
 8000c02:	fa02 f303 	lsl.w	r3, r2, r3
 8000c06:	43da      	mvns	r2, r3
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	401a      	ands	r2, r3
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c10:	f04f 31ff 	mov.w	r1, #4294967295
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	fa01 f303 	lsl.w	r3, r1, r3
 8000c1a:	43d9      	mvns	r1, r3
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c20:	4313      	orrs	r3, r2
         );
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3724      	adds	r7, #36	@ 0x24
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bc80      	pop	{r7}
 8000c2a:	4770      	bx	lr

08000c2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	3b01      	subs	r3, #1
 8000c38:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c3c:	d301      	bcc.n	8000c42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c3e:	2301      	movs	r3, #1
 8000c40:	e00f      	b.n	8000c62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c42:	4a0a      	ldr	r2, [pc, #40]	@ (8000c6c <SysTick_Config+0x40>)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	3b01      	subs	r3, #1
 8000c48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c4a:	210f      	movs	r1, #15
 8000c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c50:	f7ff ff90 	bl	8000b74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c54:	4b05      	ldr	r3, [pc, #20]	@ (8000c6c <SysTick_Config+0x40>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c5a:	4b04      	ldr	r3, [pc, #16]	@ (8000c6c <SysTick_Config+0x40>)
 8000c5c:	2207      	movs	r2, #7
 8000c5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c60:	2300      	movs	r3, #0
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	e000e010 	.word	0xe000e010

08000c70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c78:	6878      	ldr	r0, [r7, #4]
 8000c7a:	f7ff ff49 	bl	8000b10 <__NVIC_SetPriorityGrouping>
}
 8000c7e:	bf00      	nop
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}

08000c86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c86:	b580      	push	{r7, lr}
 8000c88:	b086      	sub	sp, #24
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	60b9      	str	r1, [r7, #8]
 8000c90:	607a      	str	r2, [r7, #4]
 8000c92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c94:	2300      	movs	r3, #0
 8000c96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c98:	f7ff ff5e 	bl	8000b58 <__NVIC_GetPriorityGrouping>
 8000c9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c9e:	687a      	ldr	r2, [r7, #4]
 8000ca0:	68b9      	ldr	r1, [r7, #8]
 8000ca2:	6978      	ldr	r0, [r7, #20]
 8000ca4:	f7ff ff90 	bl	8000bc8 <NVIC_EncodePriority>
 8000ca8:	4602      	mov	r2, r0
 8000caa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cae:	4611      	mov	r1, r2
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f7ff ff5f 	bl	8000b74 <__NVIC_SetPriority>
}
 8000cb6:	bf00      	nop
 8000cb8:	3718      	adds	r7, #24
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}

08000cbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	b082      	sub	sp, #8
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cc6:	6878      	ldr	r0, [r7, #4]
 8000cc8:	f7ff ffb0 	bl	8000c2c <SysTick_Config>
 8000ccc:	4603      	mov	r3, r0
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
	...

08000cd8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b086      	sub	sp, #24
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d101      	bne.n	8000cea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	e272      	b.n	80011d0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f003 0301 	and.w	r3, r3, #1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	f000 8087 	beq.w	8000e06 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000cf8:	4b92      	ldr	r3, [pc, #584]	@ (8000f44 <HAL_RCC_OscConfig+0x26c>)
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	f003 030c 	and.w	r3, r3, #12
 8000d00:	2b04      	cmp	r3, #4
 8000d02:	d00c      	beq.n	8000d1e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d04:	4b8f      	ldr	r3, [pc, #572]	@ (8000f44 <HAL_RCC_OscConfig+0x26c>)
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	f003 030c 	and.w	r3, r3, #12
 8000d0c:	2b08      	cmp	r3, #8
 8000d0e:	d112      	bne.n	8000d36 <HAL_RCC_OscConfig+0x5e>
 8000d10:	4b8c      	ldr	r3, [pc, #560]	@ (8000f44 <HAL_RCC_OscConfig+0x26c>)
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000d1c:	d10b      	bne.n	8000d36 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d1e:	4b89      	ldr	r3, [pc, #548]	@ (8000f44 <HAL_RCC_OscConfig+0x26c>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d06c      	beq.n	8000e04 <HAL_RCC_OscConfig+0x12c>
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d168      	bne.n	8000e04 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000d32:	2301      	movs	r3, #1
 8000d34:	e24c      	b.n	80011d0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000d3e:	d106      	bne.n	8000d4e <HAL_RCC_OscConfig+0x76>
 8000d40:	4b80      	ldr	r3, [pc, #512]	@ (8000f44 <HAL_RCC_OscConfig+0x26c>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a7f      	ldr	r2, [pc, #508]	@ (8000f44 <HAL_RCC_OscConfig+0x26c>)
 8000d46:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d4a:	6013      	str	r3, [r2, #0]
 8000d4c:	e02e      	b.n	8000dac <HAL_RCC_OscConfig+0xd4>
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d10c      	bne.n	8000d70 <HAL_RCC_OscConfig+0x98>
 8000d56:	4b7b      	ldr	r3, [pc, #492]	@ (8000f44 <HAL_RCC_OscConfig+0x26c>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4a7a      	ldr	r2, [pc, #488]	@ (8000f44 <HAL_RCC_OscConfig+0x26c>)
 8000d5c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000d60:	6013      	str	r3, [r2, #0]
 8000d62:	4b78      	ldr	r3, [pc, #480]	@ (8000f44 <HAL_RCC_OscConfig+0x26c>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4a77      	ldr	r2, [pc, #476]	@ (8000f44 <HAL_RCC_OscConfig+0x26c>)
 8000d68:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d6c:	6013      	str	r3, [r2, #0]
 8000d6e:	e01d      	b.n	8000dac <HAL_RCC_OscConfig+0xd4>
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000d78:	d10c      	bne.n	8000d94 <HAL_RCC_OscConfig+0xbc>
 8000d7a:	4b72      	ldr	r3, [pc, #456]	@ (8000f44 <HAL_RCC_OscConfig+0x26c>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4a71      	ldr	r2, [pc, #452]	@ (8000f44 <HAL_RCC_OscConfig+0x26c>)
 8000d80:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d84:	6013      	str	r3, [r2, #0]
 8000d86:	4b6f      	ldr	r3, [pc, #444]	@ (8000f44 <HAL_RCC_OscConfig+0x26c>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4a6e      	ldr	r2, [pc, #440]	@ (8000f44 <HAL_RCC_OscConfig+0x26c>)
 8000d8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d90:	6013      	str	r3, [r2, #0]
 8000d92:	e00b      	b.n	8000dac <HAL_RCC_OscConfig+0xd4>
 8000d94:	4b6b      	ldr	r3, [pc, #428]	@ (8000f44 <HAL_RCC_OscConfig+0x26c>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a6a      	ldr	r2, [pc, #424]	@ (8000f44 <HAL_RCC_OscConfig+0x26c>)
 8000d9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000d9e:	6013      	str	r3, [r2, #0]
 8000da0:	4b68      	ldr	r3, [pc, #416]	@ (8000f44 <HAL_RCC_OscConfig+0x26c>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a67      	ldr	r2, [pc, #412]	@ (8000f44 <HAL_RCC_OscConfig+0x26c>)
 8000da6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000daa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d013      	beq.n	8000ddc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000db4:	f7ff fea2 	bl	8000afc <HAL_GetTick>
 8000db8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dba:	e008      	b.n	8000dce <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000dbc:	f7ff fe9e 	bl	8000afc <HAL_GetTick>
 8000dc0:	4602      	mov	r2, r0
 8000dc2:	693b      	ldr	r3, [r7, #16]
 8000dc4:	1ad3      	subs	r3, r2, r3
 8000dc6:	2b64      	cmp	r3, #100	@ 0x64
 8000dc8:	d901      	bls.n	8000dce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000dca:	2303      	movs	r3, #3
 8000dcc:	e200      	b.n	80011d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dce:	4b5d      	ldr	r3, [pc, #372]	@ (8000f44 <HAL_RCC_OscConfig+0x26c>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d0f0      	beq.n	8000dbc <HAL_RCC_OscConfig+0xe4>
 8000dda:	e014      	b.n	8000e06 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ddc:	f7ff fe8e 	bl	8000afc <HAL_GetTick>
 8000de0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000de2:	e008      	b.n	8000df6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000de4:	f7ff fe8a 	bl	8000afc <HAL_GetTick>
 8000de8:	4602      	mov	r2, r0
 8000dea:	693b      	ldr	r3, [r7, #16]
 8000dec:	1ad3      	subs	r3, r2, r3
 8000dee:	2b64      	cmp	r3, #100	@ 0x64
 8000df0:	d901      	bls.n	8000df6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000df2:	2303      	movs	r3, #3
 8000df4:	e1ec      	b.n	80011d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000df6:	4b53      	ldr	r3, [pc, #332]	@ (8000f44 <HAL_RCC_OscConfig+0x26c>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d1f0      	bne.n	8000de4 <HAL_RCC_OscConfig+0x10c>
 8000e02:	e000      	b.n	8000e06 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f003 0302 	and.w	r3, r3, #2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d063      	beq.n	8000eda <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e12:	4b4c      	ldr	r3, [pc, #304]	@ (8000f44 <HAL_RCC_OscConfig+0x26c>)
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	f003 030c 	and.w	r3, r3, #12
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d00b      	beq.n	8000e36 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000e1e:	4b49      	ldr	r3, [pc, #292]	@ (8000f44 <HAL_RCC_OscConfig+0x26c>)
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	f003 030c 	and.w	r3, r3, #12
 8000e26:	2b08      	cmp	r3, #8
 8000e28:	d11c      	bne.n	8000e64 <HAL_RCC_OscConfig+0x18c>
 8000e2a:	4b46      	ldr	r3, [pc, #280]	@ (8000f44 <HAL_RCC_OscConfig+0x26c>)
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d116      	bne.n	8000e64 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e36:	4b43      	ldr	r3, [pc, #268]	@ (8000f44 <HAL_RCC_OscConfig+0x26c>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f003 0302 	and.w	r3, r3, #2
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d005      	beq.n	8000e4e <HAL_RCC_OscConfig+0x176>
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	691b      	ldr	r3, [r3, #16]
 8000e46:	2b01      	cmp	r3, #1
 8000e48:	d001      	beq.n	8000e4e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e1c0      	b.n	80011d0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e4e:	4b3d      	ldr	r3, [pc, #244]	@ (8000f44 <HAL_RCC_OscConfig+0x26c>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	695b      	ldr	r3, [r3, #20]
 8000e5a:	00db      	lsls	r3, r3, #3
 8000e5c:	4939      	ldr	r1, [pc, #228]	@ (8000f44 <HAL_RCC_OscConfig+0x26c>)
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e62:	e03a      	b.n	8000eda <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	691b      	ldr	r3, [r3, #16]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d020      	beq.n	8000eae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e6c:	4b36      	ldr	r3, [pc, #216]	@ (8000f48 <HAL_RCC_OscConfig+0x270>)
 8000e6e:	2201      	movs	r2, #1
 8000e70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e72:	f7ff fe43 	bl	8000afc <HAL_GetTick>
 8000e76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e78:	e008      	b.n	8000e8c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e7a:	f7ff fe3f 	bl	8000afc <HAL_GetTick>
 8000e7e:	4602      	mov	r2, r0
 8000e80:	693b      	ldr	r3, [r7, #16]
 8000e82:	1ad3      	subs	r3, r2, r3
 8000e84:	2b02      	cmp	r3, #2
 8000e86:	d901      	bls.n	8000e8c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000e88:	2303      	movs	r3, #3
 8000e8a:	e1a1      	b.n	80011d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e8c:	4b2d      	ldr	r3, [pc, #180]	@ (8000f44 <HAL_RCC_OscConfig+0x26c>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f003 0302 	and.w	r3, r3, #2
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d0f0      	beq.n	8000e7a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e98:	4b2a      	ldr	r3, [pc, #168]	@ (8000f44 <HAL_RCC_OscConfig+0x26c>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	695b      	ldr	r3, [r3, #20]
 8000ea4:	00db      	lsls	r3, r3, #3
 8000ea6:	4927      	ldr	r1, [pc, #156]	@ (8000f44 <HAL_RCC_OscConfig+0x26c>)
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	600b      	str	r3, [r1, #0]
 8000eac:	e015      	b.n	8000eda <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000eae:	4b26      	ldr	r3, [pc, #152]	@ (8000f48 <HAL_RCC_OscConfig+0x270>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eb4:	f7ff fe22 	bl	8000afc <HAL_GetTick>
 8000eb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000eba:	e008      	b.n	8000ece <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ebc:	f7ff fe1e 	bl	8000afc <HAL_GetTick>
 8000ec0:	4602      	mov	r2, r0
 8000ec2:	693b      	ldr	r3, [r7, #16]
 8000ec4:	1ad3      	subs	r3, r2, r3
 8000ec6:	2b02      	cmp	r3, #2
 8000ec8:	d901      	bls.n	8000ece <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000eca:	2303      	movs	r3, #3
 8000ecc:	e180      	b.n	80011d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ece:	4b1d      	ldr	r3, [pc, #116]	@ (8000f44 <HAL_RCC_OscConfig+0x26c>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f003 0302 	and.w	r3, r3, #2
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d1f0      	bne.n	8000ebc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f003 0308 	and.w	r3, r3, #8
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d03a      	beq.n	8000f5c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	699b      	ldr	r3, [r3, #24]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d019      	beq.n	8000f22 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000eee:	4b17      	ldr	r3, [pc, #92]	@ (8000f4c <HAL_RCC_OscConfig+0x274>)
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ef4:	f7ff fe02 	bl	8000afc <HAL_GetTick>
 8000ef8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000efa:	e008      	b.n	8000f0e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000efc:	f7ff fdfe 	bl	8000afc <HAL_GetTick>
 8000f00:	4602      	mov	r2, r0
 8000f02:	693b      	ldr	r3, [r7, #16]
 8000f04:	1ad3      	subs	r3, r2, r3
 8000f06:	2b02      	cmp	r3, #2
 8000f08:	d901      	bls.n	8000f0e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000f0a:	2303      	movs	r3, #3
 8000f0c:	e160      	b.n	80011d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f0e:	4b0d      	ldr	r3, [pc, #52]	@ (8000f44 <HAL_RCC_OscConfig+0x26c>)
 8000f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f12:	f003 0302 	and.w	r3, r3, #2
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d0f0      	beq.n	8000efc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000f1a:	2001      	movs	r0, #1
 8000f1c:	f000 fa9c 	bl	8001458 <RCC_Delay>
 8000f20:	e01c      	b.n	8000f5c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f22:	4b0a      	ldr	r3, [pc, #40]	@ (8000f4c <HAL_RCC_OscConfig+0x274>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f28:	f7ff fde8 	bl	8000afc <HAL_GetTick>
 8000f2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f2e:	e00f      	b.n	8000f50 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f30:	f7ff fde4 	bl	8000afc <HAL_GetTick>
 8000f34:	4602      	mov	r2, r0
 8000f36:	693b      	ldr	r3, [r7, #16]
 8000f38:	1ad3      	subs	r3, r2, r3
 8000f3a:	2b02      	cmp	r3, #2
 8000f3c:	d908      	bls.n	8000f50 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000f3e:	2303      	movs	r3, #3
 8000f40:	e146      	b.n	80011d0 <HAL_RCC_OscConfig+0x4f8>
 8000f42:	bf00      	nop
 8000f44:	40021000 	.word	0x40021000
 8000f48:	42420000 	.word	0x42420000
 8000f4c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f50:	4b92      	ldr	r3, [pc, #584]	@ (800119c <HAL_RCC_OscConfig+0x4c4>)
 8000f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f54:	f003 0302 	and.w	r3, r3, #2
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d1e9      	bne.n	8000f30 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f003 0304 	and.w	r3, r3, #4
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	f000 80a6 	beq.w	80010b6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f6e:	4b8b      	ldr	r3, [pc, #556]	@ (800119c <HAL_RCC_OscConfig+0x4c4>)
 8000f70:	69db      	ldr	r3, [r3, #28]
 8000f72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d10d      	bne.n	8000f96 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f7a:	4b88      	ldr	r3, [pc, #544]	@ (800119c <HAL_RCC_OscConfig+0x4c4>)
 8000f7c:	69db      	ldr	r3, [r3, #28]
 8000f7e:	4a87      	ldr	r2, [pc, #540]	@ (800119c <HAL_RCC_OscConfig+0x4c4>)
 8000f80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f84:	61d3      	str	r3, [r2, #28]
 8000f86:	4b85      	ldr	r3, [pc, #532]	@ (800119c <HAL_RCC_OscConfig+0x4c4>)
 8000f88:	69db      	ldr	r3, [r3, #28]
 8000f8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f8e:	60bb      	str	r3, [r7, #8]
 8000f90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000f92:	2301      	movs	r3, #1
 8000f94:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f96:	4b82      	ldr	r3, [pc, #520]	@ (80011a0 <HAL_RCC_OscConfig+0x4c8>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d118      	bne.n	8000fd4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000fa2:	4b7f      	ldr	r3, [pc, #508]	@ (80011a0 <HAL_RCC_OscConfig+0x4c8>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4a7e      	ldr	r2, [pc, #504]	@ (80011a0 <HAL_RCC_OscConfig+0x4c8>)
 8000fa8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000fae:	f7ff fda5 	bl	8000afc <HAL_GetTick>
 8000fb2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fb4:	e008      	b.n	8000fc8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fb6:	f7ff fda1 	bl	8000afc <HAL_GetTick>
 8000fba:	4602      	mov	r2, r0
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	1ad3      	subs	r3, r2, r3
 8000fc0:	2b64      	cmp	r3, #100	@ 0x64
 8000fc2:	d901      	bls.n	8000fc8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000fc4:	2303      	movs	r3, #3
 8000fc6:	e103      	b.n	80011d0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fc8:	4b75      	ldr	r3, [pc, #468]	@ (80011a0 <HAL_RCC_OscConfig+0x4c8>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d0f0      	beq.n	8000fb6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	68db      	ldr	r3, [r3, #12]
 8000fd8:	2b01      	cmp	r3, #1
 8000fda:	d106      	bne.n	8000fea <HAL_RCC_OscConfig+0x312>
 8000fdc:	4b6f      	ldr	r3, [pc, #444]	@ (800119c <HAL_RCC_OscConfig+0x4c4>)
 8000fde:	6a1b      	ldr	r3, [r3, #32]
 8000fe0:	4a6e      	ldr	r2, [pc, #440]	@ (800119c <HAL_RCC_OscConfig+0x4c4>)
 8000fe2:	f043 0301 	orr.w	r3, r3, #1
 8000fe6:	6213      	str	r3, [r2, #32]
 8000fe8:	e02d      	b.n	8001046 <HAL_RCC_OscConfig+0x36e>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	68db      	ldr	r3, [r3, #12]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d10c      	bne.n	800100c <HAL_RCC_OscConfig+0x334>
 8000ff2:	4b6a      	ldr	r3, [pc, #424]	@ (800119c <HAL_RCC_OscConfig+0x4c4>)
 8000ff4:	6a1b      	ldr	r3, [r3, #32]
 8000ff6:	4a69      	ldr	r2, [pc, #420]	@ (800119c <HAL_RCC_OscConfig+0x4c4>)
 8000ff8:	f023 0301 	bic.w	r3, r3, #1
 8000ffc:	6213      	str	r3, [r2, #32]
 8000ffe:	4b67      	ldr	r3, [pc, #412]	@ (800119c <HAL_RCC_OscConfig+0x4c4>)
 8001000:	6a1b      	ldr	r3, [r3, #32]
 8001002:	4a66      	ldr	r2, [pc, #408]	@ (800119c <HAL_RCC_OscConfig+0x4c4>)
 8001004:	f023 0304 	bic.w	r3, r3, #4
 8001008:	6213      	str	r3, [r2, #32]
 800100a:	e01c      	b.n	8001046 <HAL_RCC_OscConfig+0x36e>
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	68db      	ldr	r3, [r3, #12]
 8001010:	2b05      	cmp	r3, #5
 8001012:	d10c      	bne.n	800102e <HAL_RCC_OscConfig+0x356>
 8001014:	4b61      	ldr	r3, [pc, #388]	@ (800119c <HAL_RCC_OscConfig+0x4c4>)
 8001016:	6a1b      	ldr	r3, [r3, #32]
 8001018:	4a60      	ldr	r2, [pc, #384]	@ (800119c <HAL_RCC_OscConfig+0x4c4>)
 800101a:	f043 0304 	orr.w	r3, r3, #4
 800101e:	6213      	str	r3, [r2, #32]
 8001020:	4b5e      	ldr	r3, [pc, #376]	@ (800119c <HAL_RCC_OscConfig+0x4c4>)
 8001022:	6a1b      	ldr	r3, [r3, #32]
 8001024:	4a5d      	ldr	r2, [pc, #372]	@ (800119c <HAL_RCC_OscConfig+0x4c4>)
 8001026:	f043 0301 	orr.w	r3, r3, #1
 800102a:	6213      	str	r3, [r2, #32]
 800102c:	e00b      	b.n	8001046 <HAL_RCC_OscConfig+0x36e>
 800102e:	4b5b      	ldr	r3, [pc, #364]	@ (800119c <HAL_RCC_OscConfig+0x4c4>)
 8001030:	6a1b      	ldr	r3, [r3, #32]
 8001032:	4a5a      	ldr	r2, [pc, #360]	@ (800119c <HAL_RCC_OscConfig+0x4c4>)
 8001034:	f023 0301 	bic.w	r3, r3, #1
 8001038:	6213      	str	r3, [r2, #32]
 800103a:	4b58      	ldr	r3, [pc, #352]	@ (800119c <HAL_RCC_OscConfig+0x4c4>)
 800103c:	6a1b      	ldr	r3, [r3, #32]
 800103e:	4a57      	ldr	r2, [pc, #348]	@ (800119c <HAL_RCC_OscConfig+0x4c4>)
 8001040:	f023 0304 	bic.w	r3, r3, #4
 8001044:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	68db      	ldr	r3, [r3, #12]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d015      	beq.n	800107a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800104e:	f7ff fd55 	bl	8000afc <HAL_GetTick>
 8001052:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001054:	e00a      	b.n	800106c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001056:	f7ff fd51 	bl	8000afc <HAL_GetTick>
 800105a:	4602      	mov	r2, r0
 800105c:	693b      	ldr	r3, [r7, #16]
 800105e:	1ad3      	subs	r3, r2, r3
 8001060:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001064:	4293      	cmp	r3, r2
 8001066:	d901      	bls.n	800106c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001068:	2303      	movs	r3, #3
 800106a:	e0b1      	b.n	80011d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800106c:	4b4b      	ldr	r3, [pc, #300]	@ (800119c <HAL_RCC_OscConfig+0x4c4>)
 800106e:	6a1b      	ldr	r3, [r3, #32]
 8001070:	f003 0302 	and.w	r3, r3, #2
 8001074:	2b00      	cmp	r3, #0
 8001076:	d0ee      	beq.n	8001056 <HAL_RCC_OscConfig+0x37e>
 8001078:	e014      	b.n	80010a4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800107a:	f7ff fd3f 	bl	8000afc <HAL_GetTick>
 800107e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001080:	e00a      	b.n	8001098 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001082:	f7ff fd3b 	bl	8000afc <HAL_GetTick>
 8001086:	4602      	mov	r2, r0
 8001088:	693b      	ldr	r3, [r7, #16]
 800108a:	1ad3      	subs	r3, r2, r3
 800108c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001090:	4293      	cmp	r3, r2
 8001092:	d901      	bls.n	8001098 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001094:	2303      	movs	r3, #3
 8001096:	e09b      	b.n	80011d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001098:	4b40      	ldr	r3, [pc, #256]	@ (800119c <HAL_RCC_OscConfig+0x4c4>)
 800109a:	6a1b      	ldr	r3, [r3, #32]
 800109c:	f003 0302 	and.w	r3, r3, #2
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d1ee      	bne.n	8001082 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80010a4:	7dfb      	ldrb	r3, [r7, #23]
 80010a6:	2b01      	cmp	r3, #1
 80010a8:	d105      	bne.n	80010b6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80010aa:	4b3c      	ldr	r3, [pc, #240]	@ (800119c <HAL_RCC_OscConfig+0x4c4>)
 80010ac:	69db      	ldr	r3, [r3, #28]
 80010ae:	4a3b      	ldr	r2, [pc, #236]	@ (800119c <HAL_RCC_OscConfig+0x4c4>)
 80010b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80010b4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	69db      	ldr	r3, [r3, #28]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	f000 8087 	beq.w	80011ce <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010c0:	4b36      	ldr	r3, [pc, #216]	@ (800119c <HAL_RCC_OscConfig+0x4c4>)
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f003 030c 	and.w	r3, r3, #12
 80010c8:	2b08      	cmp	r3, #8
 80010ca:	d061      	beq.n	8001190 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	69db      	ldr	r3, [r3, #28]
 80010d0:	2b02      	cmp	r3, #2
 80010d2:	d146      	bne.n	8001162 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010d4:	4b33      	ldr	r3, [pc, #204]	@ (80011a4 <HAL_RCC_OscConfig+0x4cc>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010da:	f7ff fd0f 	bl	8000afc <HAL_GetTick>
 80010de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010e0:	e008      	b.n	80010f4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010e2:	f7ff fd0b 	bl	8000afc <HAL_GetTick>
 80010e6:	4602      	mov	r2, r0
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	1ad3      	subs	r3, r2, r3
 80010ec:	2b02      	cmp	r3, #2
 80010ee:	d901      	bls.n	80010f4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80010f0:	2303      	movs	r3, #3
 80010f2:	e06d      	b.n	80011d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010f4:	4b29      	ldr	r3, [pc, #164]	@ (800119c <HAL_RCC_OscConfig+0x4c4>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d1f0      	bne.n	80010e2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6a1b      	ldr	r3, [r3, #32]
 8001104:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001108:	d108      	bne.n	800111c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800110a:	4b24      	ldr	r3, [pc, #144]	@ (800119c <HAL_RCC_OscConfig+0x4c4>)
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	689b      	ldr	r3, [r3, #8]
 8001116:	4921      	ldr	r1, [pc, #132]	@ (800119c <HAL_RCC_OscConfig+0x4c4>)
 8001118:	4313      	orrs	r3, r2
 800111a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800111c:	4b1f      	ldr	r3, [pc, #124]	@ (800119c <HAL_RCC_OscConfig+0x4c4>)
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6a19      	ldr	r1, [r3, #32]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800112c:	430b      	orrs	r3, r1
 800112e:	491b      	ldr	r1, [pc, #108]	@ (800119c <HAL_RCC_OscConfig+0x4c4>)
 8001130:	4313      	orrs	r3, r2
 8001132:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001134:	4b1b      	ldr	r3, [pc, #108]	@ (80011a4 <HAL_RCC_OscConfig+0x4cc>)
 8001136:	2201      	movs	r2, #1
 8001138:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800113a:	f7ff fcdf 	bl	8000afc <HAL_GetTick>
 800113e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001140:	e008      	b.n	8001154 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001142:	f7ff fcdb 	bl	8000afc <HAL_GetTick>
 8001146:	4602      	mov	r2, r0
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	1ad3      	subs	r3, r2, r3
 800114c:	2b02      	cmp	r3, #2
 800114e:	d901      	bls.n	8001154 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001150:	2303      	movs	r3, #3
 8001152:	e03d      	b.n	80011d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001154:	4b11      	ldr	r3, [pc, #68]	@ (800119c <HAL_RCC_OscConfig+0x4c4>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800115c:	2b00      	cmp	r3, #0
 800115e:	d0f0      	beq.n	8001142 <HAL_RCC_OscConfig+0x46a>
 8001160:	e035      	b.n	80011ce <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001162:	4b10      	ldr	r3, [pc, #64]	@ (80011a4 <HAL_RCC_OscConfig+0x4cc>)
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001168:	f7ff fcc8 	bl	8000afc <HAL_GetTick>
 800116c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800116e:	e008      	b.n	8001182 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001170:	f7ff fcc4 	bl	8000afc <HAL_GetTick>
 8001174:	4602      	mov	r2, r0
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	2b02      	cmp	r3, #2
 800117c:	d901      	bls.n	8001182 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800117e:	2303      	movs	r3, #3
 8001180:	e026      	b.n	80011d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001182:	4b06      	ldr	r3, [pc, #24]	@ (800119c <HAL_RCC_OscConfig+0x4c4>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800118a:	2b00      	cmp	r3, #0
 800118c:	d1f0      	bne.n	8001170 <HAL_RCC_OscConfig+0x498>
 800118e:	e01e      	b.n	80011ce <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	69db      	ldr	r3, [r3, #28]
 8001194:	2b01      	cmp	r3, #1
 8001196:	d107      	bne.n	80011a8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001198:	2301      	movs	r3, #1
 800119a:	e019      	b.n	80011d0 <HAL_RCC_OscConfig+0x4f8>
 800119c:	40021000 	.word	0x40021000
 80011a0:	40007000 	.word	0x40007000
 80011a4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80011a8:	4b0b      	ldr	r3, [pc, #44]	@ (80011d8 <HAL_RCC_OscConfig+0x500>)
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6a1b      	ldr	r3, [r3, #32]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d106      	bne.n	80011ca <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011c6:	429a      	cmp	r2, r3
 80011c8:	d001      	beq.n	80011ce <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
 80011cc:	e000      	b.n	80011d0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80011ce:	2300      	movs	r3, #0
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	3718      	adds	r7, #24
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	40021000 	.word	0x40021000

080011dc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d101      	bne.n	80011f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80011ec:	2301      	movs	r3, #1
 80011ee:	e0d0      	b.n	8001392 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80011f0:	4b6a      	ldr	r3, [pc, #424]	@ (800139c <HAL_RCC_ClockConfig+0x1c0>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f003 0307 	and.w	r3, r3, #7
 80011f8:	683a      	ldr	r2, [r7, #0]
 80011fa:	429a      	cmp	r2, r3
 80011fc:	d910      	bls.n	8001220 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011fe:	4b67      	ldr	r3, [pc, #412]	@ (800139c <HAL_RCC_ClockConfig+0x1c0>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f023 0207 	bic.w	r2, r3, #7
 8001206:	4965      	ldr	r1, [pc, #404]	@ (800139c <HAL_RCC_ClockConfig+0x1c0>)
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	4313      	orrs	r3, r2
 800120c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800120e:	4b63      	ldr	r3, [pc, #396]	@ (800139c <HAL_RCC_ClockConfig+0x1c0>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f003 0307 	and.w	r3, r3, #7
 8001216:	683a      	ldr	r2, [r7, #0]
 8001218:	429a      	cmp	r2, r3
 800121a:	d001      	beq.n	8001220 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800121c:	2301      	movs	r3, #1
 800121e:	e0b8      	b.n	8001392 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f003 0302 	and.w	r3, r3, #2
 8001228:	2b00      	cmp	r3, #0
 800122a:	d020      	beq.n	800126e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f003 0304 	and.w	r3, r3, #4
 8001234:	2b00      	cmp	r3, #0
 8001236:	d005      	beq.n	8001244 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001238:	4b59      	ldr	r3, [pc, #356]	@ (80013a0 <HAL_RCC_ClockConfig+0x1c4>)
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	4a58      	ldr	r2, [pc, #352]	@ (80013a0 <HAL_RCC_ClockConfig+0x1c4>)
 800123e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001242:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f003 0308 	and.w	r3, r3, #8
 800124c:	2b00      	cmp	r3, #0
 800124e:	d005      	beq.n	800125c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001250:	4b53      	ldr	r3, [pc, #332]	@ (80013a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	4a52      	ldr	r2, [pc, #328]	@ (80013a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001256:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800125a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800125c:	4b50      	ldr	r3, [pc, #320]	@ (80013a0 <HAL_RCC_ClockConfig+0x1c4>)
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	494d      	ldr	r1, [pc, #308]	@ (80013a0 <HAL_RCC_ClockConfig+0x1c4>)
 800126a:	4313      	orrs	r3, r2
 800126c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f003 0301 	and.w	r3, r3, #1
 8001276:	2b00      	cmp	r3, #0
 8001278:	d040      	beq.n	80012fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	2b01      	cmp	r3, #1
 8001280:	d107      	bne.n	8001292 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001282:	4b47      	ldr	r3, [pc, #284]	@ (80013a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800128a:	2b00      	cmp	r3, #0
 800128c:	d115      	bne.n	80012ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	e07f      	b.n	8001392 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	2b02      	cmp	r3, #2
 8001298:	d107      	bne.n	80012aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800129a:	4b41      	ldr	r3, [pc, #260]	@ (80013a0 <HAL_RCC_ClockConfig+0x1c4>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d109      	bne.n	80012ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e073      	b.n	8001392 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012aa:	4b3d      	ldr	r3, [pc, #244]	@ (80013a0 <HAL_RCC_ClockConfig+0x1c4>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f003 0302 	and.w	r3, r3, #2
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d101      	bne.n	80012ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	e06b      	b.n	8001392 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012ba:	4b39      	ldr	r3, [pc, #228]	@ (80013a0 <HAL_RCC_ClockConfig+0x1c4>)
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f023 0203 	bic.w	r2, r3, #3
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	4936      	ldr	r1, [pc, #216]	@ (80013a0 <HAL_RCC_ClockConfig+0x1c4>)
 80012c8:	4313      	orrs	r3, r2
 80012ca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012cc:	f7ff fc16 	bl	8000afc <HAL_GetTick>
 80012d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012d2:	e00a      	b.n	80012ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012d4:	f7ff fc12 	bl	8000afc <HAL_GetTick>
 80012d8:	4602      	mov	r2, r0
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d901      	bls.n	80012ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80012e6:	2303      	movs	r3, #3
 80012e8:	e053      	b.n	8001392 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012ea:	4b2d      	ldr	r3, [pc, #180]	@ (80013a0 <HAL_RCC_ClockConfig+0x1c4>)
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	f003 020c 	and.w	r2, r3, #12
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d1eb      	bne.n	80012d4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80012fc:	4b27      	ldr	r3, [pc, #156]	@ (800139c <HAL_RCC_ClockConfig+0x1c0>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f003 0307 	and.w	r3, r3, #7
 8001304:	683a      	ldr	r2, [r7, #0]
 8001306:	429a      	cmp	r2, r3
 8001308:	d210      	bcs.n	800132c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800130a:	4b24      	ldr	r3, [pc, #144]	@ (800139c <HAL_RCC_ClockConfig+0x1c0>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f023 0207 	bic.w	r2, r3, #7
 8001312:	4922      	ldr	r1, [pc, #136]	@ (800139c <HAL_RCC_ClockConfig+0x1c0>)
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	4313      	orrs	r3, r2
 8001318:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800131a:	4b20      	ldr	r3, [pc, #128]	@ (800139c <HAL_RCC_ClockConfig+0x1c0>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f003 0307 	and.w	r3, r3, #7
 8001322:	683a      	ldr	r2, [r7, #0]
 8001324:	429a      	cmp	r2, r3
 8001326:	d001      	beq.n	800132c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001328:	2301      	movs	r3, #1
 800132a:	e032      	b.n	8001392 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f003 0304 	and.w	r3, r3, #4
 8001334:	2b00      	cmp	r3, #0
 8001336:	d008      	beq.n	800134a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001338:	4b19      	ldr	r3, [pc, #100]	@ (80013a0 <HAL_RCC_ClockConfig+0x1c4>)
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	4916      	ldr	r1, [pc, #88]	@ (80013a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001346:	4313      	orrs	r3, r2
 8001348:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f003 0308 	and.w	r3, r3, #8
 8001352:	2b00      	cmp	r3, #0
 8001354:	d009      	beq.n	800136a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001356:	4b12      	ldr	r3, [pc, #72]	@ (80013a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	691b      	ldr	r3, [r3, #16]
 8001362:	00db      	lsls	r3, r3, #3
 8001364:	490e      	ldr	r1, [pc, #56]	@ (80013a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001366:	4313      	orrs	r3, r2
 8001368:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800136a:	f000 f821 	bl	80013b0 <HAL_RCC_GetSysClockFreq>
 800136e:	4602      	mov	r2, r0
 8001370:	4b0b      	ldr	r3, [pc, #44]	@ (80013a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	091b      	lsrs	r3, r3, #4
 8001376:	f003 030f 	and.w	r3, r3, #15
 800137a:	490a      	ldr	r1, [pc, #40]	@ (80013a4 <HAL_RCC_ClockConfig+0x1c8>)
 800137c:	5ccb      	ldrb	r3, [r1, r3]
 800137e:	fa22 f303 	lsr.w	r3, r2, r3
 8001382:	4a09      	ldr	r2, [pc, #36]	@ (80013a8 <HAL_RCC_ClockConfig+0x1cc>)
 8001384:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001386:	4b09      	ldr	r3, [pc, #36]	@ (80013ac <HAL_RCC_ClockConfig+0x1d0>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4618      	mov	r0, r3
 800138c:	f7ff fb86 	bl	8000a9c <HAL_InitTick>

  return HAL_OK;
 8001390:	2300      	movs	r3, #0
}
 8001392:	4618      	mov	r0, r3
 8001394:	3710      	adds	r7, #16
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	40022000 	.word	0x40022000
 80013a0:	40021000 	.word	0x40021000
 80013a4:	080016d4 	.word	0x080016d4
 80013a8:	20000000 	.word	0x20000000
 80013ac:	20000004 	.word	0x20000004

080013b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b087      	sub	sp, #28
 80013b4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80013b6:	2300      	movs	r3, #0
 80013b8:	60fb      	str	r3, [r7, #12]
 80013ba:	2300      	movs	r3, #0
 80013bc:	60bb      	str	r3, [r7, #8]
 80013be:	2300      	movs	r3, #0
 80013c0:	617b      	str	r3, [r7, #20]
 80013c2:	2300      	movs	r3, #0
 80013c4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80013c6:	2300      	movs	r3, #0
 80013c8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80013ca:	4b1e      	ldr	r3, [pc, #120]	@ (8001444 <HAL_RCC_GetSysClockFreq+0x94>)
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	f003 030c 	and.w	r3, r3, #12
 80013d6:	2b04      	cmp	r3, #4
 80013d8:	d002      	beq.n	80013e0 <HAL_RCC_GetSysClockFreq+0x30>
 80013da:	2b08      	cmp	r3, #8
 80013dc:	d003      	beq.n	80013e6 <HAL_RCC_GetSysClockFreq+0x36>
 80013de:	e027      	b.n	8001430 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80013e0:	4b19      	ldr	r3, [pc, #100]	@ (8001448 <HAL_RCC_GetSysClockFreq+0x98>)
 80013e2:	613b      	str	r3, [r7, #16]
      break;
 80013e4:	e027      	b.n	8001436 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	0c9b      	lsrs	r3, r3, #18
 80013ea:	f003 030f 	and.w	r3, r3, #15
 80013ee:	4a17      	ldr	r2, [pc, #92]	@ (800144c <HAL_RCC_GetSysClockFreq+0x9c>)
 80013f0:	5cd3      	ldrb	r3, [r2, r3]
 80013f2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d010      	beq.n	8001420 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80013fe:	4b11      	ldr	r3, [pc, #68]	@ (8001444 <HAL_RCC_GetSysClockFreq+0x94>)
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	0c5b      	lsrs	r3, r3, #17
 8001404:	f003 0301 	and.w	r3, r3, #1
 8001408:	4a11      	ldr	r2, [pc, #68]	@ (8001450 <HAL_RCC_GetSysClockFreq+0xa0>)
 800140a:	5cd3      	ldrb	r3, [r2, r3]
 800140c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4a0d      	ldr	r2, [pc, #52]	@ (8001448 <HAL_RCC_GetSysClockFreq+0x98>)
 8001412:	fb03 f202 	mul.w	r2, r3, r2
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	fbb2 f3f3 	udiv	r3, r2, r3
 800141c:	617b      	str	r3, [r7, #20]
 800141e:	e004      	b.n	800142a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	4a0c      	ldr	r2, [pc, #48]	@ (8001454 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001424:	fb02 f303 	mul.w	r3, r2, r3
 8001428:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	613b      	str	r3, [r7, #16]
      break;
 800142e:	e002      	b.n	8001436 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001430:	4b05      	ldr	r3, [pc, #20]	@ (8001448 <HAL_RCC_GetSysClockFreq+0x98>)
 8001432:	613b      	str	r3, [r7, #16]
      break;
 8001434:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001436:	693b      	ldr	r3, [r7, #16]
}
 8001438:	4618      	mov	r0, r3
 800143a:	371c      	adds	r7, #28
 800143c:	46bd      	mov	sp, r7
 800143e:	bc80      	pop	{r7}
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	40021000 	.word	0x40021000
 8001448:	007a1200 	.word	0x007a1200
 800144c:	080016e4 	.word	0x080016e4
 8001450:	080016f4 	.word	0x080016f4
 8001454:	003d0900 	.word	0x003d0900

08001458 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001458:	b480      	push	{r7}
 800145a:	b085      	sub	sp, #20
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001460:	4b0a      	ldr	r3, [pc, #40]	@ (800148c <RCC_Delay+0x34>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a0a      	ldr	r2, [pc, #40]	@ (8001490 <RCC_Delay+0x38>)
 8001466:	fba2 2303 	umull	r2, r3, r2, r3
 800146a:	0a5b      	lsrs	r3, r3, #9
 800146c:	687a      	ldr	r2, [r7, #4]
 800146e:	fb02 f303 	mul.w	r3, r2, r3
 8001472:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001474:	bf00      	nop
  }
  while (Delay --);
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	1e5a      	subs	r2, r3, #1
 800147a:	60fa      	str	r2, [r7, #12]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d1f9      	bne.n	8001474 <RCC_Delay+0x1c>
}
 8001480:	bf00      	nop
 8001482:	bf00      	nop
 8001484:	3714      	adds	r7, #20
 8001486:	46bd      	mov	sp, r7
 8001488:	bc80      	pop	{r7}
 800148a:	4770      	bx	lr
 800148c:	20000000 	.word	0x20000000
 8001490:	10624dd3 	.word	0x10624dd3

08001494 <memset>:
 8001494:	4603      	mov	r3, r0
 8001496:	4402      	add	r2, r0
 8001498:	4293      	cmp	r3, r2
 800149a:	d100      	bne.n	800149e <memset+0xa>
 800149c:	4770      	bx	lr
 800149e:	f803 1b01 	strb.w	r1, [r3], #1
 80014a2:	e7f9      	b.n	8001498 <memset+0x4>

080014a4 <__libc_init_array>:
 80014a4:	b570      	push	{r4, r5, r6, lr}
 80014a6:	2600      	movs	r6, #0
 80014a8:	4d0c      	ldr	r5, [pc, #48]	@ (80014dc <__libc_init_array+0x38>)
 80014aa:	4c0d      	ldr	r4, [pc, #52]	@ (80014e0 <__libc_init_array+0x3c>)
 80014ac:	1b64      	subs	r4, r4, r5
 80014ae:	10a4      	asrs	r4, r4, #2
 80014b0:	42a6      	cmp	r6, r4
 80014b2:	d109      	bne.n	80014c8 <__libc_init_array+0x24>
 80014b4:	f000 f81a 	bl	80014ec <_init>
 80014b8:	2600      	movs	r6, #0
 80014ba:	4d0a      	ldr	r5, [pc, #40]	@ (80014e4 <__libc_init_array+0x40>)
 80014bc:	4c0a      	ldr	r4, [pc, #40]	@ (80014e8 <__libc_init_array+0x44>)
 80014be:	1b64      	subs	r4, r4, r5
 80014c0:	10a4      	asrs	r4, r4, #2
 80014c2:	42a6      	cmp	r6, r4
 80014c4:	d105      	bne.n	80014d2 <__libc_init_array+0x2e>
 80014c6:	bd70      	pop	{r4, r5, r6, pc}
 80014c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80014cc:	4798      	blx	r3
 80014ce:	3601      	adds	r6, #1
 80014d0:	e7ee      	b.n	80014b0 <__libc_init_array+0xc>
 80014d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80014d6:	4798      	blx	r3
 80014d8:	3601      	adds	r6, #1
 80014da:	e7f2      	b.n	80014c2 <__libc_init_array+0x1e>
 80014dc:	08001700 	.word	0x08001700
 80014e0:	08001700 	.word	0x08001700
 80014e4:	08001700 	.word	0x08001700
 80014e8:	08001704 	.word	0x08001704

080014ec <_init>:
 80014ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014ee:	bf00      	nop
 80014f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014f2:	bc08      	pop	{r3}
 80014f4:	469e      	mov	lr, r3
 80014f6:	4770      	bx	lr

080014f8 <_fini>:
 80014f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014fa:	bf00      	nop
 80014fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014fe:	bc08      	pop	{r3}
 8001500:	469e      	mov	lr, r3
 8001502:	4770      	bx	lr
