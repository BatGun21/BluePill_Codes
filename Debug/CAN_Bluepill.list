
CAN_Bluepill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000020f0  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a4  080021fc  080021fc  000031fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080024a0  080024a0  0000405c  2**0
                  CONTENTS
  4 .ARM          00000008  080024a0  080024a0  000034a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080024a8  080024a8  0000405c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080024a8  080024a8  000034a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080024ac  080024ac  000034ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080024b0  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000398  2000005c  0800250c  0000405c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003f4  0800250c  000043f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000405c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000037a6  00000000  00000000  00004085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000f89  00000000  00000000  0000782b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000430  00000000  00000000  000087b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000304  00000000  00000000  00008be8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016a01  00000000  00000000  00008eec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004da9  00000000  00000000  0001f8ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081b9c  00000000  00000000  00024696  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a6232  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001450  00000000  00000000  000a6278  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000a76c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	080021e4 	.word	0x080021e4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	080021e4 	.word	0x080021e4

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800015c:	b480      	push	{r7}
 800015e:	b083      	sub	sp, #12
 8000160:	af00      	add	r7, sp, #0
 8000162:	4603      	mov	r3, r0
 8000164:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800016a:	2b00      	cmp	r3, #0
 800016c:	db0b      	blt.n	8000186 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800016e:	79fb      	ldrb	r3, [r7, #7]
 8000170:	f003 021f 	and.w	r2, r3, #31
 8000174:	4906      	ldr	r1, [pc, #24]	@ (8000190 <__NVIC_EnableIRQ+0x34>)
 8000176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800017a:	095b      	lsrs	r3, r3, #5
 800017c:	2001      	movs	r0, #1
 800017e:	fa00 f202 	lsl.w	r2, r0, r2
 8000182:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000186:	bf00      	nop
 8000188:	370c      	adds	r7, #12
 800018a:	46bd      	mov	sp, r7
 800018c:	bc80      	pop	{r7}
 800018e:	4770      	bx	lr
 8000190:	e000e100 	.word	0xe000e100

08000194 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000194:	b480      	push	{r7}
 8000196:	b083      	sub	sp, #12
 8000198:	af00      	add	r7, sp, #0
 800019a:	4603      	mov	r3, r0
 800019c:	6039      	str	r1, [r7, #0]
 800019e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001a4:	2b00      	cmp	r3, #0
 80001a6:	db0a      	blt.n	80001be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001a8:	683b      	ldr	r3, [r7, #0]
 80001aa:	b2da      	uxtb	r2, r3
 80001ac:	490c      	ldr	r1, [pc, #48]	@ (80001e0 <__NVIC_SetPriority+0x4c>)
 80001ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001b2:	0112      	lsls	r2, r2, #4
 80001b4:	b2d2      	uxtb	r2, r2
 80001b6:	440b      	add	r3, r1
 80001b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80001bc:	e00a      	b.n	80001d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001be:	683b      	ldr	r3, [r7, #0]
 80001c0:	b2da      	uxtb	r2, r3
 80001c2:	4908      	ldr	r1, [pc, #32]	@ (80001e4 <__NVIC_SetPriority+0x50>)
 80001c4:	79fb      	ldrb	r3, [r7, #7]
 80001c6:	f003 030f 	and.w	r3, r3, #15
 80001ca:	3b04      	subs	r3, #4
 80001cc:	0112      	lsls	r2, r2, #4
 80001ce:	b2d2      	uxtb	r2, r2
 80001d0:	440b      	add	r3, r1
 80001d2:	761a      	strb	r2, [r3, #24]
}
 80001d4:	bf00      	nop
 80001d6:	370c      	adds	r7, #12
 80001d8:	46bd      	mov	sp, r7
 80001da:	bc80      	pop	{r7}
 80001dc:	4770      	bx	lr
 80001de:	bf00      	nop
 80001e0:	e000e100 	.word	0xe000e100
 80001e4:	e000ed00 	.word	0xe000ed00

080001e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001e8:	b5b0      	push	{r4, r5, r7, lr}
 80001ea:	b08e      	sub	sp, #56	@ 0x38
 80001ec:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ee:	f000 fe23 	bl	8000e38 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001f2:	f000 f8c1 	bl	8000378 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  SysTick_Init(Clock_Frequency);
 80001f6:	f44f 50fa 	mov.w	r0, #8000	@ 0x1f40
 80001fa:	f000 f8f9 	bl	80003f0 <SysTick_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */
  LED_Init();
 80001fe:	f000 f939 	bl	8000474 <LED_Init>
  Delay_Init();
 8000202:	f000 f961 	bl	80004c8 <Delay_Init>
  UART_Init();
 8000206:	f000 fa19 	bl	800063c <UART_Init>
  CAN_Init();
 800020a:	f000 fb11 	bl	8000830 <CAN_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int delayId_0 = Delay_Start(0, 500);
 800020e:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000212:	2000      	movs	r0, #0
 8000214:	f000 f988 	bl	8000528 <Delay_Start>
 8000218:	62b8      	str	r0, [r7, #40]	@ 0x28
  Delay_ErrorHandler(delayId_0);
 800021a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800021c:	f000 f9e8 	bl	80005f0 <Delay_ErrorHandler>

  char startmsg[] = "Starting UART....\n";
 8000220:	4b4e      	ldr	r3, [pc, #312]	@ (800035c <main+0x174>)
 8000222:	f107 0414 	add.w	r4, r7, #20
 8000226:	461d      	mov	r5, r3
 8000228:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800022a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800022c:	682b      	ldr	r3, [r5, #0]
 800022e:	461a      	mov	r2, r3
 8000230:	8022      	strh	r2, [r4, #0]
 8000232:	3402      	adds	r4, #2
 8000234:	0c1b      	lsrs	r3, r3, #16
 8000236:	7023      	strb	r3, [r4, #0]
  UART_Send((uint8_t*)startmsg, strlen(startmsg));
 8000238:	f107 0314 	add.w	r3, r7, #20
 800023c:	4618      	mov	r0, r3
 800023e:	f7ff ff85 	bl	800014c <strlen>
 8000242:	4603      	mov	r3, r0
 8000244:	b29a      	uxth	r2, r3
 8000246:	f107 0314 	add.w	r3, r7, #20
 800024a:	4611      	mov	r1, r2
 800024c:	4618      	mov	r0, r3
 800024e:	f000 fa2d 	bl	80006ac <UART_Send>

  /* Buffer to store received data and formatted message for uart */
//  uint8_t receivedData[RX_BUFFER_SIZE];
//  char messageBuffer[RX_BUFFER_SIZE];

  uint8_t txData[8] = {0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88};
 8000252:	4a43      	ldr	r2, [pc, #268]	@ (8000360 <main+0x178>)
 8000254:	f107 030c 	add.w	r3, r7, #12
 8000258:	e892 0003 	ldmia.w	r2, {r0, r1}
 800025c:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t rxData[8];
  uint8_t len;

  while (1)
  {
      if (Delay_Completed(0))
 8000260:	2000      	movs	r0, #0
 8000262:	f000 f98f 	bl	8000584 <Delay_Completed>
 8000266:	4603      	mov	r3, r0
 8000268:	2b00      	cmp	r3, #0
 800026a:	d006      	beq.n	800027a <main+0x92>
      {
          LED_Toggle();
 800026c:	f000 f91e 	bl	80004ac <LED_Toggle>
          Delay_Start(0, 500);      // Restart the delay
 8000270:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000274:	2000      	movs	r0, #0
 8000276:	f000 f957 	bl	8000528 <Delay_Start>
      }

      // Transmit a CAN message
      if (CAN_Transmit(0x123, txData, 8) == 0)
 800027a:	f107 030c 	add.w	r3, r7, #12
 800027e:	2208      	movs	r2, #8
 8000280:	4619      	mov	r1, r3
 8000282:	f240 1023 	movw	r0, #291	@ 0x123
 8000286:	f000 fbad 	bl	80009e4 <CAN_Transmit>
 800028a:	4603      	mov	r3, r0
 800028c:	2b00      	cmp	r3, #0
 800028e:	d10e      	bne.n	80002ae <main+0xc6>
      {
          // Transmission was successful
          snprintf(UART_MSGBUFFER, sizeof(UART_MSGBUFFER), "CAN Transmit Successful\r\n");
 8000290:	4a34      	ldr	r2, [pc, #208]	@ (8000364 <main+0x17c>)
 8000292:	2180      	movs	r1, #128	@ 0x80
 8000294:	4834      	ldr	r0, [pc, #208]	@ (8000368 <main+0x180>)
 8000296:	f001 fae1 	bl	800185c <sniprintf>
          UART_Send((uint8_t*)UART_MSGBUFFER, strlen(UART_MSGBUFFER));
 800029a:	4833      	ldr	r0, [pc, #204]	@ (8000368 <main+0x180>)
 800029c:	f7ff ff56 	bl	800014c <strlen>
 80002a0:	4603      	mov	r3, r0
 80002a2:	b29b      	uxth	r3, r3
 80002a4:	4619      	mov	r1, r3
 80002a6:	4830      	ldr	r0, [pc, #192]	@ (8000368 <main+0x180>)
 80002a8:	f000 fa00 	bl	80006ac <UART_Send>
 80002ac:	e001      	b.n	80002b2 <main+0xca>
      }
      else
      {
          // Transmission failed
          CAN_ErrorHandler();
 80002ae:	f000 fc53 	bl	8000b58 <CAN_ErrorHandler>
      }

      // Receive a CAN message
      if (CAN_Receive(rxData, &len) == 0)
 80002b2:	1cfa      	adds	r2, r7, #3
 80002b4:	1d3b      	adds	r3, r7, #4
 80002b6:	4611      	mov	r1, r2
 80002b8:	4618      	mov	r0, r3
 80002ba:	f000 fc19 	bl	8000af0 <CAN_Receive>
 80002be:	4603      	mov	r3, r0
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d147      	bne.n	8000354 <main+0x16c>
      {
          // Process received message
          snprintf(UART_MSGBUFFER, sizeof(UART_MSGBUFFER), "CAN Receive: ID=0x%03X, Length=%d, Data=", 0x123, len);
 80002c4:	78fb      	ldrb	r3, [r7, #3]
 80002c6:	9300      	str	r3, [sp, #0]
 80002c8:	f240 1323 	movw	r3, #291	@ 0x123
 80002cc:	4a27      	ldr	r2, [pc, #156]	@ (800036c <main+0x184>)
 80002ce:	2180      	movs	r1, #128	@ 0x80
 80002d0:	4825      	ldr	r0, [pc, #148]	@ (8000368 <main+0x180>)
 80002d2:	f001 fac3 	bl	800185c <sniprintf>

          for (uint8_t i = 0; i < len; i++) {
 80002d6:	2300      	movs	r3, #0
 80002d8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80002dc:	e01a      	b.n	8000314 <main+0x12c>
              snprintf(UART_MSGBUFFER + strlen(UART_MSGBUFFER), sizeof(UART_MSGBUFFER) - strlen(UART_MSGBUFFER), " %02X", rxData[i]);
 80002de:	4822      	ldr	r0, [pc, #136]	@ (8000368 <main+0x180>)
 80002e0:	f7ff ff34 	bl	800014c <strlen>
 80002e4:	4603      	mov	r3, r0
 80002e6:	4a20      	ldr	r2, [pc, #128]	@ (8000368 <main+0x180>)
 80002e8:	189c      	adds	r4, r3, r2
 80002ea:	481f      	ldr	r0, [pc, #124]	@ (8000368 <main+0x180>)
 80002ec:	f7ff ff2e 	bl	800014c <strlen>
 80002f0:	4603      	mov	r3, r0
 80002f2:	f1c3 0180 	rsb	r1, r3, #128	@ 0x80
 80002f6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80002fa:	3330      	adds	r3, #48	@ 0x30
 80002fc:	443b      	add	r3, r7
 80002fe:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8000302:	4a1b      	ldr	r2, [pc, #108]	@ (8000370 <main+0x188>)
 8000304:	4620      	mov	r0, r4
 8000306:	f001 faa9 	bl	800185c <sniprintf>
          for (uint8_t i = 0; i < len; i++) {
 800030a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800030e:	3301      	adds	r3, #1
 8000310:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000314:	78fb      	ldrb	r3, [r7, #3]
 8000316:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800031a:	429a      	cmp	r2, r3
 800031c:	d3df      	bcc.n	80002de <main+0xf6>
          }

          snprintf(UART_MSGBUFFER + strlen(UART_MSGBUFFER), sizeof(UART_MSGBUFFER) - strlen(UART_MSGBUFFER), "\r\n");
 800031e:	4812      	ldr	r0, [pc, #72]	@ (8000368 <main+0x180>)
 8000320:	f7ff ff14 	bl	800014c <strlen>
 8000324:	4603      	mov	r3, r0
 8000326:	4a10      	ldr	r2, [pc, #64]	@ (8000368 <main+0x180>)
 8000328:	189c      	adds	r4, r3, r2
 800032a:	480f      	ldr	r0, [pc, #60]	@ (8000368 <main+0x180>)
 800032c:	f7ff ff0e 	bl	800014c <strlen>
 8000330:	4603      	mov	r3, r0
 8000332:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8000336:	4a0f      	ldr	r2, [pc, #60]	@ (8000374 <main+0x18c>)
 8000338:	4619      	mov	r1, r3
 800033a:	4620      	mov	r0, r4
 800033c:	f001 fa8e 	bl	800185c <sniprintf>
          UART_Send((uint8_t*)UART_MSGBUFFER, strlen(UART_MSGBUFFER));
 8000340:	4809      	ldr	r0, [pc, #36]	@ (8000368 <main+0x180>)
 8000342:	f7ff ff03 	bl	800014c <strlen>
 8000346:	4603      	mov	r3, r0
 8000348:	b29b      	uxth	r3, r3
 800034a:	4619      	mov	r1, r3
 800034c:	4806      	ldr	r0, [pc, #24]	@ (8000368 <main+0x180>)
 800034e:	f000 f9ad 	bl	80006ac <UART_Send>
 8000352:	e785      	b.n	8000260 <main+0x78>
      }
      else
      {
          // Reception failed or no message available
          CAN_ErrorHandler();
 8000354:	f000 fc00 	bl	8000b58 <CAN_ErrorHandler>
      if (Delay_Completed(0))
 8000358:	e782      	b.n	8000260 <main+0x78>
 800035a:	bf00      	nop
 800035c:	08002250 	.word	0x08002250
 8000360:	08002264 	.word	0x08002264
 8000364:	080021fc 	.word	0x080021fc
 8000368:	20000224 	.word	0x20000224
 800036c:	08002218 	.word	0x08002218
 8000370:	08002244 	.word	0x08002244
 8000374:	0800224c 	.word	0x0800224c

08000378 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b090      	sub	sp, #64	@ 0x40
 800037c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800037e:	f107 0318 	add.w	r3, r7, #24
 8000382:	2228      	movs	r2, #40	@ 0x28
 8000384:	2100      	movs	r1, #0
 8000386:	4618      	mov	r0, r3
 8000388:	f001 fa9c 	bl	80018c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800038c:	1d3b      	adds	r3, r7, #4
 800038e:	2200      	movs	r2, #0
 8000390:	601a      	str	r2, [r3, #0]
 8000392:	605a      	str	r2, [r3, #4]
 8000394:	609a      	str	r2, [r3, #8]
 8000396:	60da      	str	r2, [r3, #12]
 8000398:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800039a:	2302      	movs	r3, #2
 800039c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800039e:	2301      	movs	r3, #1
 80003a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003a2:	2310      	movs	r3, #16
 80003a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003a6:	2300      	movs	r3, #0
 80003a8:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003aa:	f107 0318 	add.w	r3, r7, #24
 80003ae:	4618      	mov	r0, r3
 80003b0:	f000 fe76 	bl	80010a0 <HAL_RCC_OscConfig>
 80003b4:	4603      	mov	r3, r0
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d001      	beq.n	80003be <SystemClock_Config+0x46>
  {
    Error_Handler();
 80003ba:	f000 fc7d 	bl	8000cb8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003be:	230f      	movs	r3, #15
 80003c0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003c2:	2300      	movs	r3, #0
 80003c4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003c6:	2300      	movs	r3, #0
 80003c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003ca:	2300      	movs	r3, #0
 80003cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003ce:	2300      	movs	r3, #0
 80003d0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003d2:	1d3b      	adds	r3, r7, #4
 80003d4:	2100      	movs	r1, #0
 80003d6:	4618      	mov	r0, r3
 80003d8:	f001 f8e4 	bl	80015a4 <HAL_RCC_ClockConfig>
 80003dc:	4603      	mov	r3, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d001      	beq.n	80003e6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80003e2:	f000 fc69 	bl	8000cb8 <Error_Handler>
  }
}
 80003e6:	bf00      	nop
 80003e8:	3740      	adds	r7, #64	@ 0x40
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bd80      	pop	{r7, pc}
	...

080003f0 <SysTick_Init>:

/* USER CODE BEGIN 4 */
void SysTick_Init(uint32_t ticks)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b082      	sub	sp, #8
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]

	SysTick->CTRL = 0; // Disable SysTick
 80003f8:	4b12      	ldr	r3, [pc, #72]	@ (8000444 <SysTick_Init+0x54>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	601a      	str	r2, [r3, #0]

	SysTick->LOAD = ticks-1; // Set Reload Register
 80003fe:	4a11      	ldr	r2, [pc, #68]	@ (8000444 <SysTick_Init+0x54>)
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	3b01      	subs	r3, #1
 8000404:	6053      	str	r3, [r2, #4]

	// Setting Interrupt Priority to the highest
	NVIC_SetPriority(SysTick_IRQn, (1<<__NVIC_PRIO_BITS)-1);
 8000406:	210f      	movs	r1, #15
 8000408:	f04f 30ff 	mov.w	r0, #4294967295
 800040c:	f7ff fec2 	bl	8000194 <__NVIC_SetPriority>

	SysTick->VAL = 0; // Reset the SysTick counter value
 8000410:	4b0c      	ldr	r3, [pc, #48]	@ (8000444 <SysTick_Init+0x54>)
 8000412:	2200      	movs	r2, #0
 8000414:	609a      	str	r2, [r3, #8]

	SysTick->CTRL |= SysTick_CTRL_CLKSOURCE_Msk; // Selecting internal clock source
 8000416:	4b0b      	ldr	r3, [pc, #44]	@ (8000444 <SysTick_Init+0x54>)
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	4a0a      	ldr	r2, [pc, #40]	@ (8000444 <SysTick_Init+0x54>)
 800041c:	f043 0304 	orr.w	r3, r3, #4
 8000420:	6013      	str	r3, [r2, #0]
	SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk; // Enabling SysTick exception Request when 0
 8000422:	4b08      	ldr	r3, [pc, #32]	@ (8000444 <SysTick_Init+0x54>)
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	4a07      	ldr	r2, [pc, #28]	@ (8000444 <SysTick_Init+0x54>)
 8000428:	f043 0302 	orr.w	r3, r3, #2
 800042c:	6013      	str	r3, [r2, #0]


	SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk; // Enable SysTick
 800042e:	4b05      	ldr	r3, [pc, #20]	@ (8000444 <SysTick_Init+0x54>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	4a04      	ldr	r2, [pc, #16]	@ (8000444 <SysTick_Init+0x54>)
 8000434:	f043 0301 	orr.w	r3, r3, #1
 8000438:	6013      	str	r3, [r2, #0]
}
 800043a:	bf00      	nop
 800043c:	3708      	adds	r7, #8
 800043e:	46bd      	mov	sp, r7
 8000440:	bd80      	pop	{r7, pc}
 8000442:	bf00      	nop
 8000444:	e000e010 	.word	0xe000e010

08000448 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8000448:	b480      	push	{r7}
 800044a:	af00      	add	r7, sp, #0

	if (Globalcounter == 0xffffffff) {
 800044c:	4b08      	ldr	r3, [pc, #32]	@ (8000470 <SysTick_Handler+0x28>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000454:	d103      	bne.n	800045e <SysTick_Handler+0x16>
        Globalcounter = 0; // Reset the counter if the maximum value is reached
 8000456:	4b06      	ldr	r3, [pc, #24]	@ (8000470 <SysTick_Handler+0x28>)
 8000458:	2200      	movs	r2, #0
 800045a:	601a      	str	r2, [r3, #0]
    } else {
        Globalcounter++; // Increment the counter
    }

}
 800045c:	e004      	b.n	8000468 <SysTick_Handler+0x20>
        Globalcounter++; // Increment the counter
 800045e:	4b04      	ldr	r3, [pc, #16]	@ (8000470 <SysTick_Handler+0x28>)
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	3301      	adds	r3, #1
 8000464:	4a02      	ldr	r2, [pc, #8]	@ (8000470 <SysTick_Handler+0x28>)
 8000466:	6013      	str	r3, [r2, #0]
}
 8000468:	bf00      	nop
 800046a:	46bd      	mov	sp, r7
 800046c:	bc80      	pop	{r7}
 800046e:	4770      	bx	lr
 8000470:	20000078 	.word	0x20000078

08000474 <LED_Init>:

void LED_Init (void)
{
 8000474:	b480      	push	{r7}
 8000476:	af00      	add	r7, sp, #0

	// Enable clock for GPIOC
	RCC->APB2ENR |= RCC_APB2ENR_IOPCEN;
 8000478:	4b0a      	ldr	r3, [pc, #40]	@ (80004a4 <LED_Init+0x30>)
 800047a:	699b      	ldr	r3, [r3, #24]
 800047c:	4a09      	ldr	r2, [pc, #36]	@ (80004a4 <LED_Init+0x30>)
 800047e:	f043 0310 	orr.w	r3, r3, #16
 8000482:	6193      	str	r3, [r2, #24]

	// Set PC13 as output push-pull
	GPIOC->CRH &= ~GPIO_CRH_CNF13;    // Output Push-Pull
 8000484:	4b08      	ldr	r3, [pc, #32]	@ (80004a8 <LED_Init+0x34>)
 8000486:	685b      	ldr	r3, [r3, #4]
 8000488:	4a07      	ldr	r2, [pc, #28]	@ (80004a8 <LED_Init+0x34>)
 800048a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800048e:	6053      	str	r3, [r2, #4]
	GPIOC->CRH |= GPIO_CRH_MODE13_0;  // Output mode, max speed 50 MHz
 8000490:	4b05      	ldr	r3, [pc, #20]	@ (80004a8 <LED_Init+0x34>)
 8000492:	685b      	ldr	r3, [r3, #4]
 8000494:	4a04      	ldr	r2, [pc, #16]	@ (80004a8 <LED_Init+0x34>)
 8000496:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800049a:	6053      	str	r3, [r2, #4]
}
 800049c:	bf00      	nop
 800049e:	46bd      	mov	sp, r7
 80004a0:	bc80      	pop	{r7}
 80004a2:	4770      	bx	lr
 80004a4:	40021000 	.word	0x40021000
 80004a8:	40011000 	.word	0x40011000

080004ac <LED_Toggle>:

void LED_Toggle(void)
{
 80004ac:	b480      	push	{r7}
 80004ae:	af00      	add	r7, sp, #0
	GPIOC->ODR ^= GPIO_ODR_ODR13;
 80004b0:	4b04      	ldr	r3, [pc, #16]	@ (80004c4 <LED_Toggle+0x18>)
 80004b2:	68db      	ldr	r3, [r3, #12]
 80004b4:	4a03      	ldr	r2, [pc, #12]	@ (80004c4 <LED_Toggle+0x18>)
 80004b6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80004ba:	60d3      	str	r3, [r2, #12]
}
 80004bc:	bf00      	nop
 80004be:	46bd      	mov	sp, r7
 80004c0:	bc80      	pop	{r7}
 80004c2:	4770      	bx	lr
 80004c4:	40011000 	.word	0x40011000

080004c8 <Delay_Init>:

void Delay_Init(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	b083      	sub	sp, #12
 80004cc:	af00      	add	r7, sp, #0
    for (int i = 0; i < MAX_DELAYS; i++) {
 80004ce:	2300      	movs	r3, #0
 80004d0:	607b      	str	r3, [r7, #4]
 80004d2:	e01d      	b.n	8000510 <Delay_Init+0x48>
        delays[i].id = i;               // Initialize each delay with a unique id
 80004d4:	4a13      	ldr	r2, [pc, #76]	@ (8000524 <Delay_Init+0x5c>)
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	011b      	lsls	r3, r3, #4
 80004da:	4413      	add	r3, r2
 80004dc:	687a      	ldr	r2, [r7, #4]
 80004de:	601a      	str	r2, [r3, #0]
        delays[i].startTime = 0;        // Reset the start time
 80004e0:	4a10      	ldr	r2, [pc, #64]	@ (8000524 <Delay_Init+0x5c>)
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	011b      	lsls	r3, r3, #4
 80004e6:	4413      	add	r3, r2
 80004e8:	3304      	adds	r3, #4
 80004ea:	2200      	movs	r2, #0
 80004ec:	601a      	str	r2, [r3, #0]
        delays[i].delayTime = 0;        // Reset the delay time
 80004ee:	4a0d      	ldr	r2, [pc, #52]	@ (8000524 <Delay_Init+0x5c>)
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	011b      	lsls	r3, r3, #4
 80004f4:	4413      	add	r3, r2
 80004f6:	3308      	adds	r3, #8
 80004f8:	2200      	movs	r2, #0
 80004fa:	601a      	str	r2, [r3, #0]
        delays[i].activeFlag = 0;       // Initialize all delays as inactive
 80004fc:	4a09      	ldr	r2, [pc, #36]	@ (8000524 <Delay_Init+0x5c>)
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	011b      	lsls	r3, r3, #4
 8000502:	4413      	add	r3, r2
 8000504:	330c      	adds	r3, #12
 8000506:	2200      	movs	r2, #0
 8000508:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < MAX_DELAYS; i++) {
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	3301      	adds	r3, #1
 800050e:	607b      	str	r3, [r7, #4]
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	2b09      	cmp	r3, #9
 8000514:	ddde      	ble.n	80004d4 <Delay_Init+0xc>
    }
}
 8000516:	bf00      	nop
 8000518:	bf00      	nop
 800051a:	370c      	adds	r7, #12
 800051c:	46bd      	mov	sp, r7
 800051e:	bc80      	pop	{r7}
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop
 8000524:	2000007c 	.word	0x2000007c

08000528 <Delay_Start>:

int Delay_Start(int id, int delayTime)
{
 8000528:	b480      	push	{r7}
 800052a:	b083      	sub	sp, #12
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
 8000530:	6039      	str	r1, [r7, #0]
    if (id >= 0 && id < MAX_DELAYS) {
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	2b00      	cmp	r3, #0
 8000536:	db1a      	blt.n	800056e <Delay_Start+0x46>
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	2b09      	cmp	r3, #9
 800053c:	dc17      	bgt.n	800056e <Delay_Start+0x46>
        delays[id].startTime = Globalcounter; // Capture the current Globalcounter value
 800053e:	4b0f      	ldr	r3, [pc, #60]	@ (800057c <Delay_Start+0x54>)
 8000540:	681a      	ldr	r2, [r3, #0]
 8000542:	490f      	ldr	r1, [pc, #60]	@ (8000580 <Delay_Start+0x58>)
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	011b      	lsls	r3, r3, #4
 8000548:	440b      	add	r3, r1
 800054a:	3304      	adds	r3, #4
 800054c:	601a      	str	r2, [r3, #0]
        delays[id].delayTime = delayTime;
 800054e:	4a0c      	ldr	r2, [pc, #48]	@ (8000580 <Delay_Start+0x58>)
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	011b      	lsls	r3, r3, #4
 8000554:	4413      	add	r3, r2
 8000556:	3308      	adds	r3, #8
 8000558:	683a      	ldr	r2, [r7, #0]
 800055a:	601a      	str	r2, [r3, #0]
        delays[id].activeFlag = 1;           // Mark this delay as active
 800055c:	4a08      	ldr	r2, [pc, #32]	@ (8000580 <Delay_Start+0x58>)
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	011b      	lsls	r3, r3, #4
 8000562:	4413      	add	r3, r2
 8000564:	330c      	adds	r3, #12
 8000566:	2201      	movs	r2, #1
 8000568:	601a      	str	r2, [r3, #0]
        return id;                           // Return the id of the delay
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	e001      	b.n	8000572 <Delay_Start+0x4a>
    }
    return -1; // Invalid id
 800056e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000572:	4618      	mov	r0, r3
 8000574:	370c      	adds	r7, #12
 8000576:	46bd      	mov	sp, r7
 8000578:	bc80      	pop	{r7}
 800057a:	4770      	bx	lr
 800057c:	20000078 	.word	0x20000078
 8000580:	2000007c 	.word	0x2000007c

08000584 <Delay_Completed>:
        delays[id].activeFlag = 0; // Stop the specified delay
    }
}

int Delay_Completed(int id)
{
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
    if (id >= 0 && id < MAX_DELAYS) {
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	2b00      	cmp	r3, #0
 8000590:	db24      	blt.n	80005dc <Delay_Completed+0x58>
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	2b09      	cmp	r3, #9
 8000596:	dc21      	bgt.n	80005dc <Delay_Completed+0x58>
        if (delays[id].activeFlag && (Globalcounter >= delays[id].startTime + delays[id].delayTime)) {
 8000598:	4a13      	ldr	r2, [pc, #76]	@ (80005e8 <Delay_Completed+0x64>)
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	011b      	lsls	r3, r3, #4
 800059e:	4413      	add	r3, r2
 80005a0:	330c      	adds	r3, #12
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d019      	beq.n	80005dc <Delay_Completed+0x58>
 80005a8:	4a0f      	ldr	r2, [pc, #60]	@ (80005e8 <Delay_Completed+0x64>)
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	011b      	lsls	r3, r3, #4
 80005ae:	4413      	add	r3, r2
 80005b0:	3304      	adds	r3, #4
 80005b2:	681a      	ldr	r2, [r3, #0]
 80005b4:	490c      	ldr	r1, [pc, #48]	@ (80005e8 <Delay_Completed+0x64>)
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	011b      	lsls	r3, r3, #4
 80005ba:	440b      	add	r3, r1
 80005bc:	3308      	adds	r3, #8
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	441a      	add	r2, r3
 80005c2:	4b0a      	ldr	r3, [pc, #40]	@ (80005ec <Delay_Completed+0x68>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	429a      	cmp	r2, r3
 80005c8:	dc08      	bgt.n	80005dc <Delay_Completed+0x58>
            delays[id].activeFlag = 0; // Deactivate the delay after completion
 80005ca:	4a07      	ldr	r2, [pc, #28]	@ (80005e8 <Delay_Completed+0x64>)
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	011b      	lsls	r3, r3, #4
 80005d0:	4413      	add	r3, r2
 80005d2:	330c      	adds	r3, #12
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
            return 1; // Delay completed
 80005d8:	2301      	movs	r3, #1
 80005da:	e000      	b.n	80005de <Delay_Completed+0x5a>
        }
    }
    return 0; // Delay not yet completed
 80005dc:	2300      	movs	r3, #0
}
 80005de:	4618      	mov	r0, r3
 80005e0:	370c      	adds	r7, #12
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bc80      	pop	{r7}
 80005e6:	4770      	bx	lr
 80005e8:	2000007c 	.word	0x2000007c
 80005ec:	20000078 	.word	0x20000078

080005f0 <Delay_ErrorHandler>:

void Delay_ErrorHandler(int delayid)
{
 80005f0:	b5b0      	push	{r4, r5, r7, lr}
 80005f2:	b08a      	sub	sp, #40	@ 0x28
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
	if (delayid == (-1))
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005fe:	d116      	bne.n	800062e <Delay_ErrorHandler+0x3e>
	{
		char errormsg[] = "Invalid Delay Id chosen....\n";
 8000600:	4b0d      	ldr	r3, [pc, #52]	@ (8000638 <Delay_ErrorHandler+0x48>)
 8000602:	f107 0408 	add.w	r4, r7, #8
 8000606:	461d      	mov	r5, r3
 8000608:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800060a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800060c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000610:	c407      	stmia	r4!, {r0, r1, r2}
 8000612:	7023      	strb	r3, [r4, #0]
		UART_Send((uint8_t*)errormsg, strlen(errormsg));
 8000614:	f107 0308 	add.w	r3, r7, #8
 8000618:	4618      	mov	r0, r3
 800061a:	f7ff fd97 	bl	800014c <strlen>
 800061e:	4603      	mov	r3, r0
 8000620:	b29a      	uxth	r2, r3
 8000622:	f107 0308 	add.w	r3, r7, #8
 8000626:	4611      	mov	r1, r2
 8000628:	4618      	mov	r0, r3
 800062a:	f000 f83f 	bl	80006ac <UART_Send>
	}
}
 800062e:	bf00      	nop
 8000630:	3728      	adds	r7, #40	@ 0x28
 8000632:	46bd      	mov	sp, r7
 8000634:	bdb0      	pop	{r4, r5, r7, pc}
 8000636:	bf00      	nop
 8000638:	0800226c 	.word	0x0800226c

0800063c <UART_Init>:

void UART_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
    // Enable clock for GPIOA and USART1
    RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;  // GPIOA clock
 8000640:	4b17      	ldr	r3, [pc, #92]	@ (80006a0 <UART_Init+0x64>)
 8000642:	699b      	ldr	r3, [r3, #24]
 8000644:	4a16      	ldr	r2, [pc, #88]	@ (80006a0 <UART_Init+0x64>)
 8000646:	f043 0304 	orr.w	r3, r3, #4
 800064a:	6193      	str	r3, [r2, #24]
    RCC->APB2ENR |= RCC_APB2ENR_USART1EN; // USART1 clock
 800064c:	4b14      	ldr	r3, [pc, #80]	@ (80006a0 <UART_Init+0x64>)
 800064e:	699b      	ldr	r3, [r3, #24]
 8000650:	4a13      	ldr	r2, [pc, #76]	@ (80006a0 <UART_Init+0x64>)
 8000652:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000656:	6193      	str	r3, [r2, #24]

    // Configure PA9 (TX) as Alternate function push-pull
    GPIOA->CRH &= ~(GPIO_CRH_CNF9 | GPIO_CRH_MODE9);
 8000658:	4b12      	ldr	r3, [pc, #72]	@ (80006a4 <UART_Init+0x68>)
 800065a:	685b      	ldr	r3, [r3, #4]
 800065c:	4a11      	ldr	r2, [pc, #68]	@ (80006a4 <UART_Init+0x68>)
 800065e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000662:	6053      	str	r3, [r2, #4]
    GPIOA->CRH |= (GPIO_CRH_CNF9_1 | GPIO_CRH_MODE9_1); // Output mode, max speed 2 MHz
 8000664:	4b0f      	ldr	r3, [pc, #60]	@ (80006a4 <UART_Init+0x68>)
 8000666:	685b      	ldr	r3, [r3, #4]
 8000668:	4a0e      	ldr	r2, [pc, #56]	@ (80006a4 <UART_Init+0x68>)
 800066a:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 800066e:	6053      	str	r3, [r2, #4]

    // Configure PA10 (RX) as input floating
    GPIOA->CRH &= ~(GPIO_CRH_CNF10 | GPIO_CRH_MODE10);
 8000670:	4b0c      	ldr	r3, [pc, #48]	@ (80006a4 <UART_Init+0x68>)
 8000672:	685b      	ldr	r3, [r3, #4]
 8000674:	4a0b      	ldr	r2, [pc, #44]	@ (80006a4 <UART_Init+0x68>)
 8000676:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800067a:	6053      	str	r3, [r2, #4]
    GPIOA->CRH |= GPIO_CRH_CNF10_0; // Input floating
 800067c:	4b09      	ldr	r3, [pc, #36]	@ (80006a4 <UART_Init+0x68>)
 800067e:	685b      	ldr	r3, [r3, #4]
 8000680:	4a08      	ldr	r2, [pc, #32]	@ (80006a4 <UART_Init+0x68>)
 8000682:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000686:	6053      	str	r3, [r2, #4]

    // Configure baud rate
    USART1->BRR = (Clock_Frequency*1000) / BAUD_RATE;
 8000688:	4b07      	ldr	r3, [pc, #28]	@ (80006a8 <UART_Init+0x6c>)
 800068a:	2245      	movs	r2, #69	@ 0x45
 800068c:	609a      	str	r2, [r3, #8]

    // Enable USART, TX, RX and RXNE interrupt
    USART1->CR1 = USART_CR1_TE | USART_CR1_RE | USART_CR1_RXNEIE | USART_CR1_UE;
 800068e:	4b06      	ldr	r3, [pc, #24]	@ (80006a8 <UART_Init+0x6c>)
 8000690:	f242 022c 	movw	r2, #8236	@ 0x202c
 8000694:	60da      	str	r2, [r3, #12]

    // Enable USART1 global interrupt
    NVIC_EnableIRQ(USART1_IRQn);
 8000696:	2025      	movs	r0, #37	@ 0x25
 8000698:	f7ff fd60 	bl	800015c <__NVIC_EnableIRQ>
}
 800069c:	bf00      	nop
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	40021000 	.word	0x40021000
 80006a4:	40010800 	.word	0x40010800
 80006a8:	40013800 	.word	0x40013800

080006ac <UART_Send>:

void UART_Send(uint8_t *data, uint16_t size)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b085      	sub	sp, #20
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
 80006b4:	460b      	mov	r3, r1
 80006b6:	807b      	strh	r3, [r7, #2]
    for (uint16_t i = 0; i < size; i++) {
 80006b8:	2300      	movs	r3, #0
 80006ba:	81fb      	strh	r3, [r7, #14]
 80006bc:	e02a      	b.n	8000714 <UART_Send+0x68>
        while (((txHead + 1) % TX_BUFFER_SIZE) == txTail); // Wait if buffer is full
 80006be:	bf00      	nop
 80006c0:	4b20      	ldr	r3, [pc, #128]	@ (8000744 <UART_Send+0x98>)
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	b2db      	uxtb	r3, r3
 80006c6:	3301      	adds	r3, #1
 80006c8:	425a      	negs	r2, r3
 80006ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80006ce:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80006d2:	bf58      	it	pl
 80006d4:	4253      	negpl	r3, r2
 80006d6:	4a1c      	ldr	r2, [pc, #112]	@ (8000748 <UART_Send+0x9c>)
 80006d8:	7812      	ldrb	r2, [r2, #0]
 80006da:	b2d2      	uxtb	r2, r2
 80006dc:	4293      	cmp	r3, r2
 80006de:	d0ef      	beq.n	80006c0 <UART_Send+0x14>
        txBuffer[txHead] = data[i];
 80006e0:	89fb      	ldrh	r3, [r7, #14]
 80006e2:	687a      	ldr	r2, [r7, #4]
 80006e4:	4413      	add	r3, r2
 80006e6:	4a17      	ldr	r2, [pc, #92]	@ (8000744 <UART_Send+0x98>)
 80006e8:	7812      	ldrb	r2, [r2, #0]
 80006ea:	b2d2      	uxtb	r2, r2
 80006ec:	7819      	ldrb	r1, [r3, #0]
 80006ee:	4b17      	ldr	r3, [pc, #92]	@ (800074c <UART_Send+0xa0>)
 80006f0:	5499      	strb	r1, [r3, r2]
        txHead = (txHead + 1) % TX_BUFFER_SIZE;
 80006f2:	4b14      	ldr	r3, [pc, #80]	@ (8000744 <UART_Send+0x98>)
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	b2db      	uxtb	r3, r3
 80006f8:	3301      	adds	r3, #1
 80006fa:	425a      	negs	r2, r3
 80006fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000700:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8000704:	bf58      	it	pl
 8000706:	4253      	negpl	r3, r2
 8000708:	b2da      	uxtb	r2, r3
 800070a:	4b0e      	ldr	r3, [pc, #56]	@ (8000744 <UART_Send+0x98>)
 800070c:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++) {
 800070e:	89fb      	ldrh	r3, [r7, #14]
 8000710:	3301      	adds	r3, #1
 8000712:	81fb      	strh	r3, [r7, #14]
 8000714:	89fa      	ldrh	r2, [r7, #14]
 8000716:	887b      	ldrh	r3, [r7, #2]
 8000718:	429a      	cmp	r2, r3
 800071a:	d3d0      	bcc.n	80006be <UART_Send+0x12>
    }

    // Enable TXE interrupt to start transmitting
    if (!txBusy) {
 800071c:	4b0c      	ldr	r3, [pc, #48]	@ (8000750 <UART_Send+0xa4>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	b2db      	uxtb	r3, r3
 8000722:	2b00      	cmp	r3, #0
 8000724:	d108      	bne.n	8000738 <UART_Send+0x8c>
        txBusy = 1;
 8000726:	4b0a      	ldr	r3, [pc, #40]	@ (8000750 <UART_Send+0xa4>)
 8000728:	2201      	movs	r2, #1
 800072a:	701a      	strb	r2, [r3, #0]
        USART1->CR1 |= USART_CR1_TXEIE;
 800072c:	4b09      	ldr	r3, [pc, #36]	@ (8000754 <UART_Send+0xa8>)
 800072e:	68db      	ldr	r3, [r3, #12]
 8000730:	4a08      	ldr	r2, [pc, #32]	@ (8000754 <UART_Send+0xa8>)
 8000732:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000736:	60d3      	str	r3, [r2, #12]
    }
}
 8000738:	bf00      	nop
 800073a:	3714      	adds	r7, #20
 800073c:	46bd      	mov	sp, r7
 800073e:	bc80      	pop	{r7}
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop
 8000744:	2000021c 	.word	0x2000021c
 8000748:	2000021d 	.word	0x2000021d
 800074c:	2000011c 	.word	0x2000011c
 8000750:	20000220 	.word	0x20000220
 8000754:	40013800 	.word	0x40013800

08000758 <USART1_IRQHandler>:
        rxTail = (rxTail + 1) % RX_BUFFER_SIZE;
    }
}

void USART1_IRQHandler(void)
{
 8000758:	b480      	push	{r7}
 800075a:	b083      	sub	sp, #12
 800075c:	af00      	add	r7, sp, #0
    // Check if data is ready to be read
    if (USART1->SR & USART_SR_RXNE) {
 800075e:	4b2c      	ldr	r3, [pc, #176]	@ (8000810 <USART1_IRQHandler+0xb8>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	f003 0320 	and.w	r3, r3, #32
 8000766:	2b00      	cmp	r3, #0
 8000768:	d01e      	beq.n	80007a8 <USART1_IRQHandler+0x50>
        uint8_t data = USART1->DR; // Read received data
 800076a:	4b29      	ldr	r3, [pc, #164]	@ (8000810 <USART1_IRQHandler+0xb8>)
 800076c:	685b      	ldr	r3, [r3, #4]
 800076e:	71fb      	strb	r3, [r7, #7]
        uint8_t nextHead = (rxHead + 1) % RX_BUFFER_SIZE;
 8000770:	4b28      	ldr	r3, [pc, #160]	@ (8000814 <USART1_IRQHandler+0xbc>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	b2db      	uxtb	r3, r3
 8000776:	3301      	adds	r3, #1
 8000778:	425a      	negs	r2, r3
 800077a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800077e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8000782:	bf58      	it	pl
 8000784:	4253      	negpl	r3, r2
 8000786:	71bb      	strb	r3, [r7, #6]
        if (nextHead != rxTail) { // If buffer is not full
 8000788:	4b23      	ldr	r3, [pc, #140]	@ (8000818 <USART1_IRQHandler+0xc0>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	b2db      	uxtb	r3, r3
 800078e:	79ba      	ldrb	r2, [r7, #6]
 8000790:	429a      	cmp	r2, r3
 8000792:	d009      	beq.n	80007a8 <USART1_IRQHandler+0x50>
            rxBuffer[rxHead] = data;
 8000794:	4b1f      	ldr	r3, [pc, #124]	@ (8000814 <USART1_IRQHandler+0xbc>)
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	b2db      	uxtb	r3, r3
 800079a:	4619      	mov	r1, r3
 800079c:	4a1f      	ldr	r2, [pc, #124]	@ (800081c <USART1_IRQHandler+0xc4>)
 800079e:	79fb      	ldrb	r3, [r7, #7]
 80007a0:	5453      	strb	r3, [r2, r1]
            rxHead = nextHead;
 80007a2:	4a1c      	ldr	r2, [pc, #112]	@ (8000814 <USART1_IRQHandler+0xbc>)
 80007a4:	79bb      	ldrb	r3, [r7, #6]
 80007a6:	7013      	strb	r3, [r2, #0]
        }
    }

    // Check if transmit data register is empty
    if (USART1->SR & USART_SR_TXE) {
 80007a8:	4b19      	ldr	r3, [pc, #100]	@ (8000810 <USART1_IRQHandler+0xb8>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d028      	beq.n	8000806 <USART1_IRQHandler+0xae>
        if (txTail != txHead) { // If data is available to transmit
 80007b4:	4b1a      	ldr	r3, [pc, #104]	@ (8000820 <USART1_IRQHandler+0xc8>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	b2da      	uxtb	r2, r3
 80007ba:	4b1a      	ldr	r3, [pc, #104]	@ (8000824 <USART1_IRQHandler+0xcc>)
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	b2db      	uxtb	r3, r3
 80007c0:	429a      	cmp	r2, r3
 80007c2:	d017      	beq.n	80007f4 <USART1_IRQHandler+0x9c>
            USART1->DR = txBuffer[txTail];
 80007c4:	4b16      	ldr	r3, [pc, #88]	@ (8000820 <USART1_IRQHandler+0xc8>)
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	b2db      	uxtb	r3, r3
 80007ca:	461a      	mov	r2, r3
 80007cc:	4b16      	ldr	r3, [pc, #88]	@ (8000828 <USART1_IRQHandler+0xd0>)
 80007ce:	5c9b      	ldrb	r3, [r3, r2]
 80007d0:	b2da      	uxtb	r2, r3
 80007d2:	4b0f      	ldr	r3, [pc, #60]	@ (8000810 <USART1_IRQHandler+0xb8>)
 80007d4:	605a      	str	r2, [r3, #4]
            txTail = (txTail + 1) % TX_BUFFER_SIZE;
 80007d6:	4b12      	ldr	r3, [pc, #72]	@ (8000820 <USART1_IRQHandler+0xc8>)
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	b2db      	uxtb	r3, r3
 80007dc:	3301      	adds	r3, #1
 80007de:	425a      	negs	r2, r3
 80007e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80007e4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80007e8:	bf58      	it	pl
 80007ea:	4253      	negpl	r3, r2
 80007ec:	b2da      	uxtb	r2, r3
 80007ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000820 <USART1_IRQHandler+0xc8>)
 80007f0:	701a      	strb	r2, [r3, #0]
            // No more data to send, disable TXE interrupt
            USART1->CR1 &= ~USART_CR1_TXEIE;
            txBusy = 0;
        }
    }
}
 80007f2:	e008      	b.n	8000806 <USART1_IRQHandler+0xae>
            USART1->CR1 &= ~USART_CR1_TXEIE;
 80007f4:	4b06      	ldr	r3, [pc, #24]	@ (8000810 <USART1_IRQHandler+0xb8>)
 80007f6:	68db      	ldr	r3, [r3, #12]
 80007f8:	4a05      	ldr	r2, [pc, #20]	@ (8000810 <USART1_IRQHandler+0xb8>)
 80007fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80007fe:	60d3      	str	r3, [r2, #12]
            txBusy = 0;
 8000800:	4b0a      	ldr	r3, [pc, #40]	@ (800082c <USART1_IRQHandler+0xd4>)
 8000802:	2200      	movs	r2, #0
 8000804:	701a      	strb	r2, [r3, #0]
}
 8000806:	bf00      	nop
 8000808:	370c      	adds	r7, #12
 800080a:	46bd      	mov	sp, r7
 800080c:	bc80      	pop	{r7}
 800080e:	4770      	bx	lr
 8000810:	40013800 	.word	0x40013800
 8000814:	2000021e 	.word	0x2000021e
 8000818:	2000021f 	.word	0x2000021f
 800081c:	2000019c 	.word	0x2000019c
 8000820:	2000021d 	.word	0x2000021d
 8000824:	2000021c 	.word	0x2000021c
 8000828:	2000011c 	.word	0x2000011c
 800082c:	20000220 	.word	0x20000220

08000830 <CAN_Init>:


void CAN_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
	/* Enable clock for GPIOB and CAN */
	 RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;  // GPIOB clock
 8000834:	4b62      	ldr	r3, [pc, #392]	@ (80009c0 <CAN_Init+0x190>)
 8000836:	699b      	ldr	r3, [r3, #24]
 8000838:	4a61      	ldr	r2, [pc, #388]	@ (80009c0 <CAN_Init+0x190>)
 800083a:	f043 0308 	orr.w	r3, r3, #8
 800083e:	6193      	str	r3, [r2, #24]
	 RCC->APB1ENR |= RCC_APB1ENR_CAN1EN;  // CAN clock
 8000840:	4b5f      	ldr	r3, [pc, #380]	@ (80009c0 <CAN_Init+0x190>)
 8000842:	69db      	ldr	r3, [r3, #28]
 8000844:	4a5e      	ldr	r2, [pc, #376]	@ (80009c0 <CAN_Init+0x190>)
 8000846:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800084a:	61d3      	str	r3, [r2, #28]

	 /* Configure PB8 as CAN_RX (input floating) */
	 GPIOB->CRH &= ~(GPIO_CRH_CNF8 | GPIO_CRH_MODE8);
 800084c:	4b5d      	ldr	r3, [pc, #372]	@ (80009c4 <CAN_Init+0x194>)
 800084e:	685b      	ldr	r3, [r3, #4]
 8000850:	4a5c      	ldr	r2, [pc, #368]	@ (80009c4 <CAN_Init+0x194>)
 8000852:	f023 030f 	bic.w	r3, r3, #15
 8000856:	6053      	str	r3, [r2, #4]
	 GPIOB->CRH |= GPIO_CRH_CNF8_0;  // Input floating
 8000858:	4b5a      	ldr	r3, [pc, #360]	@ (80009c4 <CAN_Init+0x194>)
 800085a:	685b      	ldr	r3, [r3, #4]
 800085c:	4a59      	ldr	r2, [pc, #356]	@ (80009c4 <CAN_Init+0x194>)
 800085e:	f043 0304 	orr.w	r3, r3, #4
 8000862:	6053      	str	r3, [r2, #4]

	 /* Configure PB9 as CAN_TX (alternate function push-pull) */
	 GPIOB->CRH &= ~(GPIO_CRH_CNF9 | GPIO_CRH_MODE9);
 8000864:	4b57      	ldr	r3, [pc, #348]	@ (80009c4 <CAN_Init+0x194>)
 8000866:	685b      	ldr	r3, [r3, #4]
 8000868:	4a56      	ldr	r2, [pc, #344]	@ (80009c4 <CAN_Init+0x194>)
 800086a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800086e:	6053      	str	r3, [r2, #4]
	 GPIOB->CRH |= GPIO_CRH_CNF9_1 | GPIO_CRH_MODE9_0;  // Alternate function push-pull, 10 MHz
 8000870:	4b54      	ldr	r3, [pc, #336]	@ (80009c4 <CAN_Init+0x194>)
 8000872:	685b      	ldr	r3, [r3, #4]
 8000874:	4a53      	ldr	r2, [pc, #332]	@ (80009c4 <CAN_Init+0x194>)
 8000876:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800087a:	6053      	str	r3, [r2, #4]

    /* Enter initialization mode */
    CAN1->MCR = CAN_MCR_INRQ;
 800087c:	4b52      	ldr	r3, [pc, #328]	@ (80009c8 <CAN_Init+0x198>)
 800087e:	2201      	movs	r2, #1
 8000880:	601a      	str	r2, [r3, #0]
    while (!(CAN1->MSR & CAN_MSR_INAK)); // Wait until initialization mode is entered
 8000882:	bf00      	nop
 8000884:	4b50      	ldr	r3, [pc, #320]	@ (80009c8 <CAN_Init+0x198>)
 8000886:	685b      	ldr	r3, [r3, #4]
 8000888:	f003 0301 	and.w	r3, r3, #1
 800088c:	2b00      	cmp	r3, #0
 800088e:	d0f9      	beq.n	8000884 <CAN_Init+0x54>

    // Check if the CAN peripheral entered initialization mode
    if (CAN1->MSR & CAN_MSR_INAK) {
 8000890:	4b4d      	ldr	r3, [pc, #308]	@ (80009c8 <CAN_Init+0x198>)
 8000892:	685b      	ldr	r3, [r3, #4]
 8000894:	f003 0301 	and.w	r3, r3, #1
 8000898:	2b00      	cmp	r3, #0
 800089a:	d00e      	beq.n	80008ba <CAN_Init+0x8a>
        snprintf(UART_MSGBUFFER, sizeof(UART_MSGBUFFER), "CAN Initialization successful\r\n");
 800089c:	4a4b      	ldr	r2, [pc, #300]	@ (80009cc <CAN_Init+0x19c>)
 800089e:	2180      	movs	r1, #128	@ 0x80
 80008a0:	484b      	ldr	r0, [pc, #300]	@ (80009d0 <CAN_Init+0x1a0>)
 80008a2:	f000 ffdb 	bl	800185c <sniprintf>
        UART_Send((uint8_t*)UART_MSGBUFFER, strlen(UART_MSGBUFFER));
 80008a6:	484a      	ldr	r0, [pc, #296]	@ (80009d0 <CAN_Init+0x1a0>)
 80008a8:	f7ff fc50 	bl	800014c <strlen>
 80008ac:	4603      	mov	r3, r0
 80008ae:	b29b      	uxth	r3, r3
 80008b0:	4619      	mov	r1, r3
 80008b2:	4847      	ldr	r0, [pc, #284]	@ (80009d0 <CAN_Init+0x1a0>)
 80008b4:	f7ff fefa 	bl	80006ac <UART_Send>
 80008b8:	e00d      	b.n	80008d6 <CAN_Init+0xa6>
    } else {
        snprintf(UART_MSGBUFFER, sizeof(UART_MSGBUFFER), "CAN Initialization failed\r\n");
 80008ba:	4a46      	ldr	r2, [pc, #280]	@ (80009d4 <CAN_Init+0x1a4>)
 80008bc:	2180      	movs	r1, #128	@ 0x80
 80008be:	4844      	ldr	r0, [pc, #272]	@ (80009d0 <CAN_Init+0x1a0>)
 80008c0:	f000 ffcc 	bl	800185c <sniprintf>
        UART_Send((uint8_t*)UART_MSGBUFFER, strlen(UART_MSGBUFFER));
 80008c4:	4842      	ldr	r0, [pc, #264]	@ (80009d0 <CAN_Init+0x1a0>)
 80008c6:	f7ff fc41 	bl	800014c <strlen>
 80008ca:	4603      	mov	r3, r0
 80008cc:	b29b      	uxth	r3, r3
 80008ce:	4619      	mov	r1, r3
 80008d0:	483f      	ldr	r0, [pc, #252]	@ (80009d0 <CAN_Init+0x1a0>)
 80008d2:	f7ff feeb 	bl	80006ac <UART_Send>
    }

    /* Set CAN bit timing */
    CAN1->BTR = (CAN_SJW - 1) << 24 |
 80008d6:	4b3c      	ldr	r3, [pc, #240]	@ (80009c8 <CAN_Init+0x198>)
 80008d8:	4a3f      	ldr	r2, [pc, #252]	@ (80009d8 <CAN_Init+0x1a8>)
 80008da:	61da      	str	r2, [r3, #28]
                (CAN_TS1 - 1) << 16 |
                (CAN_TS2 - 1) << 20 |
                (CAN_BAUD_PRESCALER - 1);

    /* Leave initialization mode, enter normal mode */
    CAN1->MCR &= ~CAN_MCR_INRQ;
 80008dc:	4b3a      	ldr	r3, [pc, #232]	@ (80009c8 <CAN_Init+0x198>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a39      	ldr	r2, [pc, #228]	@ (80009c8 <CAN_Init+0x198>)
 80008e2:	f023 0301 	bic.w	r3, r3, #1
 80008e6:	6013      	str	r3, [r2, #0]
    while (CAN1->MSR & CAN_MSR_INAK); // Wait until normal mode is entered
 80008e8:	bf00      	nop
 80008ea:	4b37      	ldr	r3, [pc, #220]	@ (80009c8 <CAN_Init+0x198>)
 80008ec:	685b      	ldr	r3, [r3, #4]
 80008ee:	f003 0301 	and.w	r3, r3, #1
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d1f9      	bne.n	80008ea <CAN_Init+0xba>

    // Check if the CAN peripheral entered normal mode
    if (!(CAN1->MSR & CAN_MSR_INAK)) {
 80008f6:	4b34      	ldr	r3, [pc, #208]	@ (80009c8 <CAN_Init+0x198>)
 80008f8:	685b      	ldr	r3, [r3, #4]
 80008fa:	f003 0301 	and.w	r3, r3, #1
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d10e      	bne.n	8000920 <CAN_Init+0xf0>
        snprintf(UART_MSGBUFFER, sizeof(UART_MSGBUFFER), "CAN Entered Normal mode\r\n");
 8000902:	4a36      	ldr	r2, [pc, #216]	@ (80009dc <CAN_Init+0x1ac>)
 8000904:	2180      	movs	r1, #128	@ 0x80
 8000906:	4832      	ldr	r0, [pc, #200]	@ (80009d0 <CAN_Init+0x1a0>)
 8000908:	f000 ffa8 	bl	800185c <sniprintf>
        UART_Send((uint8_t*)UART_MSGBUFFER, strlen(UART_MSGBUFFER));
 800090c:	4830      	ldr	r0, [pc, #192]	@ (80009d0 <CAN_Init+0x1a0>)
 800090e:	f7ff fc1d 	bl	800014c <strlen>
 8000912:	4603      	mov	r3, r0
 8000914:	b29b      	uxth	r3, r3
 8000916:	4619      	mov	r1, r3
 8000918:	482d      	ldr	r0, [pc, #180]	@ (80009d0 <CAN_Init+0x1a0>)
 800091a:	f7ff fec7 	bl	80006ac <UART_Send>
 800091e:	e00d      	b.n	800093c <CAN_Init+0x10c>
    } else {
        snprintf(UART_MSGBUFFER, sizeof(UART_MSGBUFFER), "CAN Failed to enter Normal mode\r\n");
 8000920:	4a2f      	ldr	r2, [pc, #188]	@ (80009e0 <CAN_Init+0x1b0>)
 8000922:	2180      	movs	r1, #128	@ 0x80
 8000924:	482a      	ldr	r0, [pc, #168]	@ (80009d0 <CAN_Init+0x1a0>)
 8000926:	f000 ff99 	bl	800185c <sniprintf>
        UART_Send((uint8_t*)UART_MSGBUFFER, strlen(UART_MSGBUFFER));
 800092a:	4829      	ldr	r0, [pc, #164]	@ (80009d0 <CAN_Init+0x1a0>)
 800092c:	f7ff fc0e 	bl	800014c <strlen>
 8000930:	4603      	mov	r3, r0
 8000932:	b29b      	uxth	r3, r3
 8000934:	4619      	mov	r1, r3
 8000936:	4826      	ldr	r0, [pc, #152]	@ (80009d0 <CAN_Init+0x1a0>)
 8000938:	f7ff feb8 	bl	80006ac <UART_Send>
    }

    /* Set CAN filters to accept all messages */
    CAN1->FMR |= CAN_FMR_FINIT;  // Enter filter initialization mode
 800093c:	4b22      	ldr	r3, [pc, #136]	@ (80009c8 <CAN_Init+0x198>)
 800093e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000942:	4a21      	ldr	r2, [pc, #132]	@ (80009c8 <CAN_Init+0x198>)
 8000944:	f043 0301 	orr.w	r3, r3, #1
 8000948:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
    CAN1->FA1R &= ~CAN_FA1R_FACT; // Disable all filters
 800094c:	4b1e      	ldr	r3, [pc, #120]	@ (80009c8 <CAN_Init+0x198>)
 800094e:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 8000952:	4a1d      	ldr	r2, [pc, #116]	@ (80009c8 <CAN_Init+0x198>)
 8000954:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8000958:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800095c:	f8c2 321c 	str.w	r3, [r2, #540]	@ 0x21c

    /* Filter 0: accept all standard IDs */
    CAN1->FS1R |= CAN_FS1R_FSC;  // Single 32-bit scale configuration
 8000960:	4b19      	ldr	r3, [pc, #100]	@ (80009c8 <CAN_Init+0x198>)
 8000962:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8000966:	4a18      	ldr	r2, [pc, #96]	@ (80009c8 <CAN_Init+0x198>)
 8000968:	ea6f 3393 	mvn.w	r3, r3, lsr #14
 800096c:	ea6f 3383 	mvn.w	r3, r3, lsl #14
 8000970:	f8c2 320c 	str.w	r3, [r2, #524]	@ 0x20c
    CAN1->FM1R &= ~CAN_FM1R_FBM; // Identifier mask mode
 8000974:	4b14      	ldr	r3, [pc, #80]	@ (80009c8 <CAN_Init+0x198>)
 8000976:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800097a:	4a13      	ldr	r2, [pc, #76]	@ (80009c8 <CAN_Init+0x198>)
 800097c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8000980:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000984:	f8c2 3204 	str.w	r3, [r2, #516]	@ 0x204
    CAN1->sFilterRegister[0].FR1 = 0x00000000; // Filter ID
 8000988:	4b0f      	ldr	r3, [pc, #60]	@ (80009c8 <CAN_Init+0x198>)
 800098a:	2200      	movs	r2, #0
 800098c:	f8c3 2240 	str.w	r2, [r3, #576]	@ 0x240
    CAN1->sFilterRegister[0].FR2 = 0x00000000; // Filter mask
 8000990:	4b0d      	ldr	r3, [pc, #52]	@ (80009c8 <CAN_Init+0x198>)
 8000992:	2200      	movs	r2, #0
 8000994:	f8c3 2244 	str.w	r2, [r3, #580]	@ 0x244
    CAN1->FA1R |= CAN_FA1R_FACT;  // Enable filter 0
 8000998:	4b0b      	ldr	r3, [pc, #44]	@ (80009c8 <CAN_Init+0x198>)
 800099a:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 800099e:	4a0a      	ldr	r2, [pc, #40]	@ (80009c8 <CAN_Init+0x198>)
 80009a0:	ea6f 3393 	mvn.w	r3, r3, lsr #14
 80009a4:	ea6f 3383 	mvn.w	r3, r3, lsl #14
 80009a8:	f8c2 321c 	str.w	r3, [r2, #540]	@ 0x21c

    CAN1->FMR &= ~CAN_FMR_FINIT;  // Leave filter initialization mode
 80009ac:	4b06      	ldr	r3, [pc, #24]	@ (80009c8 <CAN_Init+0x198>)
 80009ae:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80009b2:	4a05      	ldr	r2, [pc, #20]	@ (80009c8 <CAN_Init+0x198>)
 80009b4:	f023 0301 	bic.w	r3, r3, #1
 80009b8:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
}
 80009bc:	bf00      	nop
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	40021000 	.word	0x40021000
 80009c4:	40010c00 	.word	0x40010c00
 80009c8:	40006400 	.word	0x40006400
 80009cc:	0800228c 	.word	0x0800228c
 80009d0:	20000224 	.word	0x20000224
 80009d4:	080022ac 	.word	0x080022ac
 80009d8:	001c0001 	.word	0x001c0001
 80009dc:	080022c8 	.word	0x080022c8
 80009e0:	080022e4 	.word	0x080022e4

080009e4 <CAN_Transmit>:

int CAN_Transmit(uint32_t stdId, uint8_t *data, uint8_t len)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b086      	sub	sp, #24
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	60f8      	str	r0, [r7, #12]
 80009ec:	60b9      	str	r1, [r7, #8]
 80009ee:	4613      	mov	r3, r2
 80009f0:	71fb      	strb	r3, [r7, #7]
    uint32_t timeout = 100000;  // Arbitrary timeout value
 80009f2:	4b3a      	ldr	r3, [pc, #232]	@ (8000adc <CAN_Transmit+0xf8>)
 80009f4:	617b      	str	r3, [r7, #20]

    // Wait for an empty transmit mailbox
    while (!(CAN1->TSR & CAN_TSR_TME0))
 80009f6:	e016      	b.n	8000a26 <CAN_Transmit+0x42>
    {
        if (--timeout == 0) {
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	3b01      	subs	r3, #1
 80009fc:	617b      	str	r3, [r7, #20]
 80009fe:	697b      	ldr	r3, [r7, #20]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d110      	bne.n	8000a26 <CAN_Transmit+0x42>
            snprintf(UART_MSGBUFFER, sizeof(UART_MSGBUFFER), "CAN Transmit Timeout\r\n");
 8000a04:	4a36      	ldr	r2, [pc, #216]	@ (8000ae0 <CAN_Transmit+0xfc>)
 8000a06:	2180      	movs	r1, #128	@ 0x80
 8000a08:	4836      	ldr	r0, [pc, #216]	@ (8000ae4 <CAN_Transmit+0x100>)
 8000a0a:	f000 ff27 	bl	800185c <sniprintf>
            UART_Send((uint8_t*)UART_MSGBUFFER, strlen(UART_MSGBUFFER));
 8000a0e:	4835      	ldr	r0, [pc, #212]	@ (8000ae4 <CAN_Transmit+0x100>)
 8000a10:	f7ff fb9c 	bl	800014c <strlen>
 8000a14:	4603      	mov	r3, r0
 8000a16:	b29b      	uxth	r3, r3
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4832      	ldr	r0, [pc, #200]	@ (8000ae4 <CAN_Transmit+0x100>)
 8000a1c:	f7ff fe46 	bl	80006ac <UART_Send>
            return -1;
 8000a20:	f04f 33ff 	mov.w	r3, #4294967295
 8000a24:	e055      	b.n	8000ad2 <CAN_Transmit+0xee>
    while (!(CAN1->TSR & CAN_TSR_TME0))
 8000a26:	4b30      	ldr	r3, [pc, #192]	@ (8000ae8 <CAN_Transmit+0x104>)
 8000a28:	689b      	ldr	r3, [r3, #8]
 8000a2a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d0e2      	beq.n	80009f8 <CAN_Transmit+0x14>
        }
    }

    // Configure the TX mailbox with the standard ID and data length
    CAN1->sTxMailBox[0].TIR = stdId << 21;
 8000a32:	4a2d      	ldr	r2, [pc, #180]	@ (8000ae8 <CAN_Transmit+0x104>)
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	055b      	lsls	r3, r3, #21
 8000a38:	f8c2 3180 	str.w	r3, [r2, #384]	@ 0x180
    CAN1->sTxMailBox[0].TDTR = len & 0x0F;
 8000a3c:	79fb      	ldrb	r3, [r7, #7]
 8000a3e:	4a2a      	ldr	r2, [pc, #168]	@ (8000ae8 <CAN_Transmit+0x104>)
 8000a40:	f003 030f 	and.w	r3, r3, #15
 8000a44:	f8c2 3184 	str.w	r3, [r2, #388]	@ 0x184
    CAN1->sTxMailBox[0].TDLR = *((uint32_t *)data); // First 4 bytes of data
 8000a48:	4a27      	ldr	r2, [pc, #156]	@ (8000ae8 <CAN_Transmit+0x104>)
 8000a4a:	68bb      	ldr	r3, [r7, #8]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	f8c2 3188 	str.w	r3, [r2, #392]	@ 0x188
    if (len > 4) {
 8000a52:	79fb      	ldrb	r3, [r7, #7]
 8000a54:	2b04      	cmp	r3, #4
 8000a56:	d904      	bls.n	8000a62 <CAN_Transmit+0x7e>
        CAN1->sTxMailBox[0].TDHR = *((uint32_t *)(data + 4)); // Remaining data
 8000a58:	4a23      	ldr	r2, [pc, #140]	@ (8000ae8 <CAN_Transmit+0x104>)
 8000a5a:	68bb      	ldr	r3, [r7, #8]
 8000a5c:	685b      	ldr	r3, [r3, #4]
 8000a5e:	f8c2 318c 	str.w	r3, [r2, #396]	@ 0x18c
    }

    // Request transmission
    CAN1->sTxMailBox[0].TIR |= CAN_TI0R_TXRQ;
 8000a62:	4b21      	ldr	r3, [pc, #132]	@ (8000ae8 <CAN_Transmit+0x104>)
 8000a64:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 8000a68:	4a1f      	ldr	r2, [pc, #124]	@ (8000ae8 <CAN_Transmit+0x104>)
 8000a6a:	f043 0301 	orr.w	r3, r3, #1
 8000a6e:	f8c2 3180 	str.w	r3, [r2, #384]	@ 0x180

    timeout = 100000;  // Reset timeout
 8000a72:	4b1a      	ldr	r3, [pc, #104]	@ (8000adc <CAN_Transmit+0xf8>)
 8000a74:	617b      	str	r3, [r7, #20]

    // Wait for transmission complete
    while (!(CAN1->TSR & CAN_TSR_RQCP0))
 8000a76:	e016      	b.n	8000aa6 <CAN_Transmit+0xc2>
    {
        if (--timeout == 0) {
 8000a78:	697b      	ldr	r3, [r7, #20]
 8000a7a:	3b01      	subs	r3, #1
 8000a7c:	617b      	str	r3, [r7, #20]
 8000a7e:	697b      	ldr	r3, [r7, #20]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d110      	bne.n	8000aa6 <CAN_Transmit+0xc2>
            snprintf(UART_MSGBUFFER, sizeof(UART_MSGBUFFER), "CAN Transmit Complete Timeout\r\n");
 8000a84:	4a19      	ldr	r2, [pc, #100]	@ (8000aec <CAN_Transmit+0x108>)
 8000a86:	2180      	movs	r1, #128	@ 0x80
 8000a88:	4816      	ldr	r0, [pc, #88]	@ (8000ae4 <CAN_Transmit+0x100>)
 8000a8a:	f000 fee7 	bl	800185c <sniprintf>
            UART_Send((uint8_t*)UART_MSGBUFFER, strlen(UART_MSGBUFFER));
 8000a8e:	4815      	ldr	r0, [pc, #84]	@ (8000ae4 <CAN_Transmit+0x100>)
 8000a90:	f7ff fb5c 	bl	800014c <strlen>
 8000a94:	4603      	mov	r3, r0
 8000a96:	b29b      	uxth	r3, r3
 8000a98:	4619      	mov	r1, r3
 8000a9a:	4812      	ldr	r0, [pc, #72]	@ (8000ae4 <CAN_Transmit+0x100>)
 8000a9c:	f7ff fe06 	bl	80006ac <UART_Send>
            return -1;
 8000aa0:	f04f 33ff 	mov.w	r3, #4294967295
 8000aa4:	e015      	b.n	8000ad2 <CAN_Transmit+0xee>
    while (!(CAN1->TSR & CAN_TSR_RQCP0))
 8000aa6:	4b10      	ldr	r3, [pc, #64]	@ (8000ae8 <CAN_Transmit+0x104>)
 8000aa8:	689b      	ldr	r3, [r3, #8]
 8000aaa:	f003 0301 	and.w	r3, r3, #1
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d0e2      	beq.n	8000a78 <CAN_Transmit+0x94>
        }
    }

    // Clear the transmission request complete flag
    CAN1->TSR |= CAN_TSR_RQCP0;
 8000ab2:	4b0d      	ldr	r3, [pc, #52]	@ (8000ae8 <CAN_Transmit+0x104>)
 8000ab4:	689b      	ldr	r3, [r3, #8]
 8000ab6:	4a0c      	ldr	r2, [pc, #48]	@ (8000ae8 <CAN_Transmit+0x104>)
 8000ab8:	f043 0301 	orr.w	r3, r3, #1
 8000abc:	6093      	str	r3, [r2, #8]

    // Check if transmission was successful
    if (CAN1->TSR & CAN_TSR_TXOK0) {
 8000abe:	4b0a      	ldr	r3, [pc, #40]	@ (8000ae8 <CAN_Transmit+0x104>)
 8000ac0:	689b      	ldr	r3, [r3, #8]
 8000ac2:	f003 0302 	and.w	r3, r3, #2
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <CAN_Transmit+0xea>
        return 0; // Transmission OK
 8000aca:	2300      	movs	r3, #0
 8000acc:	e001      	b.n	8000ad2 <CAN_Transmit+0xee>
    } else {
        return -1; // Transmission error
 8000ace:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	3718      	adds	r7, #24
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	000186a0 	.word	0x000186a0
 8000ae0:	08002308 	.word	0x08002308
 8000ae4:	20000224 	.word	0x20000224
 8000ae8:	40006400 	.word	0x40006400
 8000aec:	08002320 	.word	0x08002320

08000af0 <CAN_Receive>:


int CAN_Receive(uint8_t *data, uint8_t *len)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
 8000af8:	6039      	str	r1, [r7, #0]
    // Check if there is a message in FIFO 0
    if (!(CAN1->RF0R & CAN_RF0R_FMP0)) {
 8000afa:	4b16      	ldr	r3, [pc, #88]	@ (8000b54 <CAN_Receive+0x64>)
 8000afc:	68db      	ldr	r3, [r3, #12]
 8000afe:	f003 0303 	and.w	r3, r3, #3
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d102      	bne.n	8000b0c <CAN_Receive+0x1c>
        return -1; // No message available
 8000b06:	f04f 33ff 	mov.w	r3, #4294967295
 8000b0a:	e01e      	b.n	8000b4a <CAN_Receive+0x5a>
    }

    // Get the received message length
    *len = CAN1->sFIFOMailBox[0].RDTR & 0x0F;
 8000b0c:	4b11      	ldr	r3, [pc, #68]	@ (8000b54 <CAN_Receive+0x64>)
 8000b0e:	f8d3 31b4 	ldr.w	r3, [r3, #436]	@ 0x1b4
 8000b12:	b2db      	uxtb	r3, r3
 8000b14:	f003 030f 	and.w	r3, r3, #15
 8000b18:	b2da      	uxtb	r2, r3
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	701a      	strb	r2, [r3, #0]

    // Read the data
    *((uint32_t *)data) = CAN1->sFIFOMailBox[0].RDLR;
 8000b1e:	4b0d      	ldr	r3, [pc, #52]	@ (8000b54 <CAN_Receive+0x64>)
 8000b20:	f8d3 21b8 	ldr.w	r2, [r3, #440]	@ 0x1b8
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	601a      	str	r2, [r3, #0]
    if (*len > 4) {
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	2b04      	cmp	r3, #4
 8000b2e:	d905      	bls.n	8000b3c <CAN_Receive+0x4c>
        *((uint32_t *)(data + 4)) = CAN1->sFIFOMailBox[0].RDHR;
 8000b30:	4a08      	ldr	r2, [pc, #32]	@ (8000b54 <CAN_Receive+0x64>)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	3304      	adds	r3, #4
 8000b36:	f8d2 21bc 	ldr.w	r2, [r2, #444]	@ 0x1bc
 8000b3a:	601a      	str	r2, [r3, #0]
    }

    // Release the FIFO
    CAN1->RF0R |= CAN_RF0R_RFOM0;
 8000b3c:	4b05      	ldr	r3, [pc, #20]	@ (8000b54 <CAN_Receive+0x64>)
 8000b3e:	68db      	ldr	r3, [r3, #12]
 8000b40:	4a04      	ldr	r2, [pc, #16]	@ (8000b54 <CAN_Receive+0x64>)
 8000b42:	f043 0320 	orr.w	r3, r3, #32
 8000b46:	60d3      	str	r3, [r2, #12]

    return 0; // Receive OK
 8000b48:	2300      	movs	r3, #0
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	370c      	adds	r7, #12
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bc80      	pop	{r7}
 8000b52:	4770      	bx	lr
 8000b54:	40006400 	.word	0x40006400

08000b58 <CAN_ErrorHandler>:

void CAN_ErrorHandler(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b092      	sub	sp, #72	@ 0x48
 8000b5c:	af00      	add	r7, sp, #0
    char error_msg[64];

    // Read CAN error status register
    uint32_t esr = CAN1->ESR;
 8000b5e:	4b49      	ldr	r3, [pc, #292]	@ (8000c84 <CAN_ErrorHandler+0x12c>)
 8000b60:	699b      	ldr	r3, [r3, #24]
 8000b62:	647b      	str	r3, [r7, #68]	@ 0x44

    // Check for different error conditions
    if (esr & CAN_ESR_BOFF) {
 8000b64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000b66:	f003 0304 	and.w	r3, r3, #4
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d006      	beq.n	8000b7c <CAN_ErrorHandler+0x24>
        snprintf(error_msg, sizeof(error_msg), "CAN Bus-Off Error\r\n");
 8000b6e:	1d3b      	adds	r3, r7, #4
 8000b70:	4a45      	ldr	r2, [pc, #276]	@ (8000c88 <CAN_ErrorHandler+0x130>)
 8000b72:	2140      	movs	r1, #64	@ 0x40
 8000b74:	4618      	mov	r0, r3
 8000b76:	f000 fe71 	bl	800185c <sniprintf>
 8000b7a:	e073      	b.n	8000c64 <CAN_ErrorHandler+0x10c>
    } else if (esr & CAN_ESR_EPVF) {
 8000b7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000b7e:	f003 0302 	and.w	r3, r3, #2
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d006      	beq.n	8000b94 <CAN_ErrorHandler+0x3c>
        snprintf(error_msg, sizeof(error_msg), "CAN Error Passive\r\n");
 8000b86:	1d3b      	adds	r3, r7, #4
 8000b88:	4a40      	ldr	r2, [pc, #256]	@ (8000c8c <CAN_ErrorHandler+0x134>)
 8000b8a:	2140      	movs	r1, #64	@ 0x40
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f000 fe65 	bl	800185c <sniprintf>
 8000b92:	e067      	b.n	8000c64 <CAN_ErrorHandler+0x10c>
    } else if (esr & CAN_ESR_EWGF) {
 8000b94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000b96:	f003 0301 	and.w	r3, r3, #1
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d006      	beq.n	8000bac <CAN_ErrorHandler+0x54>
        snprintf(error_msg, sizeof(error_msg), "CAN Error Warning\r\n");
 8000b9e:	1d3b      	adds	r3, r7, #4
 8000ba0:	4a3b      	ldr	r2, [pc, #236]	@ (8000c90 <CAN_ErrorHandler+0x138>)
 8000ba2:	2140      	movs	r1, #64	@ 0x40
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f000 fe59 	bl	800185c <sniprintf>
 8000baa:	e05b      	b.n	8000c64 <CAN_ErrorHandler+0x10c>
    } else if (esr & CAN_ESR_LEC) {
 8000bac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000bae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d050      	beq.n	8000c58 <CAN_ErrorHandler+0x100>
        // Last Error Code (LEC) interpretation
        switch ((esr >> 4) & 0x07) {
 8000bb6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000bb8:	091b      	lsrs	r3, r3, #4
 8000bba:	f003 0307 	and.w	r3, r3, #7
 8000bbe:	3b01      	subs	r3, #1
 8000bc0:	2b06      	cmp	r3, #6
 8000bc2:	d842      	bhi.n	8000c4a <CAN_ErrorHandler+0xf2>
 8000bc4:	a201      	add	r2, pc, #4	@ (adr r2, 8000bcc <CAN_ErrorHandler+0x74>)
 8000bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bca:	bf00      	nop
 8000bcc:	08000be9 	.word	0x08000be9
 8000bd0:	08000bf7 	.word	0x08000bf7
 8000bd4:	08000c05 	.word	0x08000c05
 8000bd8:	08000c13 	.word	0x08000c13
 8000bdc:	08000c21 	.word	0x08000c21
 8000be0:	08000c2f 	.word	0x08000c2f
 8000be4:	08000c3d 	.word	0x08000c3d
            case 0x01: snprintf(error_msg, sizeof(error_msg), "CAN Stuff Error\r\n"); break;
 8000be8:	1d3b      	adds	r3, r7, #4
 8000bea:	4a2a      	ldr	r2, [pc, #168]	@ (8000c94 <CAN_ErrorHandler+0x13c>)
 8000bec:	2140      	movs	r1, #64	@ 0x40
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f000 fe34 	bl	800185c <sniprintf>
 8000bf4:	e036      	b.n	8000c64 <CAN_ErrorHandler+0x10c>
            case 0x02: snprintf(error_msg, sizeof(error_msg), "CAN Form Error\r\n"); break;
 8000bf6:	1d3b      	adds	r3, r7, #4
 8000bf8:	4a27      	ldr	r2, [pc, #156]	@ (8000c98 <CAN_ErrorHandler+0x140>)
 8000bfa:	2140      	movs	r1, #64	@ 0x40
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f000 fe2d 	bl	800185c <sniprintf>
 8000c02:	e02f      	b.n	8000c64 <CAN_ErrorHandler+0x10c>
            case 0x03: snprintf(error_msg, sizeof(error_msg), "CAN Acknowledge Error\r\n"); break;
 8000c04:	1d3b      	adds	r3, r7, #4
 8000c06:	4a25      	ldr	r2, [pc, #148]	@ (8000c9c <CAN_ErrorHandler+0x144>)
 8000c08:	2140      	movs	r1, #64	@ 0x40
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f000 fe26 	bl	800185c <sniprintf>
 8000c10:	e028      	b.n	8000c64 <CAN_ErrorHandler+0x10c>
            case 0x04: snprintf(error_msg, sizeof(error_msg), "CAN Bit recessive Error\r\n"); break;
 8000c12:	1d3b      	adds	r3, r7, #4
 8000c14:	4a22      	ldr	r2, [pc, #136]	@ (8000ca0 <CAN_ErrorHandler+0x148>)
 8000c16:	2140      	movs	r1, #64	@ 0x40
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f000 fe1f 	bl	800185c <sniprintf>
 8000c1e:	e021      	b.n	8000c64 <CAN_ErrorHandler+0x10c>
            case 0x05: snprintf(error_msg, sizeof(error_msg), "CAN Bit dominant Error\r\n"); break;
 8000c20:	1d3b      	adds	r3, r7, #4
 8000c22:	4a20      	ldr	r2, [pc, #128]	@ (8000ca4 <CAN_ErrorHandler+0x14c>)
 8000c24:	2140      	movs	r1, #64	@ 0x40
 8000c26:	4618      	mov	r0, r3
 8000c28:	f000 fe18 	bl	800185c <sniprintf>
 8000c2c:	e01a      	b.n	8000c64 <CAN_ErrorHandler+0x10c>
            case 0x06: snprintf(error_msg, sizeof(error_msg), "CAN CRC Error\r\n"); break;
 8000c2e:	1d3b      	adds	r3, r7, #4
 8000c30:	4a1d      	ldr	r2, [pc, #116]	@ (8000ca8 <CAN_ErrorHandler+0x150>)
 8000c32:	2140      	movs	r1, #64	@ 0x40
 8000c34:	4618      	mov	r0, r3
 8000c36:	f000 fe11 	bl	800185c <sniprintf>
 8000c3a:	e013      	b.n	8000c64 <CAN_ErrorHandler+0x10c>
            case 0x07: snprintf(error_msg, sizeof(error_msg), "CAN Set by software\r\n"); break;
 8000c3c:	1d3b      	adds	r3, r7, #4
 8000c3e:	4a1b      	ldr	r2, [pc, #108]	@ (8000cac <CAN_ErrorHandler+0x154>)
 8000c40:	2140      	movs	r1, #64	@ 0x40
 8000c42:	4618      	mov	r0, r3
 8000c44:	f000 fe0a 	bl	800185c <sniprintf>
 8000c48:	e00c      	b.n	8000c64 <CAN_ErrorHandler+0x10c>
            default: snprintf(error_msg, sizeof(error_msg), "Unknown CAN Error\r\n"); break;
 8000c4a:	1d3b      	adds	r3, r7, #4
 8000c4c:	4a18      	ldr	r2, [pc, #96]	@ (8000cb0 <CAN_ErrorHandler+0x158>)
 8000c4e:	2140      	movs	r1, #64	@ 0x40
 8000c50:	4618      	mov	r0, r3
 8000c52:	f000 fe03 	bl	800185c <sniprintf>
 8000c56:	e005      	b.n	8000c64 <CAN_ErrorHandler+0x10c>
        }
    } else {
        snprintf(error_msg, sizeof(error_msg), "No CAN Error Detected\r\n");
 8000c58:	1d3b      	adds	r3, r7, #4
 8000c5a:	4a16      	ldr	r2, [pc, #88]	@ (8000cb4 <CAN_ErrorHandler+0x15c>)
 8000c5c:	2140      	movs	r1, #64	@ 0x40
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f000 fdfc 	bl	800185c <sniprintf>
    }

    // Send error message via UART
    UART_Send((uint8_t*)error_msg, strlen(error_msg));
 8000c64:	1d3b      	adds	r3, r7, #4
 8000c66:	4618      	mov	r0, r3
 8000c68:	f7ff fa70 	bl	800014c <strlen>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	b29a      	uxth	r2, r3
 8000c70:	1d3b      	adds	r3, r7, #4
 8000c72:	4611      	mov	r1, r2
 8000c74:	4618      	mov	r0, r3
 8000c76:	f7ff fd19 	bl	80006ac <UART_Send>
}
 8000c7a:	bf00      	nop
 8000c7c:	3748      	adds	r7, #72	@ 0x48
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40006400 	.word	0x40006400
 8000c88:	08002340 	.word	0x08002340
 8000c8c:	08002354 	.word	0x08002354
 8000c90:	08002368 	.word	0x08002368
 8000c94:	0800237c 	.word	0x0800237c
 8000c98:	08002390 	.word	0x08002390
 8000c9c:	080023a4 	.word	0x080023a4
 8000ca0:	080023bc 	.word	0x080023bc
 8000ca4:	080023d8 	.word	0x080023d8
 8000ca8:	080023f4 	.word	0x080023f4
 8000cac:	08002404 	.word	0x08002404
 8000cb0:	0800241c 	.word	0x0800241c
 8000cb4:	08002430 	.word	0x08002430

08000cb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cbc:	b672      	cpsid	i
}
 8000cbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cc0:	bf00      	nop
 8000cc2:	e7fd      	b.n	8000cc0 <Error_Handler+0x8>

08000cc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b085      	sub	sp, #20
 8000cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000cca:	4b15      	ldr	r3, [pc, #84]	@ (8000d20 <HAL_MspInit+0x5c>)
 8000ccc:	699b      	ldr	r3, [r3, #24]
 8000cce:	4a14      	ldr	r2, [pc, #80]	@ (8000d20 <HAL_MspInit+0x5c>)
 8000cd0:	f043 0301 	orr.w	r3, r3, #1
 8000cd4:	6193      	str	r3, [r2, #24]
 8000cd6:	4b12      	ldr	r3, [pc, #72]	@ (8000d20 <HAL_MspInit+0x5c>)
 8000cd8:	699b      	ldr	r3, [r3, #24]
 8000cda:	f003 0301 	and.w	r3, r3, #1
 8000cde:	60bb      	str	r3, [r7, #8]
 8000ce0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ce2:	4b0f      	ldr	r3, [pc, #60]	@ (8000d20 <HAL_MspInit+0x5c>)
 8000ce4:	69db      	ldr	r3, [r3, #28]
 8000ce6:	4a0e      	ldr	r2, [pc, #56]	@ (8000d20 <HAL_MspInit+0x5c>)
 8000ce8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cec:	61d3      	str	r3, [r2, #28]
 8000cee:	4b0c      	ldr	r3, [pc, #48]	@ (8000d20 <HAL_MspInit+0x5c>)
 8000cf0:	69db      	ldr	r3, [r3, #28]
 8000cf2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cf6:	607b      	str	r3, [r7, #4]
 8000cf8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000cfa:	4b0a      	ldr	r3, [pc, #40]	@ (8000d24 <HAL_MspInit+0x60>)
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	60fb      	str	r3, [r7, #12]
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000d06:	60fb      	str	r3, [r7, #12]
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000d0e:	60fb      	str	r3, [r7, #12]
 8000d10:	4a04      	ldr	r2, [pc, #16]	@ (8000d24 <HAL_MspInit+0x60>)
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d16:	bf00      	nop
 8000d18:	3714      	adds	r7, #20
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bc80      	pop	{r7}
 8000d1e:	4770      	bx	lr
 8000d20:	40021000 	.word	0x40021000
 8000d24:	40010000 	.word	0x40010000

08000d28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d2c:	bf00      	nop
 8000d2e:	e7fd      	b.n	8000d2c <NMI_Handler+0x4>

08000d30 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d34:	bf00      	nop
 8000d36:	e7fd      	b.n	8000d34 <HardFault_Handler+0x4>

08000d38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d3c:	bf00      	nop
 8000d3e:	e7fd      	b.n	8000d3c <MemManage_Handler+0x4>

08000d40 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d44:	bf00      	nop
 8000d46:	e7fd      	b.n	8000d44 <BusFault_Handler+0x4>

08000d48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d4c:	bf00      	nop
 8000d4e:	e7fd      	b.n	8000d4c <UsageFault_Handler+0x4>

08000d50 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d54:	bf00      	nop
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bc80      	pop	{r7}
 8000d5a:	4770      	bx	lr

08000d5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d60:	bf00      	nop
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bc80      	pop	{r7}
 8000d66:	4770      	bx	lr

08000d68 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d6c:	bf00      	nop
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bc80      	pop	{r7}
 8000d72:	4770      	bx	lr

08000d74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b086      	sub	sp, #24
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d7c:	4a14      	ldr	r2, [pc, #80]	@ (8000dd0 <_sbrk+0x5c>)
 8000d7e:	4b15      	ldr	r3, [pc, #84]	@ (8000dd4 <_sbrk+0x60>)
 8000d80:	1ad3      	subs	r3, r2, r3
 8000d82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d88:	4b13      	ldr	r3, [pc, #76]	@ (8000dd8 <_sbrk+0x64>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d102      	bne.n	8000d96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d90:	4b11      	ldr	r3, [pc, #68]	@ (8000dd8 <_sbrk+0x64>)
 8000d92:	4a12      	ldr	r2, [pc, #72]	@ (8000ddc <_sbrk+0x68>)
 8000d94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d96:	4b10      	ldr	r3, [pc, #64]	@ (8000dd8 <_sbrk+0x64>)
 8000d98:	681a      	ldr	r2, [r3, #0]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4413      	add	r3, r2
 8000d9e:	693a      	ldr	r2, [r7, #16]
 8000da0:	429a      	cmp	r2, r3
 8000da2:	d207      	bcs.n	8000db4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000da4:	f000 fd96 	bl	80018d4 <__errno>
 8000da8:	4603      	mov	r3, r0
 8000daa:	220c      	movs	r2, #12
 8000dac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dae:	f04f 33ff 	mov.w	r3, #4294967295
 8000db2:	e009      	b.n	8000dc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000db4:	4b08      	ldr	r3, [pc, #32]	@ (8000dd8 <_sbrk+0x64>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dba:	4b07      	ldr	r3, [pc, #28]	@ (8000dd8 <_sbrk+0x64>)
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	4413      	add	r3, r2
 8000dc2:	4a05      	ldr	r2, [pc, #20]	@ (8000dd8 <_sbrk+0x64>)
 8000dc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dc6:	68fb      	ldr	r3, [r7, #12]
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3718      	adds	r7, #24
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	20005000 	.word	0x20005000
 8000dd4:	00000400 	.word	0x00000400
 8000dd8:	200002a4 	.word	0x200002a4
 8000ddc:	200003f8 	.word	0x200003f8

08000de0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000de4:	bf00      	nop
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bc80      	pop	{r7}
 8000dea:	4770      	bx	lr

08000dec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000dec:	f7ff fff8 	bl	8000de0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000df0:	480b      	ldr	r0, [pc, #44]	@ (8000e20 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000df2:	490c      	ldr	r1, [pc, #48]	@ (8000e24 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000df4:	4a0c      	ldr	r2, [pc, #48]	@ (8000e28 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000df6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000df8:	e002      	b.n	8000e00 <LoopCopyDataInit>

08000dfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dfe:	3304      	adds	r3, #4

08000e00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e04:	d3f9      	bcc.n	8000dfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e06:	4a09      	ldr	r2, [pc, #36]	@ (8000e2c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000e08:	4c09      	ldr	r4, [pc, #36]	@ (8000e30 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e0c:	e001      	b.n	8000e12 <LoopFillZerobss>

08000e0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e10:	3204      	adds	r2, #4

08000e12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e14:	d3fb      	bcc.n	8000e0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e16:	f000 fd63 	bl	80018e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e1a:	f7ff f9e5 	bl	80001e8 <main>
  bx lr
 8000e1e:	4770      	bx	lr
  ldr r0, =_sdata
 8000e20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e24:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000e28:	080024b0 	.word	0x080024b0
  ldr r2, =_sbss
 8000e2c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000e30:	200003f4 	.word	0x200003f4

08000e34 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e34:	e7fe      	b.n	8000e34 <ADC1_2_IRQHandler>
	...

08000e38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e3c:	4b08      	ldr	r3, [pc, #32]	@ (8000e60 <HAL_Init+0x28>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a07      	ldr	r2, [pc, #28]	@ (8000e60 <HAL_Init+0x28>)
 8000e42:	f043 0310 	orr.w	r3, r3, #16
 8000e46:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e48:	2003      	movs	r0, #3
 8000e4a:	f000 f8f5 	bl	8001038 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e4e:	200f      	movs	r0, #15
 8000e50:	f000 f808 	bl	8000e64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e54:	f7ff ff36 	bl	8000cc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e58:	2300      	movs	r3, #0
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	40022000 	.word	0x40022000

08000e64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e6c:	4b12      	ldr	r3, [pc, #72]	@ (8000eb8 <HAL_InitTick+0x54>)
 8000e6e:	681a      	ldr	r2, [r3, #0]
 8000e70:	4b12      	ldr	r3, [pc, #72]	@ (8000ebc <HAL_InitTick+0x58>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	4619      	mov	r1, r3
 8000e76:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e82:	4618      	mov	r0, r3
 8000e84:	f000 f8ff 	bl	8001086 <HAL_SYSTICK_Config>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	e00e      	b.n	8000eb0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2b0f      	cmp	r3, #15
 8000e96:	d80a      	bhi.n	8000eae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e98:	2200      	movs	r2, #0
 8000e9a:	6879      	ldr	r1, [r7, #4]
 8000e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ea0:	f000 f8d5 	bl	800104e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ea4:	4a06      	ldr	r2, [pc, #24]	@ (8000ec0 <HAL_InitTick+0x5c>)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	e000      	b.n	8000eb0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eae:	2301      	movs	r3, #1
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	3708      	adds	r7, #8
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	20000000 	.word	0x20000000
 8000ebc:	20000008 	.word	0x20000008
 8000ec0:	20000004 	.word	0x20000004

08000ec4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ec8:	4b02      	ldr	r3, [pc, #8]	@ (8000ed4 <HAL_GetTick+0x10>)
 8000eca:	681b      	ldr	r3, [r3, #0]
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bc80      	pop	{r7}
 8000ed2:	4770      	bx	lr
 8000ed4:	200002a8 	.word	0x200002a8

08000ed8 <__NVIC_SetPriorityGrouping>:
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b085      	sub	sp, #20
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	f003 0307 	and.w	r3, r3, #7
 8000ee6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ee8:	4b0c      	ldr	r3, [pc, #48]	@ (8000f1c <__NVIC_SetPriorityGrouping+0x44>)
 8000eea:	68db      	ldr	r3, [r3, #12]
 8000eec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eee:	68ba      	ldr	r2, [r7, #8]
 8000ef0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f00:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f0a:	4a04      	ldr	r2, [pc, #16]	@ (8000f1c <__NVIC_SetPriorityGrouping+0x44>)
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	60d3      	str	r3, [r2, #12]
}
 8000f10:	bf00      	nop
 8000f12:	3714      	adds	r7, #20
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bc80      	pop	{r7}
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	e000ed00 	.word	0xe000ed00

08000f20 <__NVIC_GetPriorityGrouping>:
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f24:	4b04      	ldr	r3, [pc, #16]	@ (8000f38 <__NVIC_GetPriorityGrouping+0x18>)
 8000f26:	68db      	ldr	r3, [r3, #12]
 8000f28:	0a1b      	lsrs	r3, r3, #8
 8000f2a:	f003 0307 	and.w	r3, r3, #7
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bc80      	pop	{r7}
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	e000ed00 	.word	0xe000ed00

08000f3c <__NVIC_SetPriority>:
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4603      	mov	r3, r0
 8000f44:	6039      	str	r1, [r7, #0]
 8000f46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	db0a      	blt.n	8000f66 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	b2da      	uxtb	r2, r3
 8000f54:	490c      	ldr	r1, [pc, #48]	@ (8000f88 <__NVIC_SetPriority+0x4c>)
 8000f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5a:	0112      	lsls	r2, r2, #4
 8000f5c:	b2d2      	uxtb	r2, r2
 8000f5e:	440b      	add	r3, r1
 8000f60:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000f64:	e00a      	b.n	8000f7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	b2da      	uxtb	r2, r3
 8000f6a:	4908      	ldr	r1, [pc, #32]	@ (8000f8c <__NVIC_SetPriority+0x50>)
 8000f6c:	79fb      	ldrb	r3, [r7, #7]
 8000f6e:	f003 030f 	and.w	r3, r3, #15
 8000f72:	3b04      	subs	r3, #4
 8000f74:	0112      	lsls	r2, r2, #4
 8000f76:	b2d2      	uxtb	r2, r2
 8000f78:	440b      	add	r3, r1
 8000f7a:	761a      	strb	r2, [r3, #24]
}
 8000f7c:	bf00      	nop
 8000f7e:	370c      	adds	r7, #12
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bc80      	pop	{r7}
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	e000e100 	.word	0xe000e100
 8000f8c:	e000ed00 	.word	0xe000ed00

08000f90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b089      	sub	sp, #36	@ 0x24
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	60f8      	str	r0, [r7, #12]
 8000f98:	60b9      	str	r1, [r7, #8]
 8000f9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	f003 0307 	and.w	r3, r3, #7
 8000fa2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	f1c3 0307 	rsb	r3, r3, #7
 8000faa:	2b04      	cmp	r3, #4
 8000fac:	bf28      	it	cs
 8000fae:	2304      	movcs	r3, #4
 8000fb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	3304      	adds	r3, #4
 8000fb6:	2b06      	cmp	r3, #6
 8000fb8:	d902      	bls.n	8000fc0 <NVIC_EncodePriority+0x30>
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	3b03      	subs	r3, #3
 8000fbe:	e000      	b.n	8000fc2 <NVIC_EncodePriority+0x32>
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc4:	f04f 32ff 	mov.w	r2, #4294967295
 8000fc8:	69bb      	ldr	r3, [r7, #24]
 8000fca:	fa02 f303 	lsl.w	r3, r2, r3
 8000fce:	43da      	mvns	r2, r3
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	401a      	ands	r2, r3
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fd8:	f04f 31ff 	mov.w	r1, #4294967295
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe2:	43d9      	mvns	r1, r3
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe8:	4313      	orrs	r3, r2
         );
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3724      	adds	r7, #36	@ 0x24
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bc80      	pop	{r7}
 8000ff2:	4770      	bx	lr

08000ff4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	3b01      	subs	r3, #1
 8001000:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001004:	d301      	bcc.n	800100a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001006:	2301      	movs	r3, #1
 8001008:	e00f      	b.n	800102a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800100a:	4a0a      	ldr	r2, [pc, #40]	@ (8001034 <SysTick_Config+0x40>)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	3b01      	subs	r3, #1
 8001010:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001012:	210f      	movs	r1, #15
 8001014:	f04f 30ff 	mov.w	r0, #4294967295
 8001018:	f7ff ff90 	bl	8000f3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800101c:	4b05      	ldr	r3, [pc, #20]	@ (8001034 <SysTick_Config+0x40>)
 800101e:	2200      	movs	r2, #0
 8001020:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001022:	4b04      	ldr	r3, [pc, #16]	@ (8001034 <SysTick_Config+0x40>)
 8001024:	2207      	movs	r2, #7
 8001026:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001028:	2300      	movs	r3, #0
}
 800102a:	4618      	mov	r0, r3
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	e000e010 	.word	0xe000e010

08001038 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001040:	6878      	ldr	r0, [r7, #4]
 8001042:	f7ff ff49 	bl	8000ed8 <__NVIC_SetPriorityGrouping>
}
 8001046:	bf00      	nop
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}

0800104e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800104e:	b580      	push	{r7, lr}
 8001050:	b086      	sub	sp, #24
 8001052:	af00      	add	r7, sp, #0
 8001054:	4603      	mov	r3, r0
 8001056:	60b9      	str	r1, [r7, #8]
 8001058:	607a      	str	r2, [r7, #4]
 800105a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800105c:	2300      	movs	r3, #0
 800105e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001060:	f7ff ff5e 	bl	8000f20 <__NVIC_GetPriorityGrouping>
 8001064:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001066:	687a      	ldr	r2, [r7, #4]
 8001068:	68b9      	ldr	r1, [r7, #8]
 800106a:	6978      	ldr	r0, [r7, #20]
 800106c:	f7ff ff90 	bl	8000f90 <NVIC_EncodePriority>
 8001070:	4602      	mov	r2, r0
 8001072:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001076:	4611      	mov	r1, r2
 8001078:	4618      	mov	r0, r3
 800107a:	f7ff ff5f 	bl	8000f3c <__NVIC_SetPriority>
}
 800107e:	bf00      	nop
 8001080:	3718      	adds	r7, #24
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}

08001086 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001086:	b580      	push	{r7, lr}
 8001088:	b082      	sub	sp, #8
 800108a:	af00      	add	r7, sp, #0
 800108c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	f7ff ffb0 	bl	8000ff4 <SysTick_Config>
 8001094:	4603      	mov	r3, r0
}
 8001096:	4618      	mov	r0, r3
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
	...

080010a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b086      	sub	sp, #24
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d101      	bne.n	80010b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010ae:	2301      	movs	r3, #1
 80010b0:	e272      	b.n	8001598 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f003 0301 	and.w	r3, r3, #1
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	f000 8087 	beq.w	80011ce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80010c0:	4b92      	ldr	r3, [pc, #584]	@ (800130c <HAL_RCC_OscConfig+0x26c>)
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f003 030c 	and.w	r3, r3, #12
 80010c8:	2b04      	cmp	r3, #4
 80010ca:	d00c      	beq.n	80010e6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80010cc:	4b8f      	ldr	r3, [pc, #572]	@ (800130c <HAL_RCC_OscConfig+0x26c>)
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f003 030c 	and.w	r3, r3, #12
 80010d4:	2b08      	cmp	r3, #8
 80010d6:	d112      	bne.n	80010fe <HAL_RCC_OscConfig+0x5e>
 80010d8:	4b8c      	ldr	r3, [pc, #560]	@ (800130c <HAL_RCC_OscConfig+0x26c>)
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80010e4:	d10b      	bne.n	80010fe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010e6:	4b89      	ldr	r3, [pc, #548]	@ (800130c <HAL_RCC_OscConfig+0x26c>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d06c      	beq.n	80011cc <HAL_RCC_OscConfig+0x12c>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d168      	bne.n	80011cc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
 80010fc:	e24c      	b.n	8001598 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001106:	d106      	bne.n	8001116 <HAL_RCC_OscConfig+0x76>
 8001108:	4b80      	ldr	r3, [pc, #512]	@ (800130c <HAL_RCC_OscConfig+0x26c>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a7f      	ldr	r2, [pc, #508]	@ (800130c <HAL_RCC_OscConfig+0x26c>)
 800110e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001112:	6013      	str	r3, [r2, #0]
 8001114:	e02e      	b.n	8001174 <HAL_RCC_OscConfig+0xd4>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d10c      	bne.n	8001138 <HAL_RCC_OscConfig+0x98>
 800111e:	4b7b      	ldr	r3, [pc, #492]	@ (800130c <HAL_RCC_OscConfig+0x26c>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4a7a      	ldr	r2, [pc, #488]	@ (800130c <HAL_RCC_OscConfig+0x26c>)
 8001124:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001128:	6013      	str	r3, [r2, #0]
 800112a:	4b78      	ldr	r3, [pc, #480]	@ (800130c <HAL_RCC_OscConfig+0x26c>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4a77      	ldr	r2, [pc, #476]	@ (800130c <HAL_RCC_OscConfig+0x26c>)
 8001130:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001134:	6013      	str	r3, [r2, #0]
 8001136:	e01d      	b.n	8001174 <HAL_RCC_OscConfig+0xd4>
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001140:	d10c      	bne.n	800115c <HAL_RCC_OscConfig+0xbc>
 8001142:	4b72      	ldr	r3, [pc, #456]	@ (800130c <HAL_RCC_OscConfig+0x26c>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4a71      	ldr	r2, [pc, #452]	@ (800130c <HAL_RCC_OscConfig+0x26c>)
 8001148:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800114c:	6013      	str	r3, [r2, #0]
 800114e:	4b6f      	ldr	r3, [pc, #444]	@ (800130c <HAL_RCC_OscConfig+0x26c>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a6e      	ldr	r2, [pc, #440]	@ (800130c <HAL_RCC_OscConfig+0x26c>)
 8001154:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001158:	6013      	str	r3, [r2, #0]
 800115a:	e00b      	b.n	8001174 <HAL_RCC_OscConfig+0xd4>
 800115c:	4b6b      	ldr	r3, [pc, #428]	@ (800130c <HAL_RCC_OscConfig+0x26c>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a6a      	ldr	r2, [pc, #424]	@ (800130c <HAL_RCC_OscConfig+0x26c>)
 8001162:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001166:	6013      	str	r3, [r2, #0]
 8001168:	4b68      	ldr	r3, [pc, #416]	@ (800130c <HAL_RCC_OscConfig+0x26c>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a67      	ldr	r2, [pc, #412]	@ (800130c <HAL_RCC_OscConfig+0x26c>)
 800116e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001172:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d013      	beq.n	80011a4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800117c:	f7ff fea2 	bl	8000ec4 <HAL_GetTick>
 8001180:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001182:	e008      	b.n	8001196 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001184:	f7ff fe9e 	bl	8000ec4 <HAL_GetTick>
 8001188:	4602      	mov	r2, r0
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	2b64      	cmp	r3, #100	@ 0x64
 8001190:	d901      	bls.n	8001196 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001192:	2303      	movs	r3, #3
 8001194:	e200      	b.n	8001598 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001196:	4b5d      	ldr	r3, [pc, #372]	@ (800130c <HAL_RCC_OscConfig+0x26c>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d0f0      	beq.n	8001184 <HAL_RCC_OscConfig+0xe4>
 80011a2:	e014      	b.n	80011ce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011a4:	f7ff fe8e 	bl	8000ec4 <HAL_GetTick>
 80011a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011aa:	e008      	b.n	80011be <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011ac:	f7ff fe8a 	bl	8000ec4 <HAL_GetTick>
 80011b0:	4602      	mov	r2, r0
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	2b64      	cmp	r3, #100	@ 0x64
 80011b8:	d901      	bls.n	80011be <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80011ba:	2303      	movs	r3, #3
 80011bc:	e1ec      	b.n	8001598 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011be:	4b53      	ldr	r3, [pc, #332]	@ (800130c <HAL_RCC_OscConfig+0x26c>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d1f0      	bne.n	80011ac <HAL_RCC_OscConfig+0x10c>
 80011ca:	e000      	b.n	80011ce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f003 0302 	and.w	r3, r3, #2
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d063      	beq.n	80012a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80011da:	4b4c      	ldr	r3, [pc, #304]	@ (800130c <HAL_RCC_OscConfig+0x26c>)
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	f003 030c 	and.w	r3, r3, #12
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d00b      	beq.n	80011fe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80011e6:	4b49      	ldr	r3, [pc, #292]	@ (800130c <HAL_RCC_OscConfig+0x26c>)
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f003 030c 	and.w	r3, r3, #12
 80011ee:	2b08      	cmp	r3, #8
 80011f0:	d11c      	bne.n	800122c <HAL_RCC_OscConfig+0x18c>
 80011f2:	4b46      	ldr	r3, [pc, #280]	@ (800130c <HAL_RCC_OscConfig+0x26c>)
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d116      	bne.n	800122c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011fe:	4b43      	ldr	r3, [pc, #268]	@ (800130c <HAL_RCC_OscConfig+0x26c>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f003 0302 	and.w	r3, r3, #2
 8001206:	2b00      	cmp	r3, #0
 8001208:	d005      	beq.n	8001216 <HAL_RCC_OscConfig+0x176>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	691b      	ldr	r3, [r3, #16]
 800120e:	2b01      	cmp	r3, #1
 8001210:	d001      	beq.n	8001216 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	e1c0      	b.n	8001598 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001216:	4b3d      	ldr	r3, [pc, #244]	@ (800130c <HAL_RCC_OscConfig+0x26c>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	695b      	ldr	r3, [r3, #20]
 8001222:	00db      	lsls	r3, r3, #3
 8001224:	4939      	ldr	r1, [pc, #228]	@ (800130c <HAL_RCC_OscConfig+0x26c>)
 8001226:	4313      	orrs	r3, r2
 8001228:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800122a:	e03a      	b.n	80012a2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	691b      	ldr	r3, [r3, #16]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d020      	beq.n	8001276 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001234:	4b36      	ldr	r3, [pc, #216]	@ (8001310 <HAL_RCC_OscConfig+0x270>)
 8001236:	2201      	movs	r2, #1
 8001238:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800123a:	f7ff fe43 	bl	8000ec4 <HAL_GetTick>
 800123e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001240:	e008      	b.n	8001254 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001242:	f7ff fe3f 	bl	8000ec4 <HAL_GetTick>
 8001246:	4602      	mov	r2, r0
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	1ad3      	subs	r3, r2, r3
 800124c:	2b02      	cmp	r3, #2
 800124e:	d901      	bls.n	8001254 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001250:	2303      	movs	r3, #3
 8001252:	e1a1      	b.n	8001598 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001254:	4b2d      	ldr	r3, [pc, #180]	@ (800130c <HAL_RCC_OscConfig+0x26c>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f003 0302 	and.w	r3, r3, #2
 800125c:	2b00      	cmp	r3, #0
 800125e:	d0f0      	beq.n	8001242 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001260:	4b2a      	ldr	r3, [pc, #168]	@ (800130c <HAL_RCC_OscConfig+0x26c>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	695b      	ldr	r3, [r3, #20]
 800126c:	00db      	lsls	r3, r3, #3
 800126e:	4927      	ldr	r1, [pc, #156]	@ (800130c <HAL_RCC_OscConfig+0x26c>)
 8001270:	4313      	orrs	r3, r2
 8001272:	600b      	str	r3, [r1, #0]
 8001274:	e015      	b.n	80012a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001276:	4b26      	ldr	r3, [pc, #152]	@ (8001310 <HAL_RCC_OscConfig+0x270>)
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800127c:	f7ff fe22 	bl	8000ec4 <HAL_GetTick>
 8001280:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001282:	e008      	b.n	8001296 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001284:	f7ff fe1e 	bl	8000ec4 <HAL_GetTick>
 8001288:	4602      	mov	r2, r0
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	2b02      	cmp	r3, #2
 8001290:	d901      	bls.n	8001296 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001292:	2303      	movs	r3, #3
 8001294:	e180      	b.n	8001598 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001296:	4b1d      	ldr	r3, [pc, #116]	@ (800130c <HAL_RCC_OscConfig+0x26c>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f003 0302 	and.w	r3, r3, #2
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d1f0      	bne.n	8001284 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f003 0308 	and.w	r3, r3, #8
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d03a      	beq.n	8001324 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	699b      	ldr	r3, [r3, #24]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d019      	beq.n	80012ea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012b6:	4b17      	ldr	r3, [pc, #92]	@ (8001314 <HAL_RCC_OscConfig+0x274>)
 80012b8:	2201      	movs	r2, #1
 80012ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012bc:	f7ff fe02 	bl	8000ec4 <HAL_GetTick>
 80012c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012c2:	e008      	b.n	80012d6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012c4:	f7ff fdfe 	bl	8000ec4 <HAL_GetTick>
 80012c8:	4602      	mov	r2, r0
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	2b02      	cmp	r3, #2
 80012d0:	d901      	bls.n	80012d6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80012d2:	2303      	movs	r3, #3
 80012d4:	e160      	b.n	8001598 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012d6:	4b0d      	ldr	r3, [pc, #52]	@ (800130c <HAL_RCC_OscConfig+0x26c>)
 80012d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012da:	f003 0302 	and.w	r3, r3, #2
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d0f0      	beq.n	80012c4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80012e2:	2001      	movs	r0, #1
 80012e4:	f000 fa9c 	bl	8001820 <RCC_Delay>
 80012e8:	e01c      	b.n	8001324 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001314 <HAL_RCC_OscConfig+0x274>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012f0:	f7ff fde8 	bl	8000ec4 <HAL_GetTick>
 80012f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012f6:	e00f      	b.n	8001318 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012f8:	f7ff fde4 	bl	8000ec4 <HAL_GetTick>
 80012fc:	4602      	mov	r2, r0
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	2b02      	cmp	r3, #2
 8001304:	d908      	bls.n	8001318 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001306:	2303      	movs	r3, #3
 8001308:	e146      	b.n	8001598 <HAL_RCC_OscConfig+0x4f8>
 800130a:	bf00      	nop
 800130c:	40021000 	.word	0x40021000
 8001310:	42420000 	.word	0x42420000
 8001314:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001318:	4b92      	ldr	r3, [pc, #584]	@ (8001564 <HAL_RCC_OscConfig+0x4c4>)
 800131a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800131c:	f003 0302 	and.w	r3, r3, #2
 8001320:	2b00      	cmp	r3, #0
 8001322:	d1e9      	bne.n	80012f8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f003 0304 	and.w	r3, r3, #4
 800132c:	2b00      	cmp	r3, #0
 800132e:	f000 80a6 	beq.w	800147e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001332:	2300      	movs	r3, #0
 8001334:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001336:	4b8b      	ldr	r3, [pc, #556]	@ (8001564 <HAL_RCC_OscConfig+0x4c4>)
 8001338:	69db      	ldr	r3, [r3, #28]
 800133a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800133e:	2b00      	cmp	r3, #0
 8001340:	d10d      	bne.n	800135e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001342:	4b88      	ldr	r3, [pc, #544]	@ (8001564 <HAL_RCC_OscConfig+0x4c4>)
 8001344:	69db      	ldr	r3, [r3, #28]
 8001346:	4a87      	ldr	r2, [pc, #540]	@ (8001564 <HAL_RCC_OscConfig+0x4c4>)
 8001348:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800134c:	61d3      	str	r3, [r2, #28]
 800134e:	4b85      	ldr	r3, [pc, #532]	@ (8001564 <HAL_RCC_OscConfig+0x4c4>)
 8001350:	69db      	ldr	r3, [r3, #28]
 8001352:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001356:	60bb      	str	r3, [r7, #8]
 8001358:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800135a:	2301      	movs	r3, #1
 800135c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800135e:	4b82      	ldr	r3, [pc, #520]	@ (8001568 <HAL_RCC_OscConfig+0x4c8>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001366:	2b00      	cmp	r3, #0
 8001368:	d118      	bne.n	800139c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800136a:	4b7f      	ldr	r3, [pc, #508]	@ (8001568 <HAL_RCC_OscConfig+0x4c8>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a7e      	ldr	r2, [pc, #504]	@ (8001568 <HAL_RCC_OscConfig+0x4c8>)
 8001370:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001374:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001376:	f7ff fda5 	bl	8000ec4 <HAL_GetTick>
 800137a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800137c:	e008      	b.n	8001390 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800137e:	f7ff fda1 	bl	8000ec4 <HAL_GetTick>
 8001382:	4602      	mov	r2, r0
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	1ad3      	subs	r3, r2, r3
 8001388:	2b64      	cmp	r3, #100	@ 0x64
 800138a:	d901      	bls.n	8001390 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800138c:	2303      	movs	r3, #3
 800138e:	e103      	b.n	8001598 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001390:	4b75      	ldr	r3, [pc, #468]	@ (8001568 <HAL_RCC_OscConfig+0x4c8>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001398:	2b00      	cmp	r3, #0
 800139a:	d0f0      	beq.n	800137e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	d106      	bne.n	80013b2 <HAL_RCC_OscConfig+0x312>
 80013a4:	4b6f      	ldr	r3, [pc, #444]	@ (8001564 <HAL_RCC_OscConfig+0x4c4>)
 80013a6:	6a1b      	ldr	r3, [r3, #32]
 80013a8:	4a6e      	ldr	r2, [pc, #440]	@ (8001564 <HAL_RCC_OscConfig+0x4c4>)
 80013aa:	f043 0301 	orr.w	r3, r3, #1
 80013ae:	6213      	str	r3, [r2, #32]
 80013b0:	e02d      	b.n	800140e <HAL_RCC_OscConfig+0x36e>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	68db      	ldr	r3, [r3, #12]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d10c      	bne.n	80013d4 <HAL_RCC_OscConfig+0x334>
 80013ba:	4b6a      	ldr	r3, [pc, #424]	@ (8001564 <HAL_RCC_OscConfig+0x4c4>)
 80013bc:	6a1b      	ldr	r3, [r3, #32]
 80013be:	4a69      	ldr	r2, [pc, #420]	@ (8001564 <HAL_RCC_OscConfig+0x4c4>)
 80013c0:	f023 0301 	bic.w	r3, r3, #1
 80013c4:	6213      	str	r3, [r2, #32]
 80013c6:	4b67      	ldr	r3, [pc, #412]	@ (8001564 <HAL_RCC_OscConfig+0x4c4>)
 80013c8:	6a1b      	ldr	r3, [r3, #32]
 80013ca:	4a66      	ldr	r2, [pc, #408]	@ (8001564 <HAL_RCC_OscConfig+0x4c4>)
 80013cc:	f023 0304 	bic.w	r3, r3, #4
 80013d0:	6213      	str	r3, [r2, #32]
 80013d2:	e01c      	b.n	800140e <HAL_RCC_OscConfig+0x36e>
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	2b05      	cmp	r3, #5
 80013da:	d10c      	bne.n	80013f6 <HAL_RCC_OscConfig+0x356>
 80013dc:	4b61      	ldr	r3, [pc, #388]	@ (8001564 <HAL_RCC_OscConfig+0x4c4>)
 80013de:	6a1b      	ldr	r3, [r3, #32]
 80013e0:	4a60      	ldr	r2, [pc, #384]	@ (8001564 <HAL_RCC_OscConfig+0x4c4>)
 80013e2:	f043 0304 	orr.w	r3, r3, #4
 80013e6:	6213      	str	r3, [r2, #32]
 80013e8:	4b5e      	ldr	r3, [pc, #376]	@ (8001564 <HAL_RCC_OscConfig+0x4c4>)
 80013ea:	6a1b      	ldr	r3, [r3, #32]
 80013ec:	4a5d      	ldr	r2, [pc, #372]	@ (8001564 <HAL_RCC_OscConfig+0x4c4>)
 80013ee:	f043 0301 	orr.w	r3, r3, #1
 80013f2:	6213      	str	r3, [r2, #32]
 80013f4:	e00b      	b.n	800140e <HAL_RCC_OscConfig+0x36e>
 80013f6:	4b5b      	ldr	r3, [pc, #364]	@ (8001564 <HAL_RCC_OscConfig+0x4c4>)
 80013f8:	6a1b      	ldr	r3, [r3, #32]
 80013fa:	4a5a      	ldr	r2, [pc, #360]	@ (8001564 <HAL_RCC_OscConfig+0x4c4>)
 80013fc:	f023 0301 	bic.w	r3, r3, #1
 8001400:	6213      	str	r3, [r2, #32]
 8001402:	4b58      	ldr	r3, [pc, #352]	@ (8001564 <HAL_RCC_OscConfig+0x4c4>)
 8001404:	6a1b      	ldr	r3, [r3, #32]
 8001406:	4a57      	ldr	r2, [pc, #348]	@ (8001564 <HAL_RCC_OscConfig+0x4c4>)
 8001408:	f023 0304 	bic.w	r3, r3, #4
 800140c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	68db      	ldr	r3, [r3, #12]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d015      	beq.n	8001442 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001416:	f7ff fd55 	bl	8000ec4 <HAL_GetTick>
 800141a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800141c:	e00a      	b.n	8001434 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800141e:	f7ff fd51 	bl	8000ec4 <HAL_GetTick>
 8001422:	4602      	mov	r2, r0
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	1ad3      	subs	r3, r2, r3
 8001428:	f241 3288 	movw	r2, #5000	@ 0x1388
 800142c:	4293      	cmp	r3, r2
 800142e:	d901      	bls.n	8001434 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001430:	2303      	movs	r3, #3
 8001432:	e0b1      	b.n	8001598 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001434:	4b4b      	ldr	r3, [pc, #300]	@ (8001564 <HAL_RCC_OscConfig+0x4c4>)
 8001436:	6a1b      	ldr	r3, [r3, #32]
 8001438:	f003 0302 	and.w	r3, r3, #2
 800143c:	2b00      	cmp	r3, #0
 800143e:	d0ee      	beq.n	800141e <HAL_RCC_OscConfig+0x37e>
 8001440:	e014      	b.n	800146c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001442:	f7ff fd3f 	bl	8000ec4 <HAL_GetTick>
 8001446:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001448:	e00a      	b.n	8001460 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800144a:	f7ff fd3b 	bl	8000ec4 <HAL_GetTick>
 800144e:	4602      	mov	r2, r0
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	1ad3      	subs	r3, r2, r3
 8001454:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001458:	4293      	cmp	r3, r2
 800145a:	d901      	bls.n	8001460 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800145c:	2303      	movs	r3, #3
 800145e:	e09b      	b.n	8001598 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001460:	4b40      	ldr	r3, [pc, #256]	@ (8001564 <HAL_RCC_OscConfig+0x4c4>)
 8001462:	6a1b      	ldr	r3, [r3, #32]
 8001464:	f003 0302 	and.w	r3, r3, #2
 8001468:	2b00      	cmp	r3, #0
 800146a:	d1ee      	bne.n	800144a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800146c:	7dfb      	ldrb	r3, [r7, #23]
 800146e:	2b01      	cmp	r3, #1
 8001470:	d105      	bne.n	800147e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001472:	4b3c      	ldr	r3, [pc, #240]	@ (8001564 <HAL_RCC_OscConfig+0x4c4>)
 8001474:	69db      	ldr	r3, [r3, #28]
 8001476:	4a3b      	ldr	r2, [pc, #236]	@ (8001564 <HAL_RCC_OscConfig+0x4c4>)
 8001478:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800147c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	69db      	ldr	r3, [r3, #28]
 8001482:	2b00      	cmp	r3, #0
 8001484:	f000 8087 	beq.w	8001596 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001488:	4b36      	ldr	r3, [pc, #216]	@ (8001564 <HAL_RCC_OscConfig+0x4c4>)
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f003 030c 	and.w	r3, r3, #12
 8001490:	2b08      	cmp	r3, #8
 8001492:	d061      	beq.n	8001558 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	69db      	ldr	r3, [r3, #28]
 8001498:	2b02      	cmp	r3, #2
 800149a:	d146      	bne.n	800152a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800149c:	4b33      	ldr	r3, [pc, #204]	@ (800156c <HAL_RCC_OscConfig+0x4cc>)
 800149e:	2200      	movs	r2, #0
 80014a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a2:	f7ff fd0f 	bl	8000ec4 <HAL_GetTick>
 80014a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014a8:	e008      	b.n	80014bc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014aa:	f7ff fd0b 	bl	8000ec4 <HAL_GetTick>
 80014ae:	4602      	mov	r2, r0
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	1ad3      	subs	r3, r2, r3
 80014b4:	2b02      	cmp	r3, #2
 80014b6:	d901      	bls.n	80014bc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80014b8:	2303      	movs	r3, #3
 80014ba:	e06d      	b.n	8001598 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014bc:	4b29      	ldr	r3, [pc, #164]	@ (8001564 <HAL_RCC_OscConfig+0x4c4>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d1f0      	bne.n	80014aa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6a1b      	ldr	r3, [r3, #32]
 80014cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014d0:	d108      	bne.n	80014e4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80014d2:	4b24      	ldr	r3, [pc, #144]	@ (8001564 <HAL_RCC_OscConfig+0x4c4>)
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	4921      	ldr	r1, [pc, #132]	@ (8001564 <HAL_RCC_OscConfig+0x4c4>)
 80014e0:	4313      	orrs	r3, r2
 80014e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014e4:	4b1f      	ldr	r3, [pc, #124]	@ (8001564 <HAL_RCC_OscConfig+0x4c4>)
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6a19      	ldr	r1, [r3, #32]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014f4:	430b      	orrs	r3, r1
 80014f6:	491b      	ldr	r1, [pc, #108]	@ (8001564 <HAL_RCC_OscConfig+0x4c4>)
 80014f8:	4313      	orrs	r3, r2
 80014fa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014fc:	4b1b      	ldr	r3, [pc, #108]	@ (800156c <HAL_RCC_OscConfig+0x4cc>)
 80014fe:	2201      	movs	r2, #1
 8001500:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001502:	f7ff fcdf 	bl	8000ec4 <HAL_GetTick>
 8001506:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001508:	e008      	b.n	800151c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800150a:	f7ff fcdb 	bl	8000ec4 <HAL_GetTick>
 800150e:	4602      	mov	r2, r0
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	2b02      	cmp	r3, #2
 8001516:	d901      	bls.n	800151c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001518:	2303      	movs	r3, #3
 800151a:	e03d      	b.n	8001598 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800151c:	4b11      	ldr	r3, [pc, #68]	@ (8001564 <HAL_RCC_OscConfig+0x4c4>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001524:	2b00      	cmp	r3, #0
 8001526:	d0f0      	beq.n	800150a <HAL_RCC_OscConfig+0x46a>
 8001528:	e035      	b.n	8001596 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800152a:	4b10      	ldr	r3, [pc, #64]	@ (800156c <HAL_RCC_OscConfig+0x4cc>)
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001530:	f7ff fcc8 	bl	8000ec4 <HAL_GetTick>
 8001534:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001536:	e008      	b.n	800154a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001538:	f7ff fcc4 	bl	8000ec4 <HAL_GetTick>
 800153c:	4602      	mov	r2, r0
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	2b02      	cmp	r3, #2
 8001544:	d901      	bls.n	800154a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001546:	2303      	movs	r3, #3
 8001548:	e026      	b.n	8001598 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800154a:	4b06      	ldr	r3, [pc, #24]	@ (8001564 <HAL_RCC_OscConfig+0x4c4>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d1f0      	bne.n	8001538 <HAL_RCC_OscConfig+0x498>
 8001556:	e01e      	b.n	8001596 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	69db      	ldr	r3, [r3, #28]
 800155c:	2b01      	cmp	r3, #1
 800155e:	d107      	bne.n	8001570 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001560:	2301      	movs	r3, #1
 8001562:	e019      	b.n	8001598 <HAL_RCC_OscConfig+0x4f8>
 8001564:	40021000 	.word	0x40021000
 8001568:	40007000 	.word	0x40007000
 800156c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001570:	4b0b      	ldr	r3, [pc, #44]	@ (80015a0 <HAL_RCC_OscConfig+0x500>)
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6a1b      	ldr	r3, [r3, #32]
 8001580:	429a      	cmp	r2, r3
 8001582:	d106      	bne.n	8001592 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800158e:	429a      	cmp	r2, r3
 8001590:	d001      	beq.n	8001596 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e000      	b.n	8001598 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001596:	2300      	movs	r3, #0
}
 8001598:	4618      	mov	r0, r3
 800159a:	3718      	adds	r7, #24
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	40021000 	.word	0x40021000

080015a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d101      	bne.n	80015b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	e0d0      	b.n	800175a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80015b8:	4b6a      	ldr	r3, [pc, #424]	@ (8001764 <HAL_RCC_ClockConfig+0x1c0>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 0307 	and.w	r3, r3, #7
 80015c0:	683a      	ldr	r2, [r7, #0]
 80015c2:	429a      	cmp	r2, r3
 80015c4:	d910      	bls.n	80015e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015c6:	4b67      	ldr	r3, [pc, #412]	@ (8001764 <HAL_RCC_ClockConfig+0x1c0>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f023 0207 	bic.w	r2, r3, #7
 80015ce:	4965      	ldr	r1, [pc, #404]	@ (8001764 <HAL_RCC_ClockConfig+0x1c0>)
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	4313      	orrs	r3, r2
 80015d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015d6:	4b63      	ldr	r3, [pc, #396]	@ (8001764 <HAL_RCC_ClockConfig+0x1c0>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 0307 	and.w	r3, r3, #7
 80015de:	683a      	ldr	r2, [r7, #0]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d001      	beq.n	80015e8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80015e4:	2301      	movs	r3, #1
 80015e6:	e0b8      	b.n	800175a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 0302 	and.w	r3, r3, #2
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d020      	beq.n	8001636 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 0304 	and.w	r3, r3, #4
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d005      	beq.n	800160c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001600:	4b59      	ldr	r3, [pc, #356]	@ (8001768 <HAL_RCC_ClockConfig+0x1c4>)
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	4a58      	ldr	r2, [pc, #352]	@ (8001768 <HAL_RCC_ClockConfig+0x1c4>)
 8001606:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800160a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f003 0308 	and.w	r3, r3, #8
 8001614:	2b00      	cmp	r3, #0
 8001616:	d005      	beq.n	8001624 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001618:	4b53      	ldr	r3, [pc, #332]	@ (8001768 <HAL_RCC_ClockConfig+0x1c4>)
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	4a52      	ldr	r2, [pc, #328]	@ (8001768 <HAL_RCC_ClockConfig+0x1c4>)
 800161e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001622:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001624:	4b50      	ldr	r3, [pc, #320]	@ (8001768 <HAL_RCC_ClockConfig+0x1c4>)
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	494d      	ldr	r1, [pc, #308]	@ (8001768 <HAL_RCC_ClockConfig+0x1c4>)
 8001632:	4313      	orrs	r3, r2
 8001634:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 0301 	and.w	r3, r3, #1
 800163e:	2b00      	cmp	r3, #0
 8001640:	d040      	beq.n	80016c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	2b01      	cmp	r3, #1
 8001648:	d107      	bne.n	800165a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800164a:	4b47      	ldr	r3, [pc, #284]	@ (8001768 <HAL_RCC_ClockConfig+0x1c4>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d115      	bne.n	8001682 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e07f      	b.n	800175a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	2b02      	cmp	r3, #2
 8001660:	d107      	bne.n	8001672 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001662:	4b41      	ldr	r3, [pc, #260]	@ (8001768 <HAL_RCC_ClockConfig+0x1c4>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d109      	bne.n	8001682 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e073      	b.n	800175a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001672:	4b3d      	ldr	r3, [pc, #244]	@ (8001768 <HAL_RCC_ClockConfig+0x1c4>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 0302 	and.w	r3, r3, #2
 800167a:	2b00      	cmp	r3, #0
 800167c:	d101      	bne.n	8001682 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e06b      	b.n	800175a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001682:	4b39      	ldr	r3, [pc, #228]	@ (8001768 <HAL_RCC_ClockConfig+0x1c4>)
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f023 0203 	bic.w	r2, r3, #3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	4936      	ldr	r1, [pc, #216]	@ (8001768 <HAL_RCC_ClockConfig+0x1c4>)
 8001690:	4313      	orrs	r3, r2
 8001692:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001694:	f7ff fc16 	bl	8000ec4 <HAL_GetTick>
 8001698:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800169a:	e00a      	b.n	80016b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800169c:	f7ff fc12 	bl	8000ec4 <HAL_GetTick>
 80016a0:	4602      	mov	r2, r0
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d901      	bls.n	80016b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016ae:	2303      	movs	r3, #3
 80016b0:	e053      	b.n	800175a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016b2:	4b2d      	ldr	r3, [pc, #180]	@ (8001768 <HAL_RCC_ClockConfig+0x1c4>)
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	f003 020c 	and.w	r2, r3, #12
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d1eb      	bne.n	800169c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016c4:	4b27      	ldr	r3, [pc, #156]	@ (8001764 <HAL_RCC_ClockConfig+0x1c0>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f003 0307 	and.w	r3, r3, #7
 80016cc:	683a      	ldr	r2, [r7, #0]
 80016ce:	429a      	cmp	r2, r3
 80016d0:	d210      	bcs.n	80016f4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016d2:	4b24      	ldr	r3, [pc, #144]	@ (8001764 <HAL_RCC_ClockConfig+0x1c0>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f023 0207 	bic.w	r2, r3, #7
 80016da:	4922      	ldr	r1, [pc, #136]	@ (8001764 <HAL_RCC_ClockConfig+0x1c0>)
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	4313      	orrs	r3, r2
 80016e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016e2:	4b20      	ldr	r3, [pc, #128]	@ (8001764 <HAL_RCC_ClockConfig+0x1c0>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 0307 	and.w	r3, r3, #7
 80016ea:	683a      	ldr	r2, [r7, #0]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d001      	beq.n	80016f4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80016f0:	2301      	movs	r3, #1
 80016f2:	e032      	b.n	800175a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f003 0304 	and.w	r3, r3, #4
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d008      	beq.n	8001712 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001700:	4b19      	ldr	r3, [pc, #100]	@ (8001768 <HAL_RCC_ClockConfig+0x1c4>)
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	4916      	ldr	r1, [pc, #88]	@ (8001768 <HAL_RCC_ClockConfig+0x1c4>)
 800170e:	4313      	orrs	r3, r2
 8001710:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 0308 	and.w	r3, r3, #8
 800171a:	2b00      	cmp	r3, #0
 800171c:	d009      	beq.n	8001732 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800171e:	4b12      	ldr	r3, [pc, #72]	@ (8001768 <HAL_RCC_ClockConfig+0x1c4>)
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	691b      	ldr	r3, [r3, #16]
 800172a:	00db      	lsls	r3, r3, #3
 800172c:	490e      	ldr	r1, [pc, #56]	@ (8001768 <HAL_RCC_ClockConfig+0x1c4>)
 800172e:	4313      	orrs	r3, r2
 8001730:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001732:	f000 f821 	bl	8001778 <HAL_RCC_GetSysClockFreq>
 8001736:	4602      	mov	r2, r0
 8001738:	4b0b      	ldr	r3, [pc, #44]	@ (8001768 <HAL_RCC_ClockConfig+0x1c4>)
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	091b      	lsrs	r3, r3, #4
 800173e:	f003 030f 	and.w	r3, r3, #15
 8001742:	490a      	ldr	r1, [pc, #40]	@ (800176c <HAL_RCC_ClockConfig+0x1c8>)
 8001744:	5ccb      	ldrb	r3, [r1, r3]
 8001746:	fa22 f303 	lsr.w	r3, r2, r3
 800174a:	4a09      	ldr	r2, [pc, #36]	@ (8001770 <HAL_RCC_ClockConfig+0x1cc>)
 800174c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800174e:	4b09      	ldr	r3, [pc, #36]	@ (8001774 <HAL_RCC_ClockConfig+0x1d0>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4618      	mov	r0, r3
 8001754:	f7ff fb86 	bl	8000e64 <HAL_InitTick>

  return HAL_OK;
 8001758:	2300      	movs	r3, #0
}
 800175a:	4618      	mov	r0, r3
 800175c:	3710      	adds	r7, #16
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	40022000 	.word	0x40022000
 8001768:	40021000 	.word	0x40021000
 800176c:	08002448 	.word	0x08002448
 8001770:	20000000 	.word	0x20000000
 8001774:	20000004 	.word	0x20000004

08001778 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001778:	b480      	push	{r7}
 800177a:	b087      	sub	sp, #28
 800177c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800177e:	2300      	movs	r3, #0
 8001780:	60fb      	str	r3, [r7, #12]
 8001782:	2300      	movs	r3, #0
 8001784:	60bb      	str	r3, [r7, #8]
 8001786:	2300      	movs	r3, #0
 8001788:	617b      	str	r3, [r7, #20]
 800178a:	2300      	movs	r3, #0
 800178c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800178e:	2300      	movs	r3, #0
 8001790:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001792:	4b1e      	ldr	r3, [pc, #120]	@ (800180c <HAL_RCC_GetSysClockFreq+0x94>)
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	f003 030c 	and.w	r3, r3, #12
 800179e:	2b04      	cmp	r3, #4
 80017a0:	d002      	beq.n	80017a8 <HAL_RCC_GetSysClockFreq+0x30>
 80017a2:	2b08      	cmp	r3, #8
 80017a4:	d003      	beq.n	80017ae <HAL_RCC_GetSysClockFreq+0x36>
 80017a6:	e027      	b.n	80017f8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80017a8:	4b19      	ldr	r3, [pc, #100]	@ (8001810 <HAL_RCC_GetSysClockFreq+0x98>)
 80017aa:	613b      	str	r3, [r7, #16]
      break;
 80017ac:	e027      	b.n	80017fe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	0c9b      	lsrs	r3, r3, #18
 80017b2:	f003 030f 	and.w	r3, r3, #15
 80017b6:	4a17      	ldr	r2, [pc, #92]	@ (8001814 <HAL_RCC_GetSysClockFreq+0x9c>)
 80017b8:	5cd3      	ldrb	r3, [r2, r3]
 80017ba:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d010      	beq.n	80017e8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80017c6:	4b11      	ldr	r3, [pc, #68]	@ (800180c <HAL_RCC_GetSysClockFreq+0x94>)
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	0c5b      	lsrs	r3, r3, #17
 80017cc:	f003 0301 	and.w	r3, r3, #1
 80017d0:	4a11      	ldr	r2, [pc, #68]	@ (8001818 <HAL_RCC_GetSysClockFreq+0xa0>)
 80017d2:	5cd3      	ldrb	r3, [r2, r3]
 80017d4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4a0d      	ldr	r2, [pc, #52]	@ (8001810 <HAL_RCC_GetSysClockFreq+0x98>)
 80017da:	fb03 f202 	mul.w	r2, r3, r2
 80017de:	68bb      	ldr	r3, [r7, #8]
 80017e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80017e4:	617b      	str	r3, [r7, #20]
 80017e6:	e004      	b.n	80017f2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	4a0c      	ldr	r2, [pc, #48]	@ (800181c <HAL_RCC_GetSysClockFreq+0xa4>)
 80017ec:	fb02 f303 	mul.w	r3, r2, r3
 80017f0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	613b      	str	r3, [r7, #16]
      break;
 80017f6:	e002      	b.n	80017fe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80017f8:	4b05      	ldr	r3, [pc, #20]	@ (8001810 <HAL_RCC_GetSysClockFreq+0x98>)
 80017fa:	613b      	str	r3, [r7, #16]
      break;
 80017fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017fe:	693b      	ldr	r3, [r7, #16]
}
 8001800:	4618      	mov	r0, r3
 8001802:	371c      	adds	r7, #28
 8001804:	46bd      	mov	sp, r7
 8001806:	bc80      	pop	{r7}
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	40021000 	.word	0x40021000
 8001810:	007a1200 	.word	0x007a1200
 8001814:	08002458 	.word	0x08002458
 8001818:	08002468 	.word	0x08002468
 800181c:	003d0900 	.word	0x003d0900

08001820 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001820:	b480      	push	{r7}
 8001822:	b085      	sub	sp, #20
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001828:	4b0a      	ldr	r3, [pc, #40]	@ (8001854 <RCC_Delay+0x34>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a0a      	ldr	r2, [pc, #40]	@ (8001858 <RCC_Delay+0x38>)
 800182e:	fba2 2303 	umull	r2, r3, r2, r3
 8001832:	0a5b      	lsrs	r3, r3, #9
 8001834:	687a      	ldr	r2, [r7, #4]
 8001836:	fb02 f303 	mul.w	r3, r2, r3
 800183a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800183c:	bf00      	nop
  }
  while (Delay --);
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	1e5a      	subs	r2, r3, #1
 8001842:	60fa      	str	r2, [r7, #12]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d1f9      	bne.n	800183c <RCC_Delay+0x1c>
}
 8001848:	bf00      	nop
 800184a:	bf00      	nop
 800184c:	3714      	adds	r7, #20
 800184e:	46bd      	mov	sp, r7
 8001850:	bc80      	pop	{r7}
 8001852:	4770      	bx	lr
 8001854:	20000000 	.word	0x20000000
 8001858:	10624dd3 	.word	0x10624dd3

0800185c <sniprintf>:
 800185c:	b40c      	push	{r2, r3}
 800185e:	b530      	push	{r4, r5, lr}
 8001860:	4b17      	ldr	r3, [pc, #92]	@ (80018c0 <sniprintf+0x64>)
 8001862:	1e0c      	subs	r4, r1, #0
 8001864:	681d      	ldr	r5, [r3, #0]
 8001866:	b09d      	sub	sp, #116	@ 0x74
 8001868:	da08      	bge.n	800187c <sniprintf+0x20>
 800186a:	238b      	movs	r3, #139	@ 0x8b
 800186c:	f04f 30ff 	mov.w	r0, #4294967295
 8001870:	602b      	str	r3, [r5, #0]
 8001872:	b01d      	add	sp, #116	@ 0x74
 8001874:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001878:	b002      	add	sp, #8
 800187a:	4770      	bx	lr
 800187c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8001880:	f8ad 3014 	strh.w	r3, [sp, #20]
 8001884:	bf0c      	ite	eq
 8001886:	4623      	moveq	r3, r4
 8001888:	f104 33ff 	addne.w	r3, r4, #4294967295
 800188c:	9304      	str	r3, [sp, #16]
 800188e:	9307      	str	r3, [sp, #28]
 8001890:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001894:	9002      	str	r0, [sp, #8]
 8001896:	9006      	str	r0, [sp, #24]
 8001898:	f8ad 3016 	strh.w	r3, [sp, #22]
 800189c:	4628      	mov	r0, r5
 800189e:	ab21      	add	r3, sp, #132	@ 0x84
 80018a0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80018a2:	a902      	add	r1, sp, #8
 80018a4:	9301      	str	r3, [sp, #4]
 80018a6:	f000 f993 	bl	8001bd0 <_svfiprintf_r>
 80018aa:	1c43      	adds	r3, r0, #1
 80018ac:	bfbc      	itt	lt
 80018ae:	238b      	movlt	r3, #139	@ 0x8b
 80018b0:	602b      	strlt	r3, [r5, #0]
 80018b2:	2c00      	cmp	r4, #0
 80018b4:	d0dd      	beq.n	8001872 <sniprintf+0x16>
 80018b6:	2200      	movs	r2, #0
 80018b8:	9b02      	ldr	r3, [sp, #8]
 80018ba:	701a      	strb	r2, [r3, #0]
 80018bc:	e7d9      	b.n	8001872 <sniprintf+0x16>
 80018be:	bf00      	nop
 80018c0:	2000000c 	.word	0x2000000c

080018c4 <memset>:
 80018c4:	4603      	mov	r3, r0
 80018c6:	4402      	add	r2, r0
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d100      	bne.n	80018ce <memset+0xa>
 80018cc:	4770      	bx	lr
 80018ce:	f803 1b01 	strb.w	r1, [r3], #1
 80018d2:	e7f9      	b.n	80018c8 <memset+0x4>

080018d4 <__errno>:
 80018d4:	4b01      	ldr	r3, [pc, #4]	@ (80018dc <__errno+0x8>)
 80018d6:	6818      	ldr	r0, [r3, #0]
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	2000000c 	.word	0x2000000c

080018e0 <__libc_init_array>:
 80018e0:	b570      	push	{r4, r5, r6, lr}
 80018e2:	2600      	movs	r6, #0
 80018e4:	4d0c      	ldr	r5, [pc, #48]	@ (8001918 <__libc_init_array+0x38>)
 80018e6:	4c0d      	ldr	r4, [pc, #52]	@ (800191c <__libc_init_array+0x3c>)
 80018e8:	1b64      	subs	r4, r4, r5
 80018ea:	10a4      	asrs	r4, r4, #2
 80018ec:	42a6      	cmp	r6, r4
 80018ee:	d109      	bne.n	8001904 <__libc_init_array+0x24>
 80018f0:	f000 fc78 	bl	80021e4 <_init>
 80018f4:	2600      	movs	r6, #0
 80018f6:	4d0a      	ldr	r5, [pc, #40]	@ (8001920 <__libc_init_array+0x40>)
 80018f8:	4c0a      	ldr	r4, [pc, #40]	@ (8001924 <__libc_init_array+0x44>)
 80018fa:	1b64      	subs	r4, r4, r5
 80018fc:	10a4      	asrs	r4, r4, #2
 80018fe:	42a6      	cmp	r6, r4
 8001900:	d105      	bne.n	800190e <__libc_init_array+0x2e>
 8001902:	bd70      	pop	{r4, r5, r6, pc}
 8001904:	f855 3b04 	ldr.w	r3, [r5], #4
 8001908:	4798      	blx	r3
 800190a:	3601      	adds	r6, #1
 800190c:	e7ee      	b.n	80018ec <__libc_init_array+0xc>
 800190e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001912:	4798      	blx	r3
 8001914:	3601      	adds	r6, #1
 8001916:	e7f2      	b.n	80018fe <__libc_init_array+0x1e>
 8001918:	080024a8 	.word	0x080024a8
 800191c:	080024a8 	.word	0x080024a8
 8001920:	080024a8 	.word	0x080024a8
 8001924:	080024ac 	.word	0x080024ac

08001928 <__retarget_lock_acquire_recursive>:
 8001928:	4770      	bx	lr

0800192a <__retarget_lock_release_recursive>:
 800192a:	4770      	bx	lr

0800192c <_free_r>:
 800192c:	b538      	push	{r3, r4, r5, lr}
 800192e:	4605      	mov	r5, r0
 8001930:	2900      	cmp	r1, #0
 8001932:	d040      	beq.n	80019b6 <_free_r+0x8a>
 8001934:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001938:	1f0c      	subs	r4, r1, #4
 800193a:	2b00      	cmp	r3, #0
 800193c:	bfb8      	it	lt
 800193e:	18e4      	addlt	r4, r4, r3
 8001940:	f000 f8de 	bl	8001b00 <__malloc_lock>
 8001944:	4a1c      	ldr	r2, [pc, #112]	@ (80019b8 <_free_r+0x8c>)
 8001946:	6813      	ldr	r3, [r2, #0]
 8001948:	b933      	cbnz	r3, 8001958 <_free_r+0x2c>
 800194a:	6063      	str	r3, [r4, #4]
 800194c:	6014      	str	r4, [r2, #0]
 800194e:	4628      	mov	r0, r5
 8001950:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001954:	f000 b8da 	b.w	8001b0c <__malloc_unlock>
 8001958:	42a3      	cmp	r3, r4
 800195a:	d908      	bls.n	800196e <_free_r+0x42>
 800195c:	6820      	ldr	r0, [r4, #0]
 800195e:	1821      	adds	r1, r4, r0
 8001960:	428b      	cmp	r3, r1
 8001962:	bf01      	itttt	eq
 8001964:	6819      	ldreq	r1, [r3, #0]
 8001966:	685b      	ldreq	r3, [r3, #4]
 8001968:	1809      	addeq	r1, r1, r0
 800196a:	6021      	streq	r1, [r4, #0]
 800196c:	e7ed      	b.n	800194a <_free_r+0x1e>
 800196e:	461a      	mov	r2, r3
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	b10b      	cbz	r3, 8001978 <_free_r+0x4c>
 8001974:	42a3      	cmp	r3, r4
 8001976:	d9fa      	bls.n	800196e <_free_r+0x42>
 8001978:	6811      	ldr	r1, [r2, #0]
 800197a:	1850      	adds	r0, r2, r1
 800197c:	42a0      	cmp	r0, r4
 800197e:	d10b      	bne.n	8001998 <_free_r+0x6c>
 8001980:	6820      	ldr	r0, [r4, #0]
 8001982:	4401      	add	r1, r0
 8001984:	1850      	adds	r0, r2, r1
 8001986:	4283      	cmp	r3, r0
 8001988:	6011      	str	r1, [r2, #0]
 800198a:	d1e0      	bne.n	800194e <_free_r+0x22>
 800198c:	6818      	ldr	r0, [r3, #0]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	4408      	add	r0, r1
 8001992:	6010      	str	r0, [r2, #0]
 8001994:	6053      	str	r3, [r2, #4]
 8001996:	e7da      	b.n	800194e <_free_r+0x22>
 8001998:	d902      	bls.n	80019a0 <_free_r+0x74>
 800199a:	230c      	movs	r3, #12
 800199c:	602b      	str	r3, [r5, #0]
 800199e:	e7d6      	b.n	800194e <_free_r+0x22>
 80019a0:	6820      	ldr	r0, [r4, #0]
 80019a2:	1821      	adds	r1, r4, r0
 80019a4:	428b      	cmp	r3, r1
 80019a6:	bf01      	itttt	eq
 80019a8:	6819      	ldreq	r1, [r3, #0]
 80019aa:	685b      	ldreq	r3, [r3, #4]
 80019ac:	1809      	addeq	r1, r1, r0
 80019ae:	6021      	streq	r1, [r4, #0]
 80019b0:	6063      	str	r3, [r4, #4]
 80019b2:	6054      	str	r4, [r2, #4]
 80019b4:	e7cb      	b.n	800194e <_free_r+0x22>
 80019b6:	bd38      	pop	{r3, r4, r5, pc}
 80019b8:	200003f0 	.word	0x200003f0

080019bc <sbrk_aligned>:
 80019bc:	b570      	push	{r4, r5, r6, lr}
 80019be:	4e0f      	ldr	r6, [pc, #60]	@ (80019fc <sbrk_aligned+0x40>)
 80019c0:	460c      	mov	r4, r1
 80019c2:	6831      	ldr	r1, [r6, #0]
 80019c4:	4605      	mov	r5, r0
 80019c6:	b911      	cbnz	r1, 80019ce <sbrk_aligned+0x12>
 80019c8:	f000 fbaa 	bl	8002120 <_sbrk_r>
 80019cc:	6030      	str	r0, [r6, #0]
 80019ce:	4621      	mov	r1, r4
 80019d0:	4628      	mov	r0, r5
 80019d2:	f000 fba5 	bl	8002120 <_sbrk_r>
 80019d6:	1c43      	adds	r3, r0, #1
 80019d8:	d103      	bne.n	80019e2 <sbrk_aligned+0x26>
 80019da:	f04f 34ff 	mov.w	r4, #4294967295
 80019de:	4620      	mov	r0, r4
 80019e0:	bd70      	pop	{r4, r5, r6, pc}
 80019e2:	1cc4      	adds	r4, r0, #3
 80019e4:	f024 0403 	bic.w	r4, r4, #3
 80019e8:	42a0      	cmp	r0, r4
 80019ea:	d0f8      	beq.n	80019de <sbrk_aligned+0x22>
 80019ec:	1a21      	subs	r1, r4, r0
 80019ee:	4628      	mov	r0, r5
 80019f0:	f000 fb96 	bl	8002120 <_sbrk_r>
 80019f4:	3001      	adds	r0, #1
 80019f6:	d1f2      	bne.n	80019de <sbrk_aligned+0x22>
 80019f8:	e7ef      	b.n	80019da <sbrk_aligned+0x1e>
 80019fa:	bf00      	nop
 80019fc:	200003ec 	.word	0x200003ec

08001a00 <_malloc_r>:
 8001a00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001a04:	1ccd      	adds	r5, r1, #3
 8001a06:	f025 0503 	bic.w	r5, r5, #3
 8001a0a:	3508      	adds	r5, #8
 8001a0c:	2d0c      	cmp	r5, #12
 8001a0e:	bf38      	it	cc
 8001a10:	250c      	movcc	r5, #12
 8001a12:	2d00      	cmp	r5, #0
 8001a14:	4606      	mov	r6, r0
 8001a16:	db01      	blt.n	8001a1c <_malloc_r+0x1c>
 8001a18:	42a9      	cmp	r1, r5
 8001a1a:	d904      	bls.n	8001a26 <_malloc_r+0x26>
 8001a1c:	230c      	movs	r3, #12
 8001a1e:	6033      	str	r3, [r6, #0]
 8001a20:	2000      	movs	r0, #0
 8001a22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001a26:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001afc <_malloc_r+0xfc>
 8001a2a:	f000 f869 	bl	8001b00 <__malloc_lock>
 8001a2e:	f8d8 3000 	ldr.w	r3, [r8]
 8001a32:	461c      	mov	r4, r3
 8001a34:	bb44      	cbnz	r4, 8001a88 <_malloc_r+0x88>
 8001a36:	4629      	mov	r1, r5
 8001a38:	4630      	mov	r0, r6
 8001a3a:	f7ff ffbf 	bl	80019bc <sbrk_aligned>
 8001a3e:	1c43      	adds	r3, r0, #1
 8001a40:	4604      	mov	r4, r0
 8001a42:	d158      	bne.n	8001af6 <_malloc_r+0xf6>
 8001a44:	f8d8 4000 	ldr.w	r4, [r8]
 8001a48:	4627      	mov	r7, r4
 8001a4a:	2f00      	cmp	r7, #0
 8001a4c:	d143      	bne.n	8001ad6 <_malloc_r+0xd6>
 8001a4e:	2c00      	cmp	r4, #0
 8001a50:	d04b      	beq.n	8001aea <_malloc_r+0xea>
 8001a52:	6823      	ldr	r3, [r4, #0]
 8001a54:	4639      	mov	r1, r7
 8001a56:	4630      	mov	r0, r6
 8001a58:	eb04 0903 	add.w	r9, r4, r3
 8001a5c:	f000 fb60 	bl	8002120 <_sbrk_r>
 8001a60:	4581      	cmp	r9, r0
 8001a62:	d142      	bne.n	8001aea <_malloc_r+0xea>
 8001a64:	6821      	ldr	r1, [r4, #0]
 8001a66:	4630      	mov	r0, r6
 8001a68:	1a6d      	subs	r5, r5, r1
 8001a6a:	4629      	mov	r1, r5
 8001a6c:	f7ff ffa6 	bl	80019bc <sbrk_aligned>
 8001a70:	3001      	adds	r0, #1
 8001a72:	d03a      	beq.n	8001aea <_malloc_r+0xea>
 8001a74:	6823      	ldr	r3, [r4, #0]
 8001a76:	442b      	add	r3, r5
 8001a78:	6023      	str	r3, [r4, #0]
 8001a7a:	f8d8 3000 	ldr.w	r3, [r8]
 8001a7e:	685a      	ldr	r2, [r3, #4]
 8001a80:	bb62      	cbnz	r2, 8001adc <_malloc_r+0xdc>
 8001a82:	f8c8 7000 	str.w	r7, [r8]
 8001a86:	e00f      	b.n	8001aa8 <_malloc_r+0xa8>
 8001a88:	6822      	ldr	r2, [r4, #0]
 8001a8a:	1b52      	subs	r2, r2, r5
 8001a8c:	d420      	bmi.n	8001ad0 <_malloc_r+0xd0>
 8001a8e:	2a0b      	cmp	r2, #11
 8001a90:	d917      	bls.n	8001ac2 <_malloc_r+0xc2>
 8001a92:	1961      	adds	r1, r4, r5
 8001a94:	42a3      	cmp	r3, r4
 8001a96:	6025      	str	r5, [r4, #0]
 8001a98:	bf18      	it	ne
 8001a9a:	6059      	strne	r1, [r3, #4]
 8001a9c:	6863      	ldr	r3, [r4, #4]
 8001a9e:	bf08      	it	eq
 8001aa0:	f8c8 1000 	streq.w	r1, [r8]
 8001aa4:	5162      	str	r2, [r4, r5]
 8001aa6:	604b      	str	r3, [r1, #4]
 8001aa8:	4630      	mov	r0, r6
 8001aaa:	f000 f82f 	bl	8001b0c <__malloc_unlock>
 8001aae:	f104 000b 	add.w	r0, r4, #11
 8001ab2:	1d23      	adds	r3, r4, #4
 8001ab4:	f020 0007 	bic.w	r0, r0, #7
 8001ab8:	1ac2      	subs	r2, r0, r3
 8001aba:	bf1c      	itt	ne
 8001abc:	1a1b      	subne	r3, r3, r0
 8001abe:	50a3      	strne	r3, [r4, r2]
 8001ac0:	e7af      	b.n	8001a22 <_malloc_r+0x22>
 8001ac2:	6862      	ldr	r2, [r4, #4]
 8001ac4:	42a3      	cmp	r3, r4
 8001ac6:	bf0c      	ite	eq
 8001ac8:	f8c8 2000 	streq.w	r2, [r8]
 8001acc:	605a      	strne	r2, [r3, #4]
 8001ace:	e7eb      	b.n	8001aa8 <_malloc_r+0xa8>
 8001ad0:	4623      	mov	r3, r4
 8001ad2:	6864      	ldr	r4, [r4, #4]
 8001ad4:	e7ae      	b.n	8001a34 <_malloc_r+0x34>
 8001ad6:	463c      	mov	r4, r7
 8001ad8:	687f      	ldr	r7, [r7, #4]
 8001ada:	e7b6      	b.n	8001a4a <_malloc_r+0x4a>
 8001adc:	461a      	mov	r2, r3
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	42a3      	cmp	r3, r4
 8001ae2:	d1fb      	bne.n	8001adc <_malloc_r+0xdc>
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	6053      	str	r3, [r2, #4]
 8001ae8:	e7de      	b.n	8001aa8 <_malloc_r+0xa8>
 8001aea:	230c      	movs	r3, #12
 8001aec:	4630      	mov	r0, r6
 8001aee:	6033      	str	r3, [r6, #0]
 8001af0:	f000 f80c 	bl	8001b0c <__malloc_unlock>
 8001af4:	e794      	b.n	8001a20 <_malloc_r+0x20>
 8001af6:	6005      	str	r5, [r0, #0]
 8001af8:	e7d6      	b.n	8001aa8 <_malloc_r+0xa8>
 8001afa:	bf00      	nop
 8001afc:	200003f0 	.word	0x200003f0

08001b00 <__malloc_lock>:
 8001b00:	4801      	ldr	r0, [pc, #4]	@ (8001b08 <__malloc_lock+0x8>)
 8001b02:	f7ff bf11 	b.w	8001928 <__retarget_lock_acquire_recursive>
 8001b06:	bf00      	nop
 8001b08:	200003e8 	.word	0x200003e8

08001b0c <__malloc_unlock>:
 8001b0c:	4801      	ldr	r0, [pc, #4]	@ (8001b14 <__malloc_unlock+0x8>)
 8001b0e:	f7ff bf0c 	b.w	800192a <__retarget_lock_release_recursive>
 8001b12:	bf00      	nop
 8001b14:	200003e8 	.word	0x200003e8

08001b18 <__ssputs_r>:
 8001b18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001b1c:	461f      	mov	r7, r3
 8001b1e:	688e      	ldr	r6, [r1, #8]
 8001b20:	4682      	mov	sl, r0
 8001b22:	42be      	cmp	r6, r7
 8001b24:	460c      	mov	r4, r1
 8001b26:	4690      	mov	r8, r2
 8001b28:	680b      	ldr	r3, [r1, #0]
 8001b2a:	d82d      	bhi.n	8001b88 <__ssputs_r+0x70>
 8001b2c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001b30:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8001b34:	d026      	beq.n	8001b84 <__ssputs_r+0x6c>
 8001b36:	6965      	ldr	r5, [r4, #20]
 8001b38:	6909      	ldr	r1, [r1, #16]
 8001b3a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001b3e:	eba3 0901 	sub.w	r9, r3, r1
 8001b42:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001b46:	1c7b      	adds	r3, r7, #1
 8001b48:	444b      	add	r3, r9
 8001b4a:	106d      	asrs	r5, r5, #1
 8001b4c:	429d      	cmp	r5, r3
 8001b4e:	bf38      	it	cc
 8001b50:	461d      	movcc	r5, r3
 8001b52:	0553      	lsls	r3, r2, #21
 8001b54:	d527      	bpl.n	8001ba6 <__ssputs_r+0x8e>
 8001b56:	4629      	mov	r1, r5
 8001b58:	f7ff ff52 	bl	8001a00 <_malloc_r>
 8001b5c:	4606      	mov	r6, r0
 8001b5e:	b360      	cbz	r0, 8001bba <__ssputs_r+0xa2>
 8001b60:	464a      	mov	r2, r9
 8001b62:	6921      	ldr	r1, [r4, #16]
 8001b64:	f000 fafa 	bl	800215c <memcpy>
 8001b68:	89a3      	ldrh	r3, [r4, #12]
 8001b6a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8001b6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b72:	81a3      	strh	r3, [r4, #12]
 8001b74:	6126      	str	r6, [r4, #16]
 8001b76:	444e      	add	r6, r9
 8001b78:	6026      	str	r6, [r4, #0]
 8001b7a:	463e      	mov	r6, r7
 8001b7c:	6165      	str	r5, [r4, #20]
 8001b7e:	eba5 0509 	sub.w	r5, r5, r9
 8001b82:	60a5      	str	r5, [r4, #8]
 8001b84:	42be      	cmp	r6, r7
 8001b86:	d900      	bls.n	8001b8a <__ssputs_r+0x72>
 8001b88:	463e      	mov	r6, r7
 8001b8a:	4632      	mov	r2, r6
 8001b8c:	4641      	mov	r1, r8
 8001b8e:	6820      	ldr	r0, [r4, #0]
 8001b90:	f000 faac 	bl	80020ec <memmove>
 8001b94:	2000      	movs	r0, #0
 8001b96:	68a3      	ldr	r3, [r4, #8]
 8001b98:	1b9b      	subs	r3, r3, r6
 8001b9a:	60a3      	str	r3, [r4, #8]
 8001b9c:	6823      	ldr	r3, [r4, #0]
 8001b9e:	4433      	add	r3, r6
 8001ba0:	6023      	str	r3, [r4, #0]
 8001ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001ba6:	462a      	mov	r2, r5
 8001ba8:	f000 fae6 	bl	8002178 <_realloc_r>
 8001bac:	4606      	mov	r6, r0
 8001bae:	2800      	cmp	r0, #0
 8001bb0:	d1e0      	bne.n	8001b74 <__ssputs_r+0x5c>
 8001bb2:	4650      	mov	r0, sl
 8001bb4:	6921      	ldr	r1, [r4, #16]
 8001bb6:	f7ff feb9 	bl	800192c <_free_r>
 8001bba:	230c      	movs	r3, #12
 8001bbc:	f8ca 3000 	str.w	r3, [sl]
 8001bc0:	89a3      	ldrh	r3, [r4, #12]
 8001bc2:	f04f 30ff 	mov.w	r0, #4294967295
 8001bc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001bca:	81a3      	strh	r3, [r4, #12]
 8001bcc:	e7e9      	b.n	8001ba2 <__ssputs_r+0x8a>
	...

08001bd0 <_svfiprintf_r>:
 8001bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001bd4:	4698      	mov	r8, r3
 8001bd6:	898b      	ldrh	r3, [r1, #12]
 8001bd8:	4607      	mov	r7, r0
 8001bda:	061b      	lsls	r3, r3, #24
 8001bdc:	460d      	mov	r5, r1
 8001bde:	4614      	mov	r4, r2
 8001be0:	b09d      	sub	sp, #116	@ 0x74
 8001be2:	d510      	bpl.n	8001c06 <_svfiprintf_r+0x36>
 8001be4:	690b      	ldr	r3, [r1, #16]
 8001be6:	b973      	cbnz	r3, 8001c06 <_svfiprintf_r+0x36>
 8001be8:	2140      	movs	r1, #64	@ 0x40
 8001bea:	f7ff ff09 	bl	8001a00 <_malloc_r>
 8001bee:	6028      	str	r0, [r5, #0]
 8001bf0:	6128      	str	r0, [r5, #16]
 8001bf2:	b930      	cbnz	r0, 8001c02 <_svfiprintf_r+0x32>
 8001bf4:	230c      	movs	r3, #12
 8001bf6:	603b      	str	r3, [r7, #0]
 8001bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bfc:	b01d      	add	sp, #116	@ 0x74
 8001bfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001c02:	2340      	movs	r3, #64	@ 0x40
 8001c04:	616b      	str	r3, [r5, #20]
 8001c06:	2300      	movs	r3, #0
 8001c08:	9309      	str	r3, [sp, #36]	@ 0x24
 8001c0a:	2320      	movs	r3, #32
 8001c0c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001c10:	2330      	movs	r3, #48	@ 0x30
 8001c12:	f04f 0901 	mov.w	r9, #1
 8001c16:	f8cd 800c 	str.w	r8, [sp, #12]
 8001c1a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8001db4 <_svfiprintf_r+0x1e4>
 8001c1e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001c22:	4623      	mov	r3, r4
 8001c24:	469a      	mov	sl, r3
 8001c26:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001c2a:	b10a      	cbz	r2, 8001c30 <_svfiprintf_r+0x60>
 8001c2c:	2a25      	cmp	r2, #37	@ 0x25
 8001c2e:	d1f9      	bne.n	8001c24 <_svfiprintf_r+0x54>
 8001c30:	ebba 0b04 	subs.w	fp, sl, r4
 8001c34:	d00b      	beq.n	8001c4e <_svfiprintf_r+0x7e>
 8001c36:	465b      	mov	r3, fp
 8001c38:	4622      	mov	r2, r4
 8001c3a:	4629      	mov	r1, r5
 8001c3c:	4638      	mov	r0, r7
 8001c3e:	f7ff ff6b 	bl	8001b18 <__ssputs_r>
 8001c42:	3001      	adds	r0, #1
 8001c44:	f000 80a7 	beq.w	8001d96 <_svfiprintf_r+0x1c6>
 8001c48:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001c4a:	445a      	add	r2, fp
 8001c4c:	9209      	str	r2, [sp, #36]	@ 0x24
 8001c4e:	f89a 3000 	ldrb.w	r3, [sl]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	f000 809f 	beq.w	8001d96 <_svfiprintf_r+0x1c6>
 8001c58:	2300      	movs	r3, #0
 8001c5a:	f04f 32ff 	mov.w	r2, #4294967295
 8001c5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001c62:	f10a 0a01 	add.w	sl, sl, #1
 8001c66:	9304      	str	r3, [sp, #16]
 8001c68:	9307      	str	r3, [sp, #28]
 8001c6a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001c6e:	931a      	str	r3, [sp, #104]	@ 0x68
 8001c70:	4654      	mov	r4, sl
 8001c72:	2205      	movs	r2, #5
 8001c74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001c78:	484e      	ldr	r0, [pc, #312]	@ (8001db4 <_svfiprintf_r+0x1e4>)
 8001c7a:	f000 fa61 	bl	8002140 <memchr>
 8001c7e:	9a04      	ldr	r2, [sp, #16]
 8001c80:	b9d8      	cbnz	r0, 8001cba <_svfiprintf_r+0xea>
 8001c82:	06d0      	lsls	r0, r2, #27
 8001c84:	bf44      	itt	mi
 8001c86:	2320      	movmi	r3, #32
 8001c88:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001c8c:	0711      	lsls	r1, r2, #28
 8001c8e:	bf44      	itt	mi
 8001c90:	232b      	movmi	r3, #43	@ 0x2b
 8001c92:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001c96:	f89a 3000 	ldrb.w	r3, [sl]
 8001c9a:	2b2a      	cmp	r3, #42	@ 0x2a
 8001c9c:	d015      	beq.n	8001cca <_svfiprintf_r+0xfa>
 8001c9e:	4654      	mov	r4, sl
 8001ca0:	2000      	movs	r0, #0
 8001ca2:	f04f 0c0a 	mov.w	ip, #10
 8001ca6:	9a07      	ldr	r2, [sp, #28]
 8001ca8:	4621      	mov	r1, r4
 8001caa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001cae:	3b30      	subs	r3, #48	@ 0x30
 8001cb0:	2b09      	cmp	r3, #9
 8001cb2:	d94b      	bls.n	8001d4c <_svfiprintf_r+0x17c>
 8001cb4:	b1b0      	cbz	r0, 8001ce4 <_svfiprintf_r+0x114>
 8001cb6:	9207      	str	r2, [sp, #28]
 8001cb8:	e014      	b.n	8001ce4 <_svfiprintf_r+0x114>
 8001cba:	eba0 0308 	sub.w	r3, r0, r8
 8001cbe:	fa09 f303 	lsl.w	r3, r9, r3
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	46a2      	mov	sl, r4
 8001cc6:	9304      	str	r3, [sp, #16]
 8001cc8:	e7d2      	b.n	8001c70 <_svfiprintf_r+0xa0>
 8001cca:	9b03      	ldr	r3, [sp, #12]
 8001ccc:	1d19      	adds	r1, r3, #4
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	9103      	str	r1, [sp, #12]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	bfbb      	ittet	lt
 8001cd6:	425b      	neglt	r3, r3
 8001cd8:	f042 0202 	orrlt.w	r2, r2, #2
 8001cdc:	9307      	strge	r3, [sp, #28]
 8001cde:	9307      	strlt	r3, [sp, #28]
 8001ce0:	bfb8      	it	lt
 8001ce2:	9204      	strlt	r2, [sp, #16]
 8001ce4:	7823      	ldrb	r3, [r4, #0]
 8001ce6:	2b2e      	cmp	r3, #46	@ 0x2e
 8001ce8:	d10a      	bne.n	8001d00 <_svfiprintf_r+0x130>
 8001cea:	7863      	ldrb	r3, [r4, #1]
 8001cec:	2b2a      	cmp	r3, #42	@ 0x2a
 8001cee:	d132      	bne.n	8001d56 <_svfiprintf_r+0x186>
 8001cf0:	9b03      	ldr	r3, [sp, #12]
 8001cf2:	3402      	adds	r4, #2
 8001cf4:	1d1a      	adds	r2, r3, #4
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	9203      	str	r2, [sp, #12]
 8001cfa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001cfe:	9305      	str	r3, [sp, #20]
 8001d00:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8001db8 <_svfiprintf_r+0x1e8>
 8001d04:	2203      	movs	r2, #3
 8001d06:	4650      	mov	r0, sl
 8001d08:	7821      	ldrb	r1, [r4, #0]
 8001d0a:	f000 fa19 	bl	8002140 <memchr>
 8001d0e:	b138      	cbz	r0, 8001d20 <_svfiprintf_r+0x150>
 8001d10:	2240      	movs	r2, #64	@ 0x40
 8001d12:	9b04      	ldr	r3, [sp, #16]
 8001d14:	eba0 000a 	sub.w	r0, r0, sl
 8001d18:	4082      	lsls	r2, r0
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	3401      	adds	r4, #1
 8001d1e:	9304      	str	r3, [sp, #16]
 8001d20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001d24:	2206      	movs	r2, #6
 8001d26:	4825      	ldr	r0, [pc, #148]	@ (8001dbc <_svfiprintf_r+0x1ec>)
 8001d28:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001d2c:	f000 fa08 	bl	8002140 <memchr>
 8001d30:	2800      	cmp	r0, #0
 8001d32:	d036      	beq.n	8001da2 <_svfiprintf_r+0x1d2>
 8001d34:	4b22      	ldr	r3, [pc, #136]	@ (8001dc0 <_svfiprintf_r+0x1f0>)
 8001d36:	bb1b      	cbnz	r3, 8001d80 <_svfiprintf_r+0x1b0>
 8001d38:	9b03      	ldr	r3, [sp, #12]
 8001d3a:	3307      	adds	r3, #7
 8001d3c:	f023 0307 	bic.w	r3, r3, #7
 8001d40:	3308      	adds	r3, #8
 8001d42:	9303      	str	r3, [sp, #12]
 8001d44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001d46:	4433      	add	r3, r6
 8001d48:	9309      	str	r3, [sp, #36]	@ 0x24
 8001d4a:	e76a      	b.n	8001c22 <_svfiprintf_r+0x52>
 8001d4c:	460c      	mov	r4, r1
 8001d4e:	2001      	movs	r0, #1
 8001d50:	fb0c 3202 	mla	r2, ip, r2, r3
 8001d54:	e7a8      	b.n	8001ca8 <_svfiprintf_r+0xd8>
 8001d56:	2300      	movs	r3, #0
 8001d58:	f04f 0c0a 	mov.w	ip, #10
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	3401      	adds	r4, #1
 8001d60:	9305      	str	r3, [sp, #20]
 8001d62:	4620      	mov	r0, r4
 8001d64:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001d68:	3a30      	subs	r2, #48	@ 0x30
 8001d6a:	2a09      	cmp	r2, #9
 8001d6c:	d903      	bls.n	8001d76 <_svfiprintf_r+0x1a6>
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d0c6      	beq.n	8001d00 <_svfiprintf_r+0x130>
 8001d72:	9105      	str	r1, [sp, #20]
 8001d74:	e7c4      	b.n	8001d00 <_svfiprintf_r+0x130>
 8001d76:	4604      	mov	r4, r0
 8001d78:	2301      	movs	r3, #1
 8001d7a:	fb0c 2101 	mla	r1, ip, r1, r2
 8001d7e:	e7f0      	b.n	8001d62 <_svfiprintf_r+0x192>
 8001d80:	ab03      	add	r3, sp, #12
 8001d82:	9300      	str	r3, [sp, #0]
 8001d84:	462a      	mov	r2, r5
 8001d86:	4638      	mov	r0, r7
 8001d88:	4b0e      	ldr	r3, [pc, #56]	@ (8001dc4 <_svfiprintf_r+0x1f4>)
 8001d8a:	a904      	add	r1, sp, #16
 8001d8c:	f3af 8000 	nop.w
 8001d90:	1c42      	adds	r2, r0, #1
 8001d92:	4606      	mov	r6, r0
 8001d94:	d1d6      	bne.n	8001d44 <_svfiprintf_r+0x174>
 8001d96:	89ab      	ldrh	r3, [r5, #12]
 8001d98:	065b      	lsls	r3, r3, #25
 8001d9a:	f53f af2d 	bmi.w	8001bf8 <_svfiprintf_r+0x28>
 8001d9e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001da0:	e72c      	b.n	8001bfc <_svfiprintf_r+0x2c>
 8001da2:	ab03      	add	r3, sp, #12
 8001da4:	9300      	str	r3, [sp, #0]
 8001da6:	462a      	mov	r2, r5
 8001da8:	4638      	mov	r0, r7
 8001daa:	4b06      	ldr	r3, [pc, #24]	@ (8001dc4 <_svfiprintf_r+0x1f4>)
 8001dac:	a904      	add	r1, sp, #16
 8001dae:	f000 f87d 	bl	8001eac <_printf_i>
 8001db2:	e7ed      	b.n	8001d90 <_svfiprintf_r+0x1c0>
 8001db4:	0800246a 	.word	0x0800246a
 8001db8:	08002470 	.word	0x08002470
 8001dbc:	08002474 	.word	0x08002474
 8001dc0:	00000000 	.word	0x00000000
 8001dc4:	08001b19 	.word	0x08001b19

08001dc8 <_printf_common>:
 8001dc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001dcc:	4616      	mov	r6, r2
 8001dce:	4698      	mov	r8, r3
 8001dd0:	688a      	ldr	r2, [r1, #8]
 8001dd2:	690b      	ldr	r3, [r1, #16]
 8001dd4:	4607      	mov	r7, r0
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	bfb8      	it	lt
 8001dda:	4613      	movlt	r3, r2
 8001ddc:	6033      	str	r3, [r6, #0]
 8001dde:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001de2:	460c      	mov	r4, r1
 8001de4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001de8:	b10a      	cbz	r2, 8001dee <_printf_common+0x26>
 8001dea:	3301      	adds	r3, #1
 8001dec:	6033      	str	r3, [r6, #0]
 8001dee:	6823      	ldr	r3, [r4, #0]
 8001df0:	0699      	lsls	r1, r3, #26
 8001df2:	bf42      	ittt	mi
 8001df4:	6833      	ldrmi	r3, [r6, #0]
 8001df6:	3302      	addmi	r3, #2
 8001df8:	6033      	strmi	r3, [r6, #0]
 8001dfa:	6825      	ldr	r5, [r4, #0]
 8001dfc:	f015 0506 	ands.w	r5, r5, #6
 8001e00:	d106      	bne.n	8001e10 <_printf_common+0x48>
 8001e02:	f104 0a19 	add.w	sl, r4, #25
 8001e06:	68e3      	ldr	r3, [r4, #12]
 8001e08:	6832      	ldr	r2, [r6, #0]
 8001e0a:	1a9b      	subs	r3, r3, r2
 8001e0c:	42ab      	cmp	r3, r5
 8001e0e:	dc2b      	bgt.n	8001e68 <_printf_common+0xa0>
 8001e10:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001e14:	6822      	ldr	r2, [r4, #0]
 8001e16:	3b00      	subs	r3, #0
 8001e18:	bf18      	it	ne
 8001e1a:	2301      	movne	r3, #1
 8001e1c:	0692      	lsls	r2, r2, #26
 8001e1e:	d430      	bmi.n	8001e82 <_printf_common+0xba>
 8001e20:	4641      	mov	r1, r8
 8001e22:	4638      	mov	r0, r7
 8001e24:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001e28:	47c8      	blx	r9
 8001e2a:	3001      	adds	r0, #1
 8001e2c:	d023      	beq.n	8001e76 <_printf_common+0xae>
 8001e2e:	6823      	ldr	r3, [r4, #0]
 8001e30:	6922      	ldr	r2, [r4, #16]
 8001e32:	f003 0306 	and.w	r3, r3, #6
 8001e36:	2b04      	cmp	r3, #4
 8001e38:	bf14      	ite	ne
 8001e3a:	2500      	movne	r5, #0
 8001e3c:	6833      	ldreq	r3, [r6, #0]
 8001e3e:	f04f 0600 	mov.w	r6, #0
 8001e42:	bf08      	it	eq
 8001e44:	68e5      	ldreq	r5, [r4, #12]
 8001e46:	f104 041a 	add.w	r4, r4, #26
 8001e4a:	bf08      	it	eq
 8001e4c:	1aed      	subeq	r5, r5, r3
 8001e4e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8001e52:	bf08      	it	eq
 8001e54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	bfc4      	itt	gt
 8001e5c:	1a9b      	subgt	r3, r3, r2
 8001e5e:	18ed      	addgt	r5, r5, r3
 8001e60:	42b5      	cmp	r5, r6
 8001e62:	d11a      	bne.n	8001e9a <_printf_common+0xd2>
 8001e64:	2000      	movs	r0, #0
 8001e66:	e008      	b.n	8001e7a <_printf_common+0xb2>
 8001e68:	2301      	movs	r3, #1
 8001e6a:	4652      	mov	r2, sl
 8001e6c:	4641      	mov	r1, r8
 8001e6e:	4638      	mov	r0, r7
 8001e70:	47c8      	blx	r9
 8001e72:	3001      	adds	r0, #1
 8001e74:	d103      	bne.n	8001e7e <_printf_common+0xb6>
 8001e76:	f04f 30ff 	mov.w	r0, #4294967295
 8001e7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001e7e:	3501      	adds	r5, #1
 8001e80:	e7c1      	b.n	8001e06 <_printf_common+0x3e>
 8001e82:	2030      	movs	r0, #48	@ 0x30
 8001e84:	18e1      	adds	r1, r4, r3
 8001e86:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001e8a:	1c5a      	adds	r2, r3, #1
 8001e8c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001e90:	4422      	add	r2, r4
 8001e92:	3302      	adds	r3, #2
 8001e94:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001e98:	e7c2      	b.n	8001e20 <_printf_common+0x58>
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	4622      	mov	r2, r4
 8001e9e:	4641      	mov	r1, r8
 8001ea0:	4638      	mov	r0, r7
 8001ea2:	47c8      	blx	r9
 8001ea4:	3001      	adds	r0, #1
 8001ea6:	d0e6      	beq.n	8001e76 <_printf_common+0xae>
 8001ea8:	3601      	adds	r6, #1
 8001eaa:	e7d9      	b.n	8001e60 <_printf_common+0x98>

08001eac <_printf_i>:
 8001eac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001eb0:	7e0f      	ldrb	r7, [r1, #24]
 8001eb2:	4691      	mov	r9, r2
 8001eb4:	2f78      	cmp	r7, #120	@ 0x78
 8001eb6:	4680      	mov	r8, r0
 8001eb8:	460c      	mov	r4, r1
 8001eba:	469a      	mov	sl, r3
 8001ebc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001ebe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001ec2:	d807      	bhi.n	8001ed4 <_printf_i+0x28>
 8001ec4:	2f62      	cmp	r7, #98	@ 0x62
 8001ec6:	d80a      	bhi.n	8001ede <_printf_i+0x32>
 8001ec8:	2f00      	cmp	r7, #0
 8001eca:	f000 80d3 	beq.w	8002074 <_printf_i+0x1c8>
 8001ece:	2f58      	cmp	r7, #88	@ 0x58
 8001ed0:	f000 80ba 	beq.w	8002048 <_printf_i+0x19c>
 8001ed4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001ed8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001edc:	e03a      	b.n	8001f54 <_printf_i+0xa8>
 8001ede:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001ee2:	2b15      	cmp	r3, #21
 8001ee4:	d8f6      	bhi.n	8001ed4 <_printf_i+0x28>
 8001ee6:	a101      	add	r1, pc, #4	@ (adr r1, 8001eec <_printf_i+0x40>)
 8001ee8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001eec:	08001f45 	.word	0x08001f45
 8001ef0:	08001f59 	.word	0x08001f59
 8001ef4:	08001ed5 	.word	0x08001ed5
 8001ef8:	08001ed5 	.word	0x08001ed5
 8001efc:	08001ed5 	.word	0x08001ed5
 8001f00:	08001ed5 	.word	0x08001ed5
 8001f04:	08001f59 	.word	0x08001f59
 8001f08:	08001ed5 	.word	0x08001ed5
 8001f0c:	08001ed5 	.word	0x08001ed5
 8001f10:	08001ed5 	.word	0x08001ed5
 8001f14:	08001ed5 	.word	0x08001ed5
 8001f18:	0800205b 	.word	0x0800205b
 8001f1c:	08001f83 	.word	0x08001f83
 8001f20:	08002015 	.word	0x08002015
 8001f24:	08001ed5 	.word	0x08001ed5
 8001f28:	08001ed5 	.word	0x08001ed5
 8001f2c:	0800207d 	.word	0x0800207d
 8001f30:	08001ed5 	.word	0x08001ed5
 8001f34:	08001f83 	.word	0x08001f83
 8001f38:	08001ed5 	.word	0x08001ed5
 8001f3c:	08001ed5 	.word	0x08001ed5
 8001f40:	0800201d 	.word	0x0800201d
 8001f44:	6833      	ldr	r3, [r6, #0]
 8001f46:	1d1a      	adds	r2, r3, #4
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	6032      	str	r2, [r6, #0]
 8001f4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001f50:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001f54:	2301      	movs	r3, #1
 8001f56:	e09e      	b.n	8002096 <_printf_i+0x1ea>
 8001f58:	6833      	ldr	r3, [r6, #0]
 8001f5a:	6820      	ldr	r0, [r4, #0]
 8001f5c:	1d19      	adds	r1, r3, #4
 8001f5e:	6031      	str	r1, [r6, #0]
 8001f60:	0606      	lsls	r6, r0, #24
 8001f62:	d501      	bpl.n	8001f68 <_printf_i+0xbc>
 8001f64:	681d      	ldr	r5, [r3, #0]
 8001f66:	e003      	b.n	8001f70 <_printf_i+0xc4>
 8001f68:	0645      	lsls	r5, r0, #25
 8001f6a:	d5fb      	bpl.n	8001f64 <_printf_i+0xb8>
 8001f6c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001f70:	2d00      	cmp	r5, #0
 8001f72:	da03      	bge.n	8001f7c <_printf_i+0xd0>
 8001f74:	232d      	movs	r3, #45	@ 0x2d
 8001f76:	426d      	negs	r5, r5
 8001f78:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001f7c:	230a      	movs	r3, #10
 8001f7e:	4859      	ldr	r0, [pc, #356]	@ (80020e4 <_printf_i+0x238>)
 8001f80:	e011      	b.n	8001fa6 <_printf_i+0xfa>
 8001f82:	6821      	ldr	r1, [r4, #0]
 8001f84:	6833      	ldr	r3, [r6, #0]
 8001f86:	0608      	lsls	r0, r1, #24
 8001f88:	f853 5b04 	ldr.w	r5, [r3], #4
 8001f8c:	d402      	bmi.n	8001f94 <_printf_i+0xe8>
 8001f8e:	0649      	lsls	r1, r1, #25
 8001f90:	bf48      	it	mi
 8001f92:	b2ad      	uxthmi	r5, r5
 8001f94:	2f6f      	cmp	r7, #111	@ 0x6f
 8001f96:	6033      	str	r3, [r6, #0]
 8001f98:	bf14      	ite	ne
 8001f9a:	230a      	movne	r3, #10
 8001f9c:	2308      	moveq	r3, #8
 8001f9e:	4851      	ldr	r0, [pc, #324]	@ (80020e4 <_printf_i+0x238>)
 8001fa0:	2100      	movs	r1, #0
 8001fa2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001fa6:	6866      	ldr	r6, [r4, #4]
 8001fa8:	2e00      	cmp	r6, #0
 8001faa:	bfa8      	it	ge
 8001fac:	6821      	ldrge	r1, [r4, #0]
 8001fae:	60a6      	str	r6, [r4, #8]
 8001fb0:	bfa4      	itt	ge
 8001fb2:	f021 0104 	bicge.w	r1, r1, #4
 8001fb6:	6021      	strge	r1, [r4, #0]
 8001fb8:	b90d      	cbnz	r5, 8001fbe <_printf_i+0x112>
 8001fba:	2e00      	cmp	r6, #0
 8001fbc:	d04b      	beq.n	8002056 <_printf_i+0x1aa>
 8001fbe:	4616      	mov	r6, r2
 8001fc0:	fbb5 f1f3 	udiv	r1, r5, r3
 8001fc4:	fb03 5711 	mls	r7, r3, r1, r5
 8001fc8:	5dc7      	ldrb	r7, [r0, r7]
 8001fca:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001fce:	462f      	mov	r7, r5
 8001fd0:	42bb      	cmp	r3, r7
 8001fd2:	460d      	mov	r5, r1
 8001fd4:	d9f4      	bls.n	8001fc0 <_printf_i+0x114>
 8001fd6:	2b08      	cmp	r3, #8
 8001fd8:	d10b      	bne.n	8001ff2 <_printf_i+0x146>
 8001fda:	6823      	ldr	r3, [r4, #0]
 8001fdc:	07df      	lsls	r7, r3, #31
 8001fde:	d508      	bpl.n	8001ff2 <_printf_i+0x146>
 8001fe0:	6923      	ldr	r3, [r4, #16]
 8001fe2:	6861      	ldr	r1, [r4, #4]
 8001fe4:	4299      	cmp	r1, r3
 8001fe6:	bfde      	ittt	le
 8001fe8:	2330      	movle	r3, #48	@ 0x30
 8001fea:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001fee:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001ff2:	1b92      	subs	r2, r2, r6
 8001ff4:	6122      	str	r2, [r4, #16]
 8001ff6:	464b      	mov	r3, r9
 8001ff8:	4621      	mov	r1, r4
 8001ffa:	4640      	mov	r0, r8
 8001ffc:	f8cd a000 	str.w	sl, [sp]
 8002000:	aa03      	add	r2, sp, #12
 8002002:	f7ff fee1 	bl	8001dc8 <_printf_common>
 8002006:	3001      	adds	r0, #1
 8002008:	d14a      	bne.n	80020a0 <_printf_i+0x1f4>
 800200a:	f04f 30ff 	mov.w	r0, #4294967295
 800200e:	b004      	add	sp, #16
 8002010:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002014:	6823      	ldr	r3, [r4, #0]
 8002016:	f043 0320 	orr.w	r3, r3, #32
 800201a:	6023      	str	r3, [r4, #0]
 800201c:	2778      	movs	r7, #120	@ 0x78
 800201e:	4832      	ldr	r0, [pc, #200]	@ (80020e8 <_printf_i+0x23c>)
 8002020:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002024:	6823      	ldr	r3, [r4, #0]
 8002026:	6831      	ldr	r1, [r6, #0]
 8002028:	061f      	lsls	r7, r3, #24
 800202a:	f851 5b04 	ldr.w	r5, [r1], #4
 800202e:	d402      	bmi.n	8002036 <_printf_i+0x18a>
 8002030:	065f      	lsls	r7, r3, #25
 8002032:	bf48      	it	mi
 8002034:	b2ad      	uxthmi	r5, r5
 8002036:	6031      	str	r1, [r6, #0]
 8002038:	07d9      	lsls	r1, r3, #31
 800203a:	bf44      	itt	mi
 800203c:	f043 0320 	orrmi.w	r3, r3, #32
 8002040:	6023      	strmi	r3, [r4, #0]
 8002042:	b11d      	cbz	r5, 800204c <_printf_i+0x1a0>
 8002044:	2310      	movs	r3, #16
 8002046:	e7ab      	b.n	8001fa0 <_printf_i+0xf4>
 8002048:	4826      	ldr	r0, [pc, #152]	@ (80020e4 <_printf_i+0x238>)
 800204a:	e7e9      	b.n	8002020 <_printf_i+0x174>
 800204c:	6823      	ldr	r3, [r4, #0]
 800204e:	f023 0320 	bic.w	r3, r3, #32
 8002052:	6023      	str	r3, [r4, #0]
 8002054:	e7f6      	b.n	8002044 <_printf_i+0x198>
 8002056:	4616      	mov	r6, r2
 8002058:	e7bd      	b.n	8001fd6 <_printf_i+0x12a>
 800205a:	6833      	ldr	r3, [r6, #0]
 800205c:	6825      	ldr	r5, [r4, #0]
 800205e:	1d18      	adds	r0, r3, #4
 8002060:	6961      	ldr	r1, [r4, #20]
 8002062:	6030      	str	r0, [r6, #0]
 8002064:	062e      	lsls	r6, r5, #24
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	d501      	bpl.n	800206e <_printf_i+0x1c2>
 800206a:	6019      	str	r1, [r3, #0]
 800206c:	e002      	b.n	8002074 <_printf_i+0x1c8>
 800206e:	0668      	lsls	r0, r5, #25
 8002070:	d5fb      	bpl.n	800206a <_printf_i+0x1be>
 8002072:	8019      	strh	r1, [r3, #0]
 8002074:	2300      	movs	r3, #0
 8002076:	4616      	mov	r6, r2
 8002078:	6123      	str	r3, [r4, #16]
 800207a:	e7bc      	b.n	8001ff6 <_printf_i+0x14a>
 800207c:	6833      	ldr	r3, [r6, #0]
 800207e:	2100      	movs	r1, #0
 8002080:	1d1a      	adds	r2, r3, #4
 8002082:	6032      	str	r2, [r6, #0]
 8002084:	681e      	ldr	r6, [r3, #0]
 8002086:	6862      	ldr	r2, [r4, #4]
 8002088:	4630      	mov	r0, r6
 800208a:	f000 f859 	bl	8002140 <memchr>
 800208e:	b108      	cbz	r0, 8002094 <_printf_i+0x1e8>
 8002090:	1b80      	subs	r0, r0, r6
 8002092:	6060      	str	r0, [r4, #4]
 8002094:	6863      	ldr	r3, [r4, #4]
 8002096:	6123      	str	r3, [r4, #16]
 8002098:	2300      	movs	r3, #0
 800209a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800209e:	e7aa      	b.n	8001ff6 <_printf_i+0x14a>
 80020a0:	4632      	mov	r2, r6
 80020a2:	4649      	mov	r1, r9
 80020a4:	4640      	mov	r0, r8
 80020a6:	6923      	ldr	r3, [r4, #16]
 80020a8:	47d0      	blx	sl
 80020aa:	3001      	adds	r0, #1
 80020ac:	d0ad      	beq.n	800200a <_printf_i+0x15e>
 80020ae:	6823      	ldr	r3, [r4, #0]
 80020b0:	079b      	lsls	r3, r3, #30
 80020b2:	d413      	bmi.n	80020dc <_printf_i+0x230>
 80020b4:	68e0      	ldr	r0, [r4, #12]
 80020b6:	9b03      	ldr	r3, [sp, #12]
 80020b8:	4298      	cmp	r0, r3
 80020ba:	bfb8      	it	lt
 80020bc:	4618      	movlt	r0, r3
 80020be:	e7a6      	b.n	800200e <_printf_i+0x162>
 80020c0:	2301      	movs	r3, #1
 80020c2:	4632      	mov	r2, r6
 80020c4:	4649      	mov	r1, r9
 80020c6:	4640      	mov	r0, r8
 80020c8:	47d0      	blx	sl
 80020ca:	3001      	adds	r0, #1
 80020cc:	d09d      	beq.n	800200a <_printf_i+0x15e>
 80020ce:	3501      	adds	r5, #1
 80020d0:	68e3      	ldr	r3, [r4, #12]
 80020d2:	9903      	ldr	r1, [sp, #12]
 80020d4:	1a5b      	subs	r3, r3, r1
 80020d6:	42ab      	cmp	r3, r5
 80020d8:	dcf2      	bgt.n	80020c0 <_printf_i+0x214>
 80020da:	e7eb      	b.n	80020b4 <_printf_i+0x208>
 80020dc:	2500      	movs	r5, #0
 80020de:	f104 0619 	add.w	r6, r4, #25
 80020e2:	e7f5      	b.n	80020d0 <_printf_i+0x224>
 80020e4:	0800247b 	.word	0x0800247b
 80020e8:	0800248c 	.word	0x0800248c

080020ec <memmove>:
 80020ec:	4288      	cmp	r0, r1
 80020ee:	b510      	push	{r4, lr}
 80020f0:	eb01 0402 	add.w	r4, r1, r2
 80020f4:	d902      	bls.n	80020fc <memmove+0x10>
 80020f6:	4284      	cmp	r4, r0
 80020f8:	4623      	mov	r3, r4
 80020fa:	d807      	bhi.n	800210c <memmove+0x20>
 80020fc:	1e43      	subs	r3, r0, #1
 80020fe:	42a1      	cmp	r1, r4
 8002100:	d008      	beq.n	8002114 <memmove+0x28>
 8002102:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002106:	f803 2f01 	strb.w	r2, [r3, #1]!
 800210a:	e7f8      	b.n	80020fe <memmove+0x12>
 800210c:	4601      	mov	r1, r0
 800210e:	4402      	add	r2, r0
 8002110:	428a      	cmp	r2, r1
 8002112:	d100      	bne.n	8002116 <memmove+0x2a>
 8002114:	bd10      	pop	{r4, pc}
 8002116:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800211a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800211e:	e7f7      	b.n	8002110 <memmove+0x24>

08002120 <_sbrk_r>:
 8002120:	b538      	push	{r3, r4, r5, lr}
 8002122:	2300      	movs	r3, #0
 8002124:	4d05      	ldr	r5, [pc, #20]	@ (800213c <_sbrk_r+0x1c>)
 8002126:	4604      	mov	r4, r0
 8002128:	4608      	mov	r0, r1
 800212a:	602b      	str	r3, [r5, #0]
 800212c:	f7fe fe22 	bl	8000d74 <_sbrk>
 8002130:	1c43      	adds	r3, r0, #1
 8002132:	d102      	bne.n	800213a <_sbrk_r+0x1a>
 8002134:	682b      	ldr	r3, [r5, #0]
 8002136:	b103      	cbz	r3, 800213a <_sbrk_r+0x1a>
 8002138:	6023      	str	r3, [r4, #0]
 800213a:	bd38      	pop	{r3, r4, r5, pc}
 800213c:	200003e4 	.word	0x200003e4

08002140 <memchr>:
 8002140:	4603      	mov	r3, r0
 8002142:	b510      	push	{r4, lr}
 8002144:	b2c9      	uxtb	r1, r1
 8002146:	4402      	add	r2, r0
 8002148:	4293      	cmp	r3, r2
 800214a:	4618      	mov	r0, r3
 800214c:	d101      	bne.n	8002152 <memchr+0x12>
 800214e:	2000      	movs	r0, #0
 8002150:	e003      	b.n	800215a <memchr+0x1a>
 8002152:	7804      	ldrb	r4, [r0, #0]
 8002154:	3301      	adds	r3, #1
 8002156:	428c      	cmp	r4, r1
 8002158:	d1f6      	bne.n	8002148 <memchr+0x8>
 800215a:	bd10      	pop	{r4, pc}

0800215c <memcpy>:
 800215c:	440a      	add	r2, r1
 800215e:	4291      	cmp	r1, r2
 8002160:	f100 33ff 	add.w	r3, r0, #4294967295
 8002164:	d100      	bne.n	8002168 <memcpy+0xc>
 8002166:	4770      	bx	lr
 8002168:	b510      	push	{r4, lr}
 800216a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800216e:	4291      	cmp	r1, r2
 8002170:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002174:	d1f9      	bne.n	800216a <memcpy+0xe>
 8002176:	bd10      	pop	{r4, pc}

08002178 <_realloc_r>:
 8002178:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800217c:	4680      	mov	r8, r0
 800217e:	4615      	mov	r5, r2
 8002180:	460c      	mov	r4, r1
 8002182:	b921      	cbnz	r1, 800218e <_realloc_r+0x16>
 8002184:	4611      	mov	r1, r2
 8002186:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800218a:	f7ff bc39 	b.w	8001a00 <_malloc_r>
 800218e:	b92a      	cbnz	r2, 800219c <_realloc_r+0x24>
 8002190:	f7ff fbcc 	bl	800192c <_free_r>
 8002194:	2400      	movs	r4, #0
 8002196:	4620      	mov	r0, r4
 8002198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800219c:	f000 f81a 	bl	80021d4 <_malloc_usable_size_r>
 80021a0:	4285      	cmp	r5, r0
 80021a2:	4606      	mov	r6, r0
 80021a4:	d802      	bhi.n	80021ac <_realloc_r+0x34>
 80021a6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80021aa:	d8f4      	bhi.n	8002196 <_realloc_r+0x1e>
 80021ac:	4629      	mov	r1, r5
 80021ae:	4640      	mov	r0, r8
 80021b0:	f7ff fc26 	bl	8001a00 <_malloc_r>
 80021b4:	4607      	mov	r7, r0
 80021b6:	2800      	cmp	r0, #0
 80021b8:	d0ec      	beq.n	8002194 <_realloc_r+0x1c>
 80021ba:	42b5      	cmp	r5, r6
 80021bc:	462a      	mov	r2, r5
 80021be:	4621      	mov	r1, r4
 80021c0:	bf28      	it	cs
 80021c2:	4632      	movcs	r2, r6
 80021c4:	f7ff ffca 	bl	800215c <memcpy>
 80021c8:	4621      	mov	r1, r4
 80021ca:	4640      	mov	r0, r8
 80021cc:	f7ff fbae 	bl	800192c <_free_r>
 80021d0:	463c      	mov	r4, r7
 80021d2:	e7e0      	b.n	8002196 <_realloc_r+0x1e>

080021d4 <_malloc_usable_size_r>:
 80021d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80021d8:	1f18      	subs	r0, r3, #4
 80021da:	2b00      	cmp	r3, #0
 80021dc:	bfbc      	itt	lt
 80021de:	580b      	ldrlt	r3, [r1, r0]
 80021e0:	18c0      	addlt	r0, r0, r3
 80021e2:	4770      	bx	lr

080021e4 <_init>:
 80021e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021e6:	bf00      	nop
 80021e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021ea:	bc08      	pop	{r3}
 80021ec:	469e      	mov	lr, r3
 80021ee:	4770      	bx	lr

080021f0 <_fini>:
 80021f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021f2:	bf00      	nop
 80021f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021f6:	bc08      	pop	{r3}
 80021f8:	469e      	mov	lr, r3
 80021fa:	4770      	bx	lr
