
CAN_Bluepill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001c08  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08001d14  08001d14  00011d14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001db0  08001db0  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08001db0  08001db0  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001db0  08001db0  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001db0  08001db0  00011db0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001db4  08001db4  00011db4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08001db8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000318  2000005c  08001e14  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000374  08001e14  00020374  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002ccb  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000e36  00000000  00000000  00022d93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000400  00000000  00000000  00023bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000002dc  00000000  00000000  00023fd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001656f  00000000  00000000  000242ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000049fb  00000000  00000000  0003a81b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007f6a9  00000000  00000000  0003f216  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000137c  00000000  00000000  000be8c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000bfc3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001cfc 	.word	0x08001cfc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08001cfc 	.word	0x08001cfc

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800015c:	b480      	push	{r7}
 800015e:	b083      	sub	sp, #12
 8000160:	af00      	add	r7, sp, #0
 8000162:	4603      	mov	r3, r0
 8000164:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800016a:	2b00      	cmp	r3, #0
 800016c:	db0b      	blt.n	8000186 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800016e:	79fb      	ldrb	r3, [r7, #7]
 8000170:	f003 021f 	and.w	r2, r3, #31
 8000174:	4906      	ldr	r1, [pc, #24]	; (8000190 <__NVIC_EnableIRQ+0x34>)
 8000176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800017a:	095b      	lsrs	r3, r3, #5
 800017c:	2001      	movs	r0, #1
 800017e:	fa00 f202 	lsl.w	r2, r0, r2
 8000182:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000186:	bf00      	nop
 8000188:	370c      	adds	r7, #12
 800018a:	46bd      	mov	sp, r7
 800018c:	bc80      	pop	{r7}
 800018e:	4770      	bx	lr
 8000190:	e000e100 	.word	0xe000e100

08000194 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000194:	b480      	push	{r7}
 8000196:	b083      	sub	sp, #12
 8000198:	af00      	add	r7, sp, #0
 800019a:	4603      	mov	r3, r0
 800019c:	6039      	str	r1, [r7, #0]
 800019e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001a4:	2b00      	cmp	r3, #0
 80001a6:	db0a      	blt.n	80001be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001a8:	683b      	ldr	r3, [r7, #0]
 80001aa:	b2da      	uxtb	r2, r3
 80001ac:	490c      	ldr	r1, [pc, #48]	; (80001e0 <__NVIC_SetPriority+0x4c>)
 80001ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001b2:	0112      	lsls	r2, r2, #4
 80001b4:	b2d2      	uxtb	r2, r2
 80001b6:	440b      	add	r3, r1
 80001b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80001bc:	e00a      	b.n	80001d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001be:	683b      	ldr	r3, [r7, #0]
 80001c0:	b2da      	uxtb	r2, r3
 80001c2:	4908      	ldr	r1, [pc, #32]	; (80001e4 <__NVIC_SetPriority+0x50>)
 80001c4:	79fb      	ldrb	r3, [r7, #7]
 80001c6:	f003 030f 	and.w	r3, r3, #15
 80001ca:	3b04      	subs	r3, #4
 80001cc:	0112      	lsls	r2, r2, #4
 80001ce:	b2d2      	uxtb	r2, r2
 80001d0:	440b      	add	r3, r1
 80001d2:	761a      	strb	r2, [r3, #24]
}
 80001d4:	bf00      	nop
 80001d6:	370c      	adds	r7, #12
 80001d8:	46bd      	mov	sp, r7
 80001da:	bc80      	pop	{r7}
 80001dc:	4770      	bx	lr
 80001de:	bf00      	nop
 80001e0:	e000e100 	.word	0xe000e100
 80001e4:	e000ed00 	.word	0xe000ed00

080001e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001e8:	b5b0      	push	{r4, r5, r7, lr}
 80001ea:	b0c6      	sub	sp, #280	; 0x118
 80001ec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ee:	f000 fbad 	bl	800094c <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001f2:	f000 f865 	bl	80002c0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  SysTick_Init(Clock_Frequency);
 80001f6:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80001fa:	f000 f89d 	bl	8000338 <SysTick_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */
  LED_Init();
 80001fe:	f000 f8dd 	bl	80003bc <LED_Init>
  Delay_Init();
 8000202:	f000 f905 	bl	8000410 <Delay_Init>
  UART_Init();
 8000206:	f000 f9bd 	bl	8000584 <UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  char startmsg[] = "Starting UART....\n";
 800020a:	4b29      	ldr	r3, [pc, #164]	; (80002b0 <main+0xc8>)
 800020c:	f507 7480 	add.w	r4, r7, #256	; 0x100
 8000210:	461d      	mov	r5, r3
 8000212:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000214:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000216:	682b      	ldr	r3, [r5, #0]
 8000218:	461a      	mov	r2, r3
 800021a:	8022      	strh	r2, [r4, #0]
 800021c:	3402      	adds	r4, #2
 800021e:	0c1b      	lsrs	r3, r3, #16
 8000220:	7023      	strb	r3, [r4, #0]
  UART_Send((uint8_t*)startmsg, strlen(startmsg));
 8000222:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000226:	4618      	mov	r0, r3
 8000228:	f7ff ff90 	bl	800014c <strlen>
 800022c:	4603      	mov	r3, r0
 800022e:	b29a      	uxth	r2, r3
 8000230:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000234:	4611      	mov	r1, r2
 8000236:	4618      	mov	r0, r3
 8000238:	f000 f9dc 	bl	80005f4 <UART_Send>

  int delayId_0 = Delay_Start(0, 500);
 800023c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000240:	2000      	movs	r0, #0
 8000242:	f000 f915 	bl	8000470 <Delay_Start>
 8000246:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  Delay_ErrorHandler(delayId_0);
 800024a:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 800024e:	f000 f973 	bl	8000538 <Delay_ErrorHandler>
  uint8_t receivedData[RX_BUFFER_SIZE];
  char messageBuffer[RX_BUFFER_SIZE];

  while (1)
  {
      if (Delay_Completed(0)) {
 8000252:	2000      	movs	r0, #0
 8000254:	f000 f93a 	bl	80004cc <Delay_Completed>
 8000258:	4603      	mov	r3, r0
 800025a:	2b00      	cmp	r3, #0
 800025c:	d006      	beq.n	800026c <main+0x84>
          LED_Toggle();
 800025e:	f000 f8c9 	bl	80003f4 <LED_Toggle>
          Delay_Start(0, 500);      // Restart the delay
 8000262:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000266:	2000      	movs	r0, #0
 8000268:	f000 f902 	bl	8000470 <Delay_Start>
      }


      /* Check if data has been received */
      if (rxHead != rxTail) {
 800026c:	4b11      	ldr	r3, [pc, #68]	; (80002b4 <main+0xcc>)
 800026e:	781b      	ldrb	r3, [r3, #0]
 8000270:	b2da      	uxtb	r2, r3
 8000272:	4b11      	ldr	r3, [pc, #68]	; (80002b8 <main+0xd0>)
 8000274:	781b      	ldrb	r3, [r3, #0]
 8000276:	b2db      	uxtb	r3, r3
 8000278:	429a      	cmp	r2, r3
 800027a:	d0ea      	beq.n	8000252 <main+0x6a>
          /* Receive the data */
          UART_Receive(receivedData, 1); // Reading one byte for simplicity
 800027c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000280:	2101      	movs	r1, #1
 8000282:	4618      	mov	r0, r3
 8000284:	f000 fa0c 	bl	80006a0 <UART_Receive>

          /* Format the received data into a single string */
          snprintf(messageBuffer, sizeof(messageBuffer), "Received: %c\n", receivedData[0]);
 8000288:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800028c:	4638      	mov	r0, r7
 800028e:	4a0b      	ldr	r2, [pc, #44]	; (80002bc <main+0xd4>)
 8000290:	2180      	movs	r1, #128	; 0x80
 8000292:	f001 f86d 	bl	8001370 <sniprintf>

          /* Send the formatted message */
          UART_Send((uint8_t*)messageBuffer, strlen(messageBuffer));
 8000296:	463b      	mov	r3, r7
 8000298:	4618      	mov	r0, r3
 800029a:	f7ff ff57 	bl	800014c <strlen>
 800029e:	4603      	mov	r3, r0
 80002a0:	b29a      	uxth	r2, r3
 80002a2:	463b      	mov	r3, r7
 80002a4:	4611      	mov	r1, r2
 80002a6:	4618      	mov	r0, r3
 80002a8:	f000 f9a4 	bl	80005f4 <UART_Send>
      if (Delay_Completed(0)) {
 80002ac:	e7d1      	b.n	8000252 <main+0x6a>
 80002ae:	bf00      	nop
 80002b0:	08001d24 	.word	0x08001d24
 80002b4:	2000021e 	.word	0x2000021e
 80002b8:	2000021f 	.word	0x2000021f
 80002bc:	08001d14 	.word	0x08001d14

080002c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b090      	sub	sp, #64	; 0x40
 80002c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002c6:	f107 0318 	add.w	r3, r7, #24
 80002ca:	2228      	movs	r2, #40	; 0x28
 80002cc:	2100      	movs	r1, #0
 80002ce:	4618      	mov	r0, r3
 80002d0:	f001 f882 	bl	80013d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002d4:	1d3b      	adds	r3, r7, #4
 80002d6:	2200      	movs	r2, #0
 80002d8:	601a      	str	r2, [r3, #0]
 80002da:	605a      	str	r2, [r3, #4]
 80002dc:	609a      	str	r2, [r3, #8]
 80002de:	60da      	str	r2, [r3, #12]
 80002e0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002e2:	2302      	movs	r3, #2
 80002e4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002e6:	2301      	movs	r3, #1
 80002e8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002ea:	2310      	movs	r3, #16
 80002ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002ee:	2300      	movs	r3, #0
 80002f0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002f2:	f107 0318 	add.w	r3, r7, #24
 80002f6:	4618      	mov	r0, r3
 80002f8:	f000 fc5c 	bl	8000bb4 <HAL_RCC_OscConfig>
 80002fc:	4603      	mov	r3, r0
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d001      	beq.n	8000306 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000302:	f000 fa77 	bl	80007f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000306:	230f      	movs	r3, #15
 8000308:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800030a:	2300      	movs	r3, #0
 800030c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800030e:	2300      	movs	r3, #0
 8000310:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000312:	2300      	movs	r3, #0
 8000314:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000316:	2300      	movs	r3, #0
 8000318:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800031a:	1d3b      	adds	r3, r7, #4
 800031c:	2100      	movs	r1, #0
 800031e:	4618      	mov	r0, r3
 8000320:	f000 feca 	bl	80010b8 <HAL_RCC_ClockConfig>
 8000324:	4603      	mov	r3, r0
 8000326:	2b00      	cmp	r3, #0
 8000328:	d001      	beq.n	800032e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800032a:	f000 fa63 	bl	80007f4 <Error_Handler>
  }
}
 800032e:	bf00      	nop
 8000330:	3740      	adds	r7, #64	; 0x40
 8000332:	46bd      	mov	sp, r7
 8000334:	bd80      	pop	{r7, pc}
	...

08000338 <SysTick_Init>:

/* USER CODE BEGIN 4 */
void SysTick_Init(uint32_t ticks)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b082      	sub	sp, #8
 800033c:	af00      	add	r7, sp, #0
 800033e:	6078      	str	r0, [r7, #4]

	SysTick->CTRL = 0; // Disable SysTick
 8000340:	4b12      	ldr	r3, [pc, #72]	; (800038c <SysTick_Init+0x54>)
 8000342:	2200      	movs	r2, #0
 8000344:	601a      	str	r2, [r3, #0]

	SysTick->LOAD = ticks-1; // Set Reload Register
 8000346:	4a11      	ldr	r2, [pc, #68]	; (800038c <SysTick_Init+0x54>)
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	3b01      	subs	r3, #1
 800034c:	6053      	str	r3, [r2, #4]

	// Setting Interrupt Priority to the highest
	NVIC_SetPriority(SysTick_IRQn, (1<<__NVIC_PRIO_BITS)-1);
 800034e:	210f      	movs	r1, #15
 8000350:	f04f 30ff 	mov.w	r0, #4294967295
 8000354:	f7ff ff1e 	bl	8000194 <__NVIC_SetPriority>

	SysTick->VAL = 0; // Reset the SysTick counter value
 8000358:	4b0c      	ldr	r3, [pc, #48]	; (800038c <SysTick_Init+0x54>)
 800035a:	2200      	movs	r2, #0
 800035c:	609a      	str	r2, [r3, #8]

	SysTick->CTRL |= SysTick_CTRL_CLKSOURCE_Msk; // Selecting internal clock source
 800035e:	4b0b      	ldr	r3, [pc, #44]	; (800038c <SysTick_Init+0x54>)
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	4a0a      	ldr	r2, [pc, #40]	; (800038c <SysTick_Init+0x54>)
 8000364:	f043 0304 	orr.w	r3, r3, #4
 8000368:	6013      	str	r3, [r2, #0]
	SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk; // Enabling SysTick exception Request when 0
 800036a:	4b08      	ldr	r3, [pc, #32]	; (800038c <SysTick_Init+0x54>)
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	4a07      	ldr	r2, [pc, #28]	; (800038c <SysTick_Init+0x54>)
 8000370:	f043 0302 	orr.w	r3, r3, #2
 8000374:	6013      	str	r3, [r2, #0]


	SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk; // Enable SysTick
 8000376:	4b05      	ldr	r3, [pc, #20]	; (800038c <SysTick_Init+0x54>)
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	4a04      	ldr	r2, [pc, #16]	; (800038c <SysTick_Init+0x54>)
 800037c:	f043 0301 	orr.w	r3, r3, #1
 8000380:	6013      	str	r3, [r2, #0]
}
 8000382:	bf00      	nop
 8000384:	3708      	adds	r7, #8
 8000386:	46bd      	mov	sp, r7
 8000388:	bd80      	pop	{r7, pc}
 800038a:	bf00      	nop
 800038c:	e000e010 	.word	0xe000e010

08000390 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8000390:	b480      	push	{r7}
 8000392:	af00      	add	r7, sp, #0

	if (Globalcounter == 0xffffffff) {
 8000394:	4b08      	ldr	r3, [pc, #32]	; (80003b8 <SysTick_Handler+0x28>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800039c:	d103      	bne.n	80003a6 <SysTick_Handler+0x16>
        Globalcounter = 0; // Reset the counter if the maximum value is reached
 800039e:	4b06      	ldr	r3, [pc, #24]	; (80003b8 <SysTick_Handler+0x28>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	601a      	str	r2, [r3, #0]
    } else {
        Globalcounter++; // Increment the counter
    }

}
 80003a4:	e004      	b.n	80003b0 <SysTick_Handler+0x20>
        Globalcounter++; // Increment the counter
 80003a6:	4b04      	ldr	r3, [pc, #16]	; (80003b8 <SysTick_Handler+0x28>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	3301      	adds	r3, #1
 80003ac:	4a02      	ldr	r2, [pc, #8]	; (80003b8 <SysTick_Handler+0x28>)
 80003ae:	6013      	str	r3, [r2, #0]
}
 80003b0:	bf00      	nop
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bc80      	pop	{r7}
 80003b6:	4770      	bx	lr
 80003b8:	20000078 	.word	0x20000078

080003bc <LED_Init>:

void LED_Init (void)
{
 80003bc:	b480      	push	{r7}
 80003be:	af00      	add	r7, sp, #0

	// Enable clock for GPIOC
	RCC->APB2ENR |= RCC_APB2ENR_IOPCEN;
 80003c0:	4b0a      	ldr	r3, [pc, #40]	; (80003ec <LED_Init+0x30>)
 80003c2:	699b      	ldr	r3, [r3, #24]
 80003c4:	4a09      	ldr	r2, [pc, #36]	; (80003ec <LED_Init+0x30>)
 80003c6:	f043 0310 	orr.w	r3, r3, #16
 80003ca:	6193      	str	r3, [r2, #24]

	// Set PC13 as output push-pull
	GPIOC->CRH &= ~GPIO_CRH_CNF13;    // Output Push-Pull
 80003cc:	4b08      	ldr	r3, [pc, #32]	; (80003f0 <LED_Init+0x34>)
 80003ce:	685b      	ldr	r3, [r3, #4]
 80003d0:	4a07      	ldr	r2, [pc, #28]	; (80003f0 <LED_Init+0x34>)
 80003d2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80003d6:	6053      	str	r3, [r2, #4]
	GPIOC->CRH |= GPIO_CRH_MODE13_0;  // Output mode, max speed 50 MHz
 80003d8:	4b05      	ldr	r3, [pc, #20]	; (80003f0 <LED_Init+0x34>)
 80003da:	685b      	ldr	r3, [r3, #4]
 80003dc:	4a04      	ldr	r2, [pc, #16]	; (80003f0 <LED_Init+0x34>)
 80003de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80003e2:	6053      	str	r3, [r2, #4]
}
 80003e4:	bf00      	nop
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bc80      	pop	{r7}
 80003ea:	4770      	bx	lr
 80003ec:	40021000 	.word	0x40021000
 80003f0:	40011000 	.word	0x40011000

080003f4 <LED_Toggle>:

void LED_Toggle(void)
{
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0
	GPIOC->ODR ^= GPIO_ODR_ODR13;
 80003f8:	4b04      	ldr	r3, [pc, #16]	; (800040c <LED_Toggle+0x18>)
 80003fa:	68db      	ldr	r3, [r3, #12]
 80003fc:	4a03      	ldr	r2, [pc, #12]	; (800040c <LED_Toggle+0x18>)
 80003fe:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8000402:	60d3      	str	r3, [r2, #12]
}
 8000404:	bf00      	nop
 8000406:	46bd      	mov	sp, r7
 8000408:	bc80      	pop	{r7}
 800040a:	4770      	bx	lr
 800040c:	40011000 	.word	0x40011000

08000410 <Delay_Init>:

void Delay_Init(void)
{
 8000410:	b480      	push	{r7}
 8000412:	b083      	sub	sp, #12
 8000414:	af00      	add	r7, sp, #0
    for (int i = 0; i < MAX_DELAYS; i++) {
 8000416:	2300      	movs	r3, #0
 8000418:	607b      	str	r3, [r7, #4]
 800041a:	e01d      	b.n	8000458 <Delay_Init+0x48>
        delays[i].id = i;               // Initialize each delay with a unique id
 800041c:	4a13      	ldr	r2, [pc, #76]	; (800046c <Delay_Init+0x5c>)
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	011b      	lsls	r3, r3, #4
 8000422:	4413      	add	r3, r2
 8000424:	687a      	ldr	r2, [r7, #4]
 8000426:	601a      	str	r2, [r3, #0]
        delays[i].startTime = 0;        // Reset the start time
 8000428:	4a10      	ldr	r2, [pc, #64]	; (800046c <Delay_Init+0x5c>)
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	011b      	lsls	r3, r3, #4
 800042e:	4413      	add	r3, r2
 8000430:	3304      	adds	r3, #4
 8000432:	2200      	movs	r2, #0
 8000434:	601a      	str	r2, [r3, #0]
        delays[i].delayTime = 0;        // Reset the delay time
 8000436:	4a0d      	ldr	r2, [pc, #52]	; (800046c <Delay_Init+0x5c>)
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	011b      	lsls	r3, r3, #4
 800043c:	4413      	add	r3, r2
 800043e:	3308      	adds	r3, #8
 8000440:	2200      	movs	r2, #0
 8000442:	601a      	str	r2, [r3, #0]
        delays[i].activeFlag = 0;       // Initialize all delays as inactive
 8000444:	4a09      	ldr	r2, [pc, #36]	; (800046c <Delay_Init+0x5c>)
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	011b      	lsls	r3, r3, #4
 800044a:	4413      	add	r3, r2
 800044c:	330c      	adds	r3, #12
 800044e:	2200      	movs	r2, #0
 8000450:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < MAX_DELAYS; i++) {
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	3301      	adds	r3, #1
 8000456:	607b      	str	r3, [r7, #4]
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	2b09      	cmp	r3, #9
 800045c:	ddde      	ble.n	800041c <Delay_Init+0xc>
    }
}
 800045e:	bf00      	nop
 8000460:	bf00      	nop
 8000462:	370c      	adds	r7, #12
 8000464:	46bd      	mov	sp, r7
 8000466:	bc80      	pop	{r7}
 8000468:	4770      	bx	lr
 800046a:	bf00      	nop
 800046c:	2000007c 	.word	0x2000007c

08000470 <Delay_Start>:

int Delay_Start(int id, int delayTime)
{
 8000470:	b480      	push	{r7}
 8000472:	b083      	sub	sp, #12
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
 8000478:	6039      	str	r1, [r7, #0]
    if (id >= 0 && id < MAX_DELAYS) {
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	2b00      	cmp	r3, #0
 800047e:	db1a      	blt.n	80004b6 <Delay_Start+0x46>
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	2b09      	cmp	r3, #9
 8000484:	dc17      	bgt.n	80004b6 <Delay_Start+0x46>
        delays[id].startTime = Globalcounter; // Capture the current Globalcounter value
 8000486:	4b0f      	ldr	r3, [pc, #60]	; (80004c4 <Delay_Start+0x54>)
 8000488:	681a      	ldr	r2, [r3, #0]
 800048a:	490f      	ldr	r1, [pc, #60]	; (80004c8 <Delay_Start+0x58>)
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	011b      	lsls	r3, r3, #4
 8000490:	440b      	add	r3, r1
 8000492:	3304      	adds	r3, #4
 8000494:	601a      	str	r2, [r3, #0]
        delays[id].delayTime = delayTime;
 8000496:	4a0c      	ldr	r2, [pc, #48]	; (80004c8 <Delay_Start+0x58>)
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	011b      	lsls	r3, r3, #4
 800049c:	4413      	add	r3, r2
 800049e:	3308      	adds	r3, #8
 80004a0:	683a      	ldr	r2, [r7, #0]
 80004a2:	601a      	str	r2, [r3, #0]
        delays[id].activeFlag = 1;           // Mark this delay as active
 80004a4:	4a08      	ldr	r2, [pc, #32]	; (80004c8 <Delay_Start+0x58>)
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	011b      	lsls	r3, r3, #4
 80004aa:	4413      	add	r3, r2
 80004ac:	330c      	adds	r3, #12
 80004ae:	2201      	movs	r2, #1
 80004b0:	601a      	str	r2, [r3, #0]
        return id;                           // Return the id of the delay
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	e001      	b.n	80004ba <Delay_Start+0x4a>
    }
    return -1; // Invalid id
 80004b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80004ba:	4618      	mov	r0, r3
 80004bc:	370c      	adds	r7, #12
 80004be:	46bd      	mov	sp, r7
 80004c0:	bc80      	pop	{r7}
 80004c2:	4770      	bx	lr
 80004c4:	20000078 	.word	0x20000078
 80004c8:	2000007c 	.word	0x2000007c

080004cc <Delay_Completed>:
        delays[id].activeFlag = 0; // Stop the specified delay
    }
}

int Delay_Completed(int id)
{
 80004cc:	b480      	push	{r7}
 80004ce:	b083      	sub	sp, #12
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
    if (id >= 0 && id < MAX_DELAYS) {
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	db24      	blt.n	8000524 <Delay_Completed+0x58>
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	2b09      	cmp	r3, #9
 80004de:	dc21      	bgt.n	8000524 <Delay_Completed+0x58>
        if (delays[id].activeFlag && (Globalcounter >= delays[id].startTime + delays[id].delayTime)) {
 80004e0:	4a13      	ldr	r2, [pc, #76]	; (8000530 <Delay_Completed+0x64>)
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	011b      	lsls	r3, r3, #4
 80004e6:	4413      	add	r3, r2
 80004e8:	330c      	adds	r3, #12
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d019      	beq.n	8000524 <Delay_Completed+0x58>
 80004f0:	4a0f      	ldr	r2, [pc, #60]	; (8000530 <Delay_Completed+0x64>)
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	011b      	lsls	r3, r3, #4
 80004f6:	4413      	add	r3, r2
 80004f8:	3304      	adds	r3, #4
 80004fa:	681a      	ldr	r2, [r3, #0]
 80004fc:	490c      	ldr	r1, [pc, #48]	; (8000530 <Delay_Completed+0x64>)
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	011b      	lsls	r3, r3, #4
 8000502:	440b      	add	r3, r1
 8000504:	3308      	adds	r3, #8
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	441a      	add	r2, r3
 800050a:	4b0a      	ldr	r3, [pc, #40]	; (8000534 <Delay_Completed+0x68>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	429a      	cmp	r2, r3
 8000510:	dc08      	bgt.n	8000524 <Delay_Completed+0x58>
            delays[id].activeFlag = 0; // Deactivate the delay after completion
 8000512:	4a07      	ldr	r2, [pc, #28]	; (8000530 <Delay_Completed+0x64>)
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	011b      	lsls	r3, r3, #4
 8000518:	4413      	add	r3, r2
 800051a:	330c      	adds	r3, #12
 800051c:	2200      	movs	r2, #0
 800051e:	601a      	str	r2, [r3, #0]
            return 1; // Delay completed
 8000520:	2301      	movs	r3, #1
 8000522:	e000      	b.n	8000526 <Delay_Completed+0x5a>
        }
    }
    return 0; // Delay not yet completed
 8000524:	2300      	movs	r3, #0
}
 8000526:	4618      	mov	r0, r3
 8000528:	370c      	adds	r7, #12
 800052a:	46bd      	mov	sp, r7
 800052c:	bc80      	pop	{r7}
 800052e:	4770      	bx	lr
 8000530:	2000007c 	.word	0x2000007c
 8000534:	20000078 	.word	0x20000078

08000538 <Delay_ErrorHandler>:

void Delay_ErrorHandler(int delayid)
{
 8000538:	b5b0      	push	{r4, r5, r7, lr}
 800053a:	b08a      	sub	sp, #40	; 0x28
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
	if (delayid == (-1))
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000546:	d116      	bne.n	8000576 <Delay_ErrorHandler+0x3e>
	{
		char errormsg[] = "Invalid Delay Id choosen....\n";
 8000548:	4b0d      	ldr	r3, [pc, #52]	; (8000580 <Delay_ErrorHandler+0x48>)
 800054a:	f107 0408 	add.w	r4, r7, #8
 800054e:	461d      	mov	r5, r3
 8000550:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000552:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000554:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000558:	c407      	stmia	r4!, {r0, r1, r2}
 800055a:	8023      	strh	r3, [r4, #0]
		UART_Send((uint8_t*)errormsg, strlen(errormsg));
 800055c:	f107 0308 	add.w	r3, r7, #8
 8000560:	4618      	mov	r0, r3
 8000562:	f7ff fdf3 	bl	800014c <strlen>
 8000566:	4603      	mov	r3, r0
 8000568:	b29a      	uxth	r2, r3
 800056a:	f107 0308 	add.w	r3, r7, #8
 800056e:	4611      	mov	r1, r2
 8000570:	4618      	mov	r0, r3
 8000572:	f000 f83f 	bl	80005f4 <UART_Send>
	}
}
 8000576:	bf00      	nop
 8000578:	3728      	adds	r7, #40	; 0x28
 800057a:	46bd      	mov	sp, r7
 800057c:	bdb0      	pop	{r4, r5, r7, pc}
 800057e:	bf00      	nop
 8000580:	08001d38 	.word	0x08001d38

08000584 <UART_Init>:

void UART_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
    // Enable clock for GPIOA and USART1
    RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;  // GPIOA clock
 8000588:	4b17      	ldr	r3, [pc, #92]	; (80005e8 <UART_Init+0x64>)
 800058a:	699b      	ldr	r3, [r3, #24]
 800058c:	4a16      	ldr	r2, [pc, #88]	; (80005e8 <UART_Init+0x64>)
 800058e:	f043 0304 	orr.w	r3, r3, #4
 8000592:	6193      	str	r3, [r2, #24]
    RCC->APB2ENR |= RCC_APB2ENR_USART1EN; // USART1 clock
 8000594:	4b14      	ldr	r3, [pc, #80]	; (80005e8 <UART_Init+0x64>)
 8000596:	699b      	ldr	r3, [r3, #24]
 8000598:	4a13      	ldr	r2, [pc, #76]	; (80005e8 <UART_Init+0x64>)
 800059a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800059e:	6193      	str	r3, [r2, #24]

    // Configure PA9 (TX) as Alternate function push-pull
    GPIOA->CRH &= ~(GPIO_CRH_CNF9 | GPIO_CRH_MODE9);
 80005a0:	4b12      	ldr	r3, [pc, #72]	; (80005ec <UART_Init+0x68>)
 80005a2:	685b      	ldr	r3, [r3, #4]
 80005a4:	4a11      	ldr	r2, [pc, #68]	; (80005ec <UART_Init+0x68>)
 80005a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80005aa:	6053      	str	r3, [r2, #4]
    GPIOA->CRH |= (GPIO_CRH_CNF9_1 | GPIO_CRH_MODE9_1); // Output mode, max speed 2 MHz
 80005ac:	4b0f      	ldr	r3, [pc, #60]	; (80005ec <UART_Init+0x68>)
 80005ae:	685b      	ldr	r3, [r3, #4]
 80005b0:	4a0e      	ldr	r2, [pc, #56]	; (80005ec <UART_Init+0x68>)
 80005b2:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80005b6:	6053      	str	r3, [r2, #4]

    // Configure PA10 (RX) as input floating
    GPIOA->CRH &= ~(GPIO_CRH_CNF10 | GPIO_CRH_MODE10);
 80005b8:	4b0c      	ldr	r3, [pc, #48]	; (80005ec <UART_Init+0x68>)
 80005ba:	685b      	ldr	r3, [r3, #4]
 80005bc:	4a0b      	ldr	r2, [pc, #44]	; (80005ec <UART_Init+0x68>)
 80005be:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80005c2:	6053      	str	r3, [r2, #4]
    GPIOA->CRH |= GPIO_CRH_CNF10_0; // Input floating
 80005c4:	4b09      	ldr	r3, [pc, #36]	; (80005ec <UART_Init+0x68>)
 80005c6:	685b      	ldr	r3, [r3, #4]
 80005c8:	4a08      	ldr	r2, [pc, #32]	; (80005ec <UART_Init+0x68>)
 80005ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005ce:	6053      	str	r3, [r2, #4]

    // Configure baud rate
    USART1->BRR = (Clock_Frequency*1000) / BAUD_RATE;
 80005d0:	4b07      	ldr	r3, [pc, #28]	; (80005f0 <UART_Init+0x6c>)
 80005d2:	2245      	movs	r2, #69	; 0x45
 80005d4:	609a      	str	r2, [r3, #8]

    // Enable USART, TX, RX and RXNE interrupt
    USART1->CR1 = USART_CR1_TE | USART_CR1_RE | USART_CR1_RXNEIE | USART_CR1_UE;
 80005d6:	4b06      	ldr	r3, [pc, #24]	; (80005f0 <UART_Init+0x6c>)
 80005d8:	f242 022c 	movw	r2, #8236	; 0x202c
 80005dc:	60da      	str	r2, [r3, #12]

    // Enable USART1 global interrupt
    NVIC_EnableIRQ(USART1_IRQn);
 80005de:	2025      	movs	r0, #37	; 0x25
 80005e0:	f7ff fdbc 	bl	800015c <__NVIC_EnableIRQ>
}
 80005e4:	bf00      	nop
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	40021000 	.word	0x40021000
 80005ec:	40010800 	.word	0x40010800
 80005f0:	40013800 	.word	0x40013800

080005f4 <UART_Send>:

void UART_Send(uint8_t *data, uint16_t size)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b085      	sub	sp, #20
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
 80005fc:	460b      	mov	r3, r1
 80005fe:	807b      	strh	r3, [r7, #2]
    for (uint16_t i = 0; i < size; i++) {
 8000600:	2300      	movs	r3, #0
 8000602:	81fb      	strh	r3, [r7, #14]
 8000604:	e02a      	b.n	800065c <UART_Send+0x68>
        while (((txHead + 1) % TX_BUFFER_SIZE) == txTail); // Wait if buffer is full
 8000606:	bf00      	nop
 8000608:	4b20      	ldr	r3, [pc, #128]	; (800068c <UART_Send+0x98>)
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	b2db      	uxtb	r3, r3
 800060e:	3301      	adds	r3, #1
 8000610:	425a      	negs	r2, r3
 8000612:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000616:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800061a:	bf58      	it	pl
 800061c:	4253      	negpl	r3, r2
 800061e:	4a1c      	ldr	r2, [pc, #112]	; (8000690 <UART_Send+0x9c>)
 8000620:	7812      	ldrb	r2, [r2, #0]
 8000622:	b2d2      	uxtb	r2, r2
 8000624:	4293      	cmp	r3, r2
 8000626:	d0ef      	beq.n	8000608 <UART_Send+0x14>
        txBuffer[txHead] = data[i];
 8000628:	89fb      	ldrh	r3, [r7, #14]
 800062a:	687a      	ldr	r2, [r7, #4]
 800062c:	4413      	add	r3, r2
 800062e:	4a17      	ldr	r2, [pc, #92]	; (800068c <UART_Send+0x98>)
 8000630:	7812      	ldrb	r2, [r2, #0]
 8000632:	b2d2      	uxtb	r2, r2
 8000634:	7819      	ldrb	r1, [r3, #0]
 8000636:	4b17      	ldr	r3, [pc, #92]	; (8000694 <UART_Send+0xa0>)
 8000638:	5499      	strb	r1, [r3, r2]
        txHead = (txHead + 1) % TX_BUFFER_SIZE;
 800063a:	4b14      	ldr	r3, [pc, #80]	; (800068c <UART_Send+0x98>)
 800063c:	781b      	ldrb	r3, [r3, #0]
 800063e:	b2db      	uxtb	r3, r3
 8000640:	3301      	adds	r3, #1
 8000642:	425a      	negs	r2, r3
 8000644:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000648:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800064c:	bf58      	it	pl
 800064e:	4253      	negpl	r3, r2
 8000650:	b2da      	uxtb	r2, r3
 8000652:	4b0e      	ldr	r3, [pc, #56]	; (800068c <UART_Send+0x98>)
 8000654:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++) {
 8000656:	89fb      	ldrh	r3, [r7, #14]
 8000658:	3301      	adds	r3, #1
 800065a:	81fb      	strh	r3, [r7, #14]
 800065c:	89fa      	ldrh	r2, [r7, #14]
 800065e:	887b      	ldrh	r3, [r7, #2]
 8000660:	429a      	cmp	r2, r3
 8000662:	d3d0      	bcc.n	8000606 <UART_Send+0x12>
    }

    // Enable TXE interrupt to start transmitting
    if (!txBusy) {
 8000664:	4b0c      	ldr	r3, [pc, #48]	; (8000698 <UART_Send+0xa4>)
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	b2db      	uxtb	r3, r3
 800066a:	2b00      	cmp	r3, #0
 800066c:	d108      	bne.n	8000680 <UART_Send+0x8c>
        txBusy = 1;
 800066e:	4b0a      	ldr	r3, [pc, #40]	; (8000698 <UART_Send+0xa4>)
 8000670:	2201      	movs	r2, #1
 8000672:	701a      	strb	r2, [r3, #0]
        USART1->CR1 |= USART_CR1_TXEIE;
 8000674:	4b09      	ldr	r3, [pc, #36]	; (800069c <UART_Send+0xa8>)
 8000676:	68db      	ldr	r3, [r3, #12]
 8000678:	4a08      	ldr	r2, [pc, #32]	; (800069c <UART_Send+0xa8>)
 800067a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800067e:	60d3      	str	r3, [r2, #12]
    }
}
 8000680:	bf00      	nop
 8000682:	3714      	adds	r7, #20
 8000684:	46bd      	mov	sp, r7
 8000686:	bc80      	pop	{r7}
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	2000021c 	.word	0x2000021c
 8000690:	2000021d 	.word	0x2000021d
 8000694:	2000011c 	.word	0x2000011c
 8000698:	20000220 	.word	0x20000220
 800069c:	40013800 	.word	0x40013800

080006a0 <UART_Receive>:

void UART_Receive(uint8_t *data, uint16_t size)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b085      	sub	sp, #20
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
 80006a8:	460b      	mov	r3, r1
 80006aa:	807b      	strh	r3, [r7, #2]
    for (uint16_t i = 0; i < size; i++) {
 80006ac:	2300      	movs	r3, #0
 80006ae:	81fb      	strh	r3, [r7, #14]
 80006b0:	e024      	b.n	80006fc <UART_Receive+0x5c>
        while (rxHead == rxTail); // Wait until data is received
 80006b2:	bf00      	nop
 80006b4:	4b16      	ldr	r3, [pc, #88]	; (8000710 <UART_Receive+0x70>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	b2da      	uxtb	r2, r3
 80006ba:	4b16      	ldr	r3, [pc, #88]	; (8000714 <UART_Receive+0x74>)
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	429a      	cmp	r2, r3
 80006c2:	d0f7      	beq.n	80006b4 <UART_Receive+0x14>
        data[i] = rxBuffer[rxTail];
 80006c4:	4b13      	ldr	r3, [pc, #76]	; (8000714 <UART_Receive+0x74>)
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	4619      	mov	r1, r3
 80006cc:	89fb      	ldrh	r3, [r7, #14]
 80006ce:	687a      	ldr	r2, [r7, #4]
 80006d0:	4413      	add	r3, r2
 80006d2:	4a11      	ldr	r2, [pc, #68]	; (8000718 <UART_Receive+0x78>)
 80006d4:	5c52      	ldrb	r2, [r2, r1]
 80006d6:	b2d2      	uxtb	r2, r2
 80006d8:	701a      	strb	r2, [r3, #0]
        rxTail = (rxTail + 1) % RX_BUFFER_SIZE;
 80006da:	4b0e      	ldr	r3, [pc, #56]	; (8000714 <UART_Receive+0x74>)
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	3301      	adds	r3, #1
 80006e2:	425a      	negs	r2, r3
 80006e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80006e8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80006ec:	bf58      	it	pl
 80006ee:	4253      	negpl	r3, r2
 80006f0:	b2da      	uxtb	r2, r3
 80006f2:	4b08      	ldr	r3, [pc, #32]	; (8000714 <UART_Receive+0x74>)
 80006f4:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++) {
 80006f6:	89fb      	ldrh	r3, [r7, #14]
 80006f8:	3301      	adds	r3, #1
 80006fa:	81fb      	strh	r3, [r7, #14]
 80006fc:	89fa      	ldrh	r2, [r7, #14]
 80006fe:	887b      	ldrh	r3, [r7, #2]
 8000700:	429a      	cmp	r2, r3
 8000702:	d3d6      	bcc.n	80006b2 <UART_Receive+0x12>
    }
}
 8000704:	bf00      	nop
 8000706:	bf00      	nop
 8000708:	3714      	adds	r7, #20
 800070a:	46bd      	mov	sp, r7
 800070c:	bc80      	pop	{r7}
 800070e:	4770      	bx	lr
 8000710:	2000021e 	.word	0x2000021e
 8000714:	2000021f 	.word	0x2000021f
 8000718:	2000019c 	.word	0x2000019c

0800071c <USART1_IRQHandler>:

void USART1_IRQHandler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	b083      	sub	sp, #12
 8000720:	af00      	add	r7, sp, #0
    // Check if data is ready to be read
    if (USART1->SR & USART_SR_RXNE) {
 8000722:	4b2c      	ldr	r3, [pc, #176]	; (80007d4 <USART1_IRQHandler+0xb8>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	f003 0320 	and.w	r3, r3, #32
 800072a:	2b00      	cmp	r3, #0
 800072c:	d01e      	beq.n	800076c <USART1_IRQHandler+0x50>
        uint8_t data = USART1->DR; // Read received data
 800072e:	4b29      	ldr	r3, [pc, #164]	; (80007d4 <USART1_IRQHandler+0xb8>)
 8000730:	685b      	ldr	r3, [r3, #4]
 8000732:	71fb      	strb	r3, [r7, #7]
        uint8_t nextHead = (rxHead + 1) % RX_BUFFER_SIZE;
 8000734:	4b28      	ldr	r3, [pc, #160]	; (80007d8 <USART1_IRQHandler+0xbc>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	b2db      	uxtb	r3, r3
 800073a:	3301      	adds	r3, #1
 800073c:	425a      	negs	r2, r3
 800073e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000742:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000746:	bf58      	it	pl
 8000748:	4253      	negpl	r3, r2
 800074a:	71bb      	strb	r3, [r7, #6]
        if (nextHead != rxTail) { // If buffer is not full
 800074c:	4b23      	ldr	r3, [pc, #140]	; (80007dc <USART1_IRQHandler+0xc0>)
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	b2db      	uxtb	r3, r3
 8000752:	79ba      	ldrb	r2, [r7, #6]
 8000754:	429a      	cmp	r2, r3
 8000756:	d009      	beq.n	800076c <USART1_IRQHandler+0x50>
            rxBuffer[rxHead] = data;
 8000758:	4b1f      	ldr	r3, [pc, #124]	; (80007d8 <USART1_IRQHandler+0xbc>)
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	b2db      	uxtb	r3, r3
 800075e:	4619      	mov	r1, r3
 8000760:	4a1f      	ldr	r2, [pc, #124]	; (80007e0 <USART1_IRQHandler+0xc4>)
 8000762:	79fb      	ldrb	r3, [r7, #7]
 8000764:	5453      	strb	r3, [r2, r1]
            rxHead = nextHead;
 8000766:	4a1c      	ldr	r2, [pc, #112]	; (80007d8 <USART1_IRQHandler+0xbc>)
 8000768:	79bb      	ldrb	r3, [r7, #6]
 800076a:	7013      	strb	r3, [r2, #0]
        }
    }

    // Check if transmit data register is empty
    if (USART1->SR & USART_SR_TXE) {
 800076c:	4b19      	ldr	r3, [pc, #100]	; (80007d4 <USART1_IRQHandler+0xb8>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000774:	2b00      	cmp	r3, #0
 8000776:	d028      	beq.n	80007ca <USART1_IRQHandler+0xae>
        if (txTail != txHead) { // If data is available to transmit
 8000778:	4b1a      	ldr	r3, [pc, #104]	; (80007e4 <USART1_IRQHandler+0xc8>)
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	b2da      	uxtb	r2, r3
 800077e:	4b1a      	ldr	r3, [pc, #104]	; (80007e8 <USART1_IRQHandler+0xcc>)
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	b2db      	uxtb	r3, r3
 8000784:	429a      	cmp	r2, r3
 8000786:	d017      	beq.n	80007b8 <USART1_IRQHandler+0x9c>
            USART1->DR = txBuffer[txTail];
 8000788:	4b16      	ldr	r3, [pc, #88]	; (80007e4 <USART1_IRQHandler+0xc8>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	b2db      	uxtb	r3, r3
 800078e:	461a      	mov	r2, r3
 8000790:	4b16      	ldr	r3, [pc, #88]	; (80007ec <USART1_IRQHandler+0xd0>)
 8000792:	5c9b      	ldrb	r3, [r3, r2]
 8000794:	b2da      	uxtb	r2, r3
 8000796:	4b0f      	ldr	r3, [pc, #60]	; (80007d4 <USART1_IRQHandler+0xb8>)
 8000798:	605a      	str	r2, [r3, #4]
            txTail = (txTail + 1) % TX_BUFFER_SIZE;
 800079a:	4b12      	ldr	r3, [pc, #72]	; (80007e4 <USART1_IRQHandler+0xc8>)
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	3301      	adds	r3, #1
 80007a2:	425a      	negs	r2, r3
 80007a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80007a8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80007ac:	bf58      	it	pl
 80007ae:	4253      	negpl	r3, r2
 80007b0:	b2da      	uxtb	r2, r3
 80007b2:	4b0c      	ldr	r3, [pc, #48]	; (80007e4 <USART1_IRQHandler+0xc8>)
 80007b4:	701a      	strb	r2, [r3, #0]
            // No more data to send, disable TXE interrupt
            USART1->CR1 &= ~USART_CR1_TXEIE;
            txBusy = 0;
        }
    }
}
 80007b6:	e008      	b.n	80007ca <USART1_IRQHandler+0xae>
            USART1->CR1 &= ~USART_CR1_TXEIE;
 80007b8:	4b06      	ldr	r3, [pc, #24]	; (80007d4 <USART1_IRQHandler+0xb8>)
 80007ba:	68db      	ldr	r3, [r3, #12]
 80007bc:	4a05      	ldr	r2, [pc, #20]	; (80007d4 <USART1_IRQHandler+0xb8>)
 80007be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80007c2:	60d3      	str	r3, [r2, #12]
            txBusy = 0;
 80007c4:	4b0a      	ldr	r3, [pc, #40]	; (80007f0 <USART1_IRQHandler+0xd4>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	701a      	strb	r2, [r3, #0]
}
 80007ca:	bf00      	nop
 80007cc:	370c      	adds	r7, #12
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bc80      	pop	{r7}
 80007d2:	4770      	bx	lr
 80007d4:	40013800 	.word	0x40013800
 80007d8:	2000021e 	.word	0x2000021e
 80007dc:	2000021f 	.word	0x2000021f
 80007e0:	2000019c 	.word	0x2000019c
 80007e4:	2000021d 	.word	0x2000021d
 80007e8:	2000021c 	.word	0x2000021c
 80007ec:	2000011c 	.word	0x2000011c
 80007f0:	20000220 	.word	0x20000220

080007f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007f8:	b672      	cpsid	i
}
 80007fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007fc:	e7fe      	b.n	80007fc <Error_Handler+0x8>
	...

08000800 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000800:	b480      	push	{r7}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000806:	4b0e      	ldr	r3, [pc, #56]	; (8000840 <HAL_MspInit+0x40>)
 8000808:	699b      	ldr	r3, [r3, #24]
 800080a:	4a0d      	ldr	r2, [pc, #52]	; (8000840 <HAL_MspInit+0x40>)
 800080c:	f043 0301 	orr.w	r3, r3, #1
 8000810:	6193      	str	r3, [r2, #24]
 8000812:	4b0b      	ldr	r3, [pc, #44]	; (8000840 <HAL_MspInit+0x40>)
 8000814:	699b      	ldr	r3, [r3, #24]
 8000816:	f003 0301 	and.w	r3, r3, #1
 800081a:	607b      	str	r3, [r7, #4]
 800081c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800081e:	4b08      	ldr	r3, [pc, #32]	; (8000840 <HAL_MspInit+0x40>)
 8000820:	69db      	ldr	r3, [r3, #28]
 8000822:	4a07      	ldr	r2, [pc, #28]	; (8000840 <HAL_MspInit+0x40>)
 8000824:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000828:	61d3      	str	r3, [r2, #28]
 800082a:	4b05      	ldr	r3, [pc, #20]	; (8000840 <HAL_MspInit+0x40>)
 800082c:	69db      	ldr	r3, [r3, #28]
 800082e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000832:	603b      	str	r3, [r7, #0]
 8000834:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000836:	bf00      	nop
 8000838:	370c      	adds	r7, #12
 800083a:	46bd      	mov	sp, r7
 800083c:	bc80      	pop	{r7}
 800083e:	4770      	bx	lr
 8000840:	40021000 	.word	0x40021000

08000844 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000848:	e7fe      	b.n	8000848 <NMI_Handler+0x4>

0800084a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800084a:	b480      	push	{r7}
 800084c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800084e:	e7fe      	b.n	800084e <HardFault_Handler+0x4>

08000850 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000854:	e7fe      	b.n	8000854 <MemManage_Handler+0x4>

08000856 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000856:	b480      	push	{r7}
 8000858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800085a:	e7fe      	b.n	800085a <BusFault_Handler+0x4>

0800085c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000860:	e7fe      	b.n	8000860 <UsageFault_Handler+0x4>

08000862 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000862:	b480      	push	{r7}
 8000864:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000866:	bf00      	nop
 8000868:	46bd      	mov	sp, r7
 800086a:	bc80      	pop	{r7}
 800086c:	4770      	bx	lr

0800086e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800086e:	b480      	push	{r7}
 8000870:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000872:	bf00      	nop
 8000874:	46bd      	mov	sp, r7
 8000876:	bc80      	pop	{r7}
 8000878:	4770      	bx	lr

0800087a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800087a:	b480      	push	{r7}
 800087c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800087e:	bf00      	nop
 8000880:	46bd      	mov	sp, r7
 8000882:	bc80      	pop	{r7}
 8000884:	4770      	bx	lr
	...

08000888 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b086      	sub	sp, #24
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000890:	4a14      	ldr	r2, [pc, #80]	; (80008e4 <_sbrk+0x5c>)
 8000892:	4b15      	ldr	r3, [pc, #84]	; (80008e8 <_sbrk+0x60>)
 8000894:	1ad3      	subs	r3, r2, r3
 8000896:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000898:	697b      	ldr	r3, [r7, #20]
 800089a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800089c:	4b13      	ldr	r3, [pc, #76]	; (80008ec <_sbrk+0x64>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d102      	bne.n	80008aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008a4:	4b11      	ldr	r3, [pc, #68]	; (80008ec <_sbrk+0x64>)
 80008a6:	4a12      	ldr	r2, [pc, #72]	; (80008f0 <_sbrk+0x68>)
 80008a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008aa:	4b10      	ldr	r3, [pc, #64]	; (80008ec <_sbrk+0x64>)
 80008ac:	681a      	ldr	r2, [r3, #0]
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	4413      	add	r3, r2
 80008b2:	693a      	ldr	r2, [r7, #16]
 80008b4:	429a      	cmp	r2, r3
 80008b6:	d207      	bcs.n	80008c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008b8:	f000 fd96 	bl	80013e8 <__errno>
 80008bc:	4603      	mov	r3, r0
 80008be:	220c      	movs	r2, #12
 80008c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008c2:	f04f 33ff 	mov.w	r3, #4294967295
 80008c6:	e009      	b.n	80008dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008c8:	4b08      	ldr	r3, [pc, #32]	; (80008ec <_sbrk+0x64>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008ce:	4b07      	ldr	r3, [pc, #28]	; (80008ec <_sbrk+0x64>)
 80008d0:	681a      	ldr	r2, [r3, #0]
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	4413      	add	r3, r2
 80008d6:	4a05      	ldr	r2, [pc, #20]	; (80008ec <_sbrk+0x64>)
 80008d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008da:	68fb      	ldr	r3, [r7, #12]
}
 80008dc:	4618      	mov	r0, r3
 80008de:	3718      	adds	r7, #24
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	20005000 	.word	0x20005000
 80008e8:	00000400 	.word	0x00000400
 80008ec:	20000224 	.word	0x20000224
 80008f0:	20000378 	.word	0x20000378

080008f4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008f8:	bf00      	nop
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bc80      	pop	{r7}
 80008fe:	4770      	bx	lr

08000900 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000900:	f7ff fff8 	bl	80008f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000904:	480b      	ldr	r0, [pc, #44]	; (8000934 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000906:	490c      	ldr	r1, [pc, #48]	; (8000938 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000908:	4a0c      	ldr	r2, [pc, #48]	; (800093c <LoopFillZerobss+0x16>)
  movs r3, #0
 800090a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800090c:	e002      	b.n	8000914 <LoopCopyDataInit>

0800090e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800090e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000910:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000912:	3304      	adds	r3, #4

08000914 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000914:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000916:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000918:	d3f9      	bcc.n	800090e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800091a:	4a09      	ldr	r2, [pc, #36]	; (8000940 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800091c:	4c09      	ldr	r4, [pc, #36]	; (8000944 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800091e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000920:	e001      	b.n	8000926 <LoopFillZerobss>

08000922 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000922:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000924:	3204      	adds	r2, #4

08000926 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000926:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000928:	d3fb      	bcc.n	8000922 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800092a:	f000 fd63 	bl	80013f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800092e:	f7ff fc5b 	bl	80001e8 <main>
  bx lr
 8000932:	4770      	bx	lr
  ldr r0, =_sdata
 8000934:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000938:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800093c:	08001db8 	.word	0x08001db8
  ldr r2, =_sbss
 8000940:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000944:	20000374 	.word	0x20000374

08000948 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000948:	e7fe      	b.n	8000948 <ADC1_2_IRQHandler>
	...

0800094c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000950:	4b08      	ldr	r3, [pc, #32]	; (8000974 <HAL_Init+0x28>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a07      	ldr	r2, [pc, #28]	; (8000974 <HAL_Init+0x28>)
 8000956:	f043 0310 	orr.w	r3, r3, #16
 800095a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800095c:	2003      	movs	r0, #3
 800095e:	f000 f8f5 	bl	8000b4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000962:	200f      	movs	r0, #15
 8000964:	f000 f808 	bl	8000978 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000968:	f7ff ff4a 	bl	8000800 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800096c:	2300      	movs	r3, #0
}
 800096e:	4618      	mov	r0, r3
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	40022000 	.word	0x40022000

08000978 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000980:	4b12      	ldr	r3, [pc, #72]	; (80009cc <HAL_InitTick+0x54>)
 8000982:	681a      	ldr	r2, [r3, #0]
 8000984:	4b12      	ldr	r3, [pc, #72]	; (80009d0 <HAL_InitTick+0x58>)
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	4619      	mov	r1, r3
 800098a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800098e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000992:	fbb2 f3f3 	udiv	r3, r2, r3
 8000996:	4618      	mov	r0, r3
 8000998:	f000 f8ff 	bl	8000b9a <HAL_SYSTICK_Config>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009a2:	2301      	movs	r3, #1
 80009a4:	e00e      	b.n	80009c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	2b0f      	cmp	r3, #15
 80009aa:	d80a      	bhi.n	80009c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009ac:	2200      	movs	r2, #0
 80009ae:	6879      	ldr	r1, [r7, #4]
 80009b0:	f04f 30ff 	mov.w	r0, #4294967295
 80009b4:	f000 f8d5 	bl	8000b62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009b8:	4a06      	ldr	r2, [pc, #24]	; (80009d4 <HAL_InitTick+0x5c>)
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009be:	2300      	movs	r3, #0
 80009c0:	e000      	b.n	80009c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009c2:	2301      	movs	r3, #1
}
 80009c4:	4618      	mov	r0, r3
 80009c6:	3708      	adds	r7, #8
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	20000000 	.word	0x20000000
 80009d0:	20000008 	.word	0x20000008
 80009d4:	20000004 	.word	0x20000004

080009d8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  return uwTick;
 80009dc:	4b02      	ldr	r3, [pc, #8]	; (80009e8 <HAL_GetTick+0x10>)
 80009de:	681b      	ldr	r3, [r3, #0]
}
 80009e0:	4618      	mov	r0, r3
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bc80      	pop	{r7}
 80009e6:	4770      	bx	lr
 80009e8:	20000228 	.word	0x20000228

080009ec <__NVIC_SetPriorityGrouping>:
{
 80009ec:	b480      	push	{r7}
 80009ee:	b085      	sub	sp, #20
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	f003 0307 	and.w	r3, r3, #7
 80009fa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009fc:	4b0c      	ldr	r3, [pc, #48]	; (8000a30 <__NVIC_SetPriorityGrouping+0x44>)
 80009fe:	68db      	ldr	r3, [r3, #12]
 8000a00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a02:	68ba      	ldr	r2, [r7, #8]
 8000a04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a08:	4013      	ands	r3, r2
 8000a0a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a10:	68bb      	ldr	r3, [r7, #8]
 8000a12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a1e:	4a04      	ldr	r2, [pc, #16]	; (8000a30 <__NVIC_SetPriorityGrouping+0x44>)
 8000a20:	68bb      	ldr	r3, [r7, #8]
 8000a22:	60d3      	str	r3, [r2, #12]
}
 8000a24:	bf00      	nop
 8000a26:	3714      	adds	r7, #20
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bc80      	pop	{r7}
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	e000ed00 	.word	0xe000ed00

08000a34 <__NVIC_GetPriorityGrouping>:
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a38:	4b04      	ldr	r3, [pc, #16]	; (8000a4c <__NVIC_GetPriorityGrouping+0x18>)
 8000a3a:	68db      	ldr	r3, [r3, #12]
 8000a3c:	0a1b      	lsrs	r3, r3, #8
 8000a3e:	f003 0307 	and.w	r3, r3, #7
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bc80      	pop	{r7}
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	e000ed00 	.word	0xe000ed00

08000a50 <__NVIC_SetPriority>:
{
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	4603      	mov	r3, r0
 8000a58:	6039      	str	r1, [r7, #0]
 8000a5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	db0a      	blt.n	8000a7a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	b2da      	uxtb	r2, r3
 8000a68:	490c      	ldr	r1, [pc, #48]	; (8000a9c <__NVIC_SetPriority+0x4c>)
 8000a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a6e:	0112      	lsls	r2, r2, #4
 8000a70:	b2d2      	uxtb	r2, r2
 8000a72:	440b      	add	r3, r1
 8000a74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000a78:	e00a      	b.n	8000a90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	b2da      	uxtb	r2, r3
 8000a7e:	4908      	ldr	r1, [pc, #32]	; (8000aa0 <__NVIC_SetPriority+0x50>)
 8000a80:	79fb      	ldrb	r3, [r7, #7]
 8000a82:	f003 030f 	and.w	r3, r3, #15
 8000a86:	3b04      	subs	r3, #4
 8000a88:	0112      	lsls	r2, r2, #4
 8000a8a:	b2d2      	uxtb	r2, r2
 8000a8c:	440b      	add	r3, r1
 8000a8e:	761a      	strb	r2, [r3, #24]
}
 8000a90:	bf00      	nop
 8000a92:	370c      	adds	r7, #12
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bc80      	pop	{r7}
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	e000e100 	.word	0xe000e100
 8000aa0:	e000ed00 	.word	0xe000ed00

08000aa4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b089      	sub	sp, #36	; 0x24
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	60f8      	str	r0, [r7, #12]
 8000aac:	60b9      	str	r1, [r7, #8]
 8000aae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	f003 0307 	and.w	r3, r3, #7
 8000ab6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ab8:	69fb      	ldr	r3, [r7, #28]
 8000aba:	f1c3 0307 	rsb	r3, r3, #7
 8000abe:	2b04      	cmp	r3, #4
 8000ac0:	bf28      	it	cs
 8000ac2:	2304      	movcs	r3, #4
 8000ac4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ac6:	69fb      	ldr	r3, [r7, #28]
 8000ac8:	3304      	adds	r3, #4
 8000aca:	2b06      	cmp	r3, #6
 8000acc:	d902      	bls.n	8000ad4 <NVIC_EncodePriority+0x30>
 8000ace:	69fb      	ldr	r3, [r7, #28]
 8000ad0:	3b03      	subs	r3, #3
 8000ad2:	e000      	b.n	8000ad6 <NVIC_EncodePriority+0x32>
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ad8:	f04f 32ff 	mov.w	r2, #4294967295
 8000adc:	69bb      	ldr	r3, [r7, #24]
 8000ade:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae2:	43da      	mvns	r2, r3
 8000ae4:	68bb      	ldr	r3, [r7, #8]
 8000ae6:	401a      	ands	r2, r3
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000aec:	f04f 31ff 	mov.w	r1, #4294967295
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	fa01 f303 	lsl.w	r3, r1, r3
 8000af6:	43d9      	mvns	r1, r3
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000afc:	4313      	orrs	r3, r2
         );
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	3724      	adds	r7, #36	; 0x24
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bc80      	pop	{r7}
 8000b06:	4770      	bx	lr

08000b08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	3b01      	subs	r3, #1
 8000b14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b18:	d301      	bcc.n	8000b1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	e00f      	b.n	8000b3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b1e:	4a0a      	ldr	r2, [pc, #40]	; (8000b48 <SysTick_Config+0x40>)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	3b01      	subs	r3, #1
 8000b24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b26:	210f      	movs	r1, #15
 8000b28:	f04f 30ff 	mov.w	r0, #4294967295
 8000b2c:	f7ff ff90 	bl	8000a50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b30:	4b05      	ldr	r3, [pc, #20]	; (8000b48 <SysTick_Config+0x40>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b36:	4b04      	ldr	r3, [pc, #16]	; (8000b48 <SysTick_Config+0x40>)
 8000b38:	2207      	movs	r2, #7
 8000b3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b3c:	2300      	movs	r3, #0
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	3708      	adds	r7, #8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	e000e010 	.word	0xe000e010

08000b4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b54:	6878      	ldr	r0, [r7, #4]
 8000b56:	f7ff ff49 	bl	80009ec <__NVIC_SetPriorityGrouping>
}
 8000b5a:	bf00      	nop
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}

08000b62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b62:	b580      	push	{r7, lr}
 8000b64:	b086      	sub	sp, #24
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	4603      	mov	r3, r0
 8000b6a:	60b9      	str	r1, [r7, #8]
 8000b6c:	607a      	str	r2, [r7, #4]
 8000b6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b70:	2300      	movs	r3, #0
 8000b72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b74:	f7ff ff5e 	bl	8000a34 <__NVIC_GetPriorityGrouping>
 8000b78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b7a:	687a      	ldr	r2, [r7, #4]
 8000b7c:	68b9      	ldr	r1, [r7, #8]
 8000b7e:	6978      	ldr	r0, [r7, #20]
 8000b80:	f7ff ff90 	bl	8000aa4 <NVIC_EncodePriority>
 8000b84:	4602      	mov	r2, r0
 8000b86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b8a:	4611      	mov	r1, r2
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f7ff ff5f 	bl	8000a50 <__NVIC_SetPriority>
}
 8000b92:	bf00      	nop
 8000b94:	3718      	adds	r7, #24
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}

08000b9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b9a:	b580      	push	{r7, lr}
 8000b9c:	b082      	sub	sp, #8
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ba2:	6878      	ldr	r0, [r7, #4]
 8000ba4:	f7ff ffb0 	bl	8000b08 <SysTick_Config>
 8000ba8:	4603      	mov	r3, r0
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
	...

08000bb4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b086      	sub	sp, #24
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d101      	bne.n	8000bc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	e272      	b.n	80010ac <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	f003 0301 	and.w	r3, r3, #1
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	f000 8087 	beq.w	8000ce2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000bd4:	4b92      	ldr	r3, [pc, #584]	; (8000e20 <HAL_RCC_OscConfig+0x26c>)
 8000bd6:	685b      	ldr	r3, [r3, #4]
 8000bd8:	f003 030c 	and.w	r3, r3, #12
 8000bdc:	2b04      	cmp	r3, #4
 8000bde:	d00c      	beq.n	8000bfa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000be0:	4b8f      	ldr	r3, [pc, #572]	; (8000e20 <HAL_RCC_OscConfig+0x26c>)
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	f003 030c 	and.w	r3, r3, #12
 8000be8:	2b08      	cmp	r3, #8
 8000bea:	d112      	bne.n	8000c12 <HAL_RCC_OscConfig+0x5e>
 8000bec:	4b8c      	ldr	r3, [pc, #560]	; (8000e20 <HAL_RCC_OscConfig+0x26c>)
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bf8:	d10b      	bne.n	8000c12 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bfa:	4b89      	ldr	r3, [pc, #548]	; (8000e20 <HAL_RCC_OscConfig+0x26c>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d06c      	beq.n	8000ce0 <HAL_RCC_OscConfig+0x12c>
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	685b      	ldr	r3, [r3, #4]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d168      	bne.n	8000ce0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	e24c      	b.n	80010ac <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c1a:	d106      	bne.n	8000c2a <HAL_RCC_OscConfig+0x76>
 8000c1c:	4b80      	ldr	r3, [pc, #512]	; (8000e20 <HAL_RCC_OscConfig+0x26c>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a7f      	ldr	r2, [pc, #508]	; (8000e20 <HAL_RCC_OscConfig+0x26c>)
 8000c22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c26:	6013      	str	r3, [r2, #0]
 8000c28:	e02e      	b.n	8000c88 <HAL_RCC_OscConfig+0xd4>
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	685b      	ldr	r3, [r3, #4]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d10c      	bne.n	8000c4c <HAL_RCC_OscConfig+0x98>
 8000c32:	4b7b      	ldr	r3, [pc, #492]	; (8000e20 <HAL_RCC_OscConfig+0x26c>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	4a7a      	ldr	r2, [pc, #488]	; (8000e20 <HAL_RCC_OscConfig+0x26c>)
 8000c38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c3c:	6013      	str	r3, [r2, #0]
 8000c3e:	4b78      	ldr	r3, [pc, #480]	; (8000e20 <HAL_RCC_OscConfig+0x26c>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4a77      	ldr	r2, [pc, #476]	; (8000e20 <HAL_RCC_OscConfig+0x26c>)
 8000c44:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c48:	6013      	str	r3, [r2, #0]
 8000c4a:	e01d      	b.n	8000c88 <HAL_RCC_OscConfig+0xd4>
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	685b      	ldr	r3, [r3, #4]
 8000c50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c54:	d10c      	bne.n	8000c70 <HAL_RCC_OscConfig+0xbc>
 8000c56:	4b72      	ldr	r3, [pc, #456]	; (8000e20 <HAL_RCC_OscConfig+0x26c>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4a71      	ldr	r2, [pc, #452]	; (8000e20 <HAL_RCC_OscConfig+0x26c>)
 8000c5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c60:	6013      	str	r3, [r2, #0]
 8000c62:	4b6f      	ldr	r3, [pc, #444]	; (8000e20 <HAL_RCC_OscConfig+0x26c>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4a6e      	ldr	r2, [pc, #440]	; (8000e20 <HAL_RCC_OscConfig+0x26c>)
 8000c68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c6c:	6013      	str	r3, [r2, #0]
 8000c6e:	e00b      	b.n	8000c88 <HAL_RCC_OscConfig+0xd4>
 8000c70:	4b6b      	ldr	r3, [pc, #428]	; (8000e20 <HAL_RCC_OscConfig+0x26c>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a6a      	ldr	r2, [pc, #424]	; (8000e20 <HAL_RCC_OscConfig+0x26c>)
 8000c76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c7a:	6013      	str	r3, [r2, #0]
 8000c7c:	4b68      	ldr	r3, [pc, #416]	; (8000e20 <HAL_RCC_OscConfig+0x26c>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a67      	ldr	r2, [pc, #412]	; (8000e20 <HAL_RCC_OscConfig+0x26c>)
 8000c82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c86:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d013      	beq.n	8000cb8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c90:	f7ff fea2 	bl	80009d8 <HAL_GetTick>
 8000c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c96:	e008      	b.n	8000caa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c98:	f7ff fe9e 	bl	80009d8 <HAL_GetTick>
 8000c9c:	4602      	mov	r2, r0
 8000c9e:	693b      	ldr	r3, [r7, #16]
 8000ca0:	1ad3      	subs	r3, r2, r3
 8000ca2:	2b64      	cmp	r3, #100	; 0x64
 8000ca4:	d901      	bls.n	8000caa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000ca6:	2303      	movs	r3, #3
 8000ca8:	e200      	b.n	80010ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000caa:	4b5d      	ldr	r3, [pc, #372]	; (8000e20 <HAL_RCC_OscConfig+0x26c>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d0f0      	beq.n	8000c98 <HAL_RCC_OscConfig+0xe4>
 8000cb6:	e014      	b.n	8000ce2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cb8:	f7ff fe8e 	bl	80009d8 <HAL_GetTick>
 8000cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cbe:	e008      	b.n	8000cd2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000cc0:	f7ff fe8a 	bl	80009d8 <HAL_GetTick>
 8000cc4:	4602      	mov	r2, r0
 8000cc6:	693b      	ldr	r3, [r7, #16]
 8000cc8:	1ad3      	subs	r3, r2, r3
 8000cca:	2b64      	cmp	r3, #100	; 0x64
 8000ccc:	d901      	bls.n	8000cd2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000cce:	2303      	movs	r3, #3
 8000cd0:	e1ec      	b.n	80010ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cd2:	4b53      	ldr	r3, [pc, #332]	; (8000e20 <HAL_RCC_OscConfig+0x26c>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d1f0      	bne.n	8000cc0 <HAL_RCC_OscConfig+0x10c>
 8000cde:	e000      	b.n	8000ce2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ce0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f003 0302 	and.w	r3, r3, #2
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d063      	beq.n	8000db6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000cee:	4b4c      	ldr	r3, [pc, #304]	; (8000e20 <HAL_RCC_OscConfig+0x26c>)
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	f003 030c 	and.w	r3, r3, #12
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d00b      	beq.n	8000d12 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000cfa:	4b49      	ldr	r3, [pc, #292]	; (8000e20 <HAL_RCC_OscConfig+0x26c>)
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	f003 030c 	and.w	r3, r3, #12
 8000d02:	2b08      	cmp	r3, #8
 8000d04:	d11c      	bne.n	8000d40 <HAL_RCC_OscConfig+0x18c>
 8000d06:	4b46      	ldr	r3, [pc, #280]	; (8000e20 <HAL_RCC_OscConfig+0x26c>)
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d116      	bne.n	8000d40 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d12:	4b43      	ldr	r3, [pc, #268]	; (8000e20 <HAL_RCC_OscConfig+0x26c>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	f003 0302 	and.w	r3, r3, #2
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d005      	beq.n	8000d2a <HAL_RCC_OscConfig+0x176>
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	691b      	ldr	r3, [r3, #16]
 8000d22:	2b01      	cmp	r3, #1
 8000d24:	d001      	beq.n	8000d2a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000d26:	2301      	movs	r3, #1
 8000d28:	e1c0      	b.n	80010ac <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d2a:	4b3d      	ldr	r3, [pc, #244]	; (8000e20 <HAL_RCC_OscConfig+0x26c>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	695b      	ldr	r3, [r3, #20]
 8000d36:	00db      	lsls	r3, r3, #3
 8000d38:	4939      	ldr	r1, [pc, #228]	; (8000e20 <HAL_RCC_OscConfig+0x26c>)
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d3e:	e03a      	b.n	8000db6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	691b      	ldr	r3, [r3, #16]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d020      	beq.n	8000d8a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d48:	4b36      	ldr	r3, [pc, #216]	; (8000e24 <HAL_RCC_OscConfig+0x270>)
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d4e:	f7ff fe43 	bl	80009d8 <HAL_GetTick>
 8000d52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d54:	e008      	b.n	8000d68 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d56:	f7ff fe3f 	bl	80009d8 <HAL_GetTick>
 8000d5a:	4602      	mov	r2, r0
 8000d5c:	693b      	ldr	r3, [r7, #16]
 8000d5e:	1ad3      	subs	r3, r2, r3
 8000d60:	2b02      	cmp	r3, #2
 8000d62:	d901      	bls.n	8000d68 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000d64:	2303      	movs	r3, #3
 8000d66:	e1a1      	b.n	80010ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d68:	4b2d      	ldr	r3, [pc, #180]	; (8000e20 <HAL_RCC_OscConfig+0x26c>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f003 0302 	and.w	r3, r3, #2
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d0f0      	beq.n	8000d56 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d74:	4b2a      	ldr	r3, [pc, #168]	; (8000e20 <HAL_RCC_OscConfig+0x26c>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	695b      	ldr	r3, [r3, #20]
 8000d80:	00db      	lsls	r3, r3, #3
 8000d82:	4927      	ldr	r1, [pc, #156]	; (8000e20 <HAL_RCC_OscConfig+0x26c>)
 8000d84:	4313      	orrs	r3, r2
 8000d86:	600b      	str	r3, [r1, #0]
 8000d88:	e015      	b.n	8000db6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d8a:	4b26      	ldr	r3, [pc, #152]	; (8000e24 <HAL_RCC_OscConfig+0x270>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d90:	f7ff fe22 	bl	80009d8 <HAL_GetTick>
 8000d94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d96:	e008      	b.n	8000daa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d98:	f7ff fe1e 	bl	80009d8 <HAL_GetTick>
 8000d9c:	4602      	mov	r2, r0
 8000d9e:	693b      	ldr	r3, [r7, #16]
 8000da0:	1ad3      	subs	r3, r2, r3
 8000da2:	2b02      	cmp	r3, #2
 8000da4:	d901      	bls.n	8000daa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000da6:	2303      	movs	r3, #3
 8000da8:	e180      	b.n	80010ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000daa:	4b1d      	ldr	r3, [pc, #116]	; (8000e20 <HAL_RCC_OscConfig+0x26c>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f003 0302 	and.w	r3, r3, #2
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d1f0      	bne.n	8000d98 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f003 0308 	and.w	r3, r3, #8
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d03a      	beq.n	8000e38 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	699b      	ldr	r3, [r3, #24]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d019      	beq.n	8000dfe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000dca:	4b17      	ldr	r3, [pc, #92]	; (8000e28 <HAL_RCC_OscConfig+0x274>)
 8000dcc:	2201      	movs	r2, #1
 8000dce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000dd0:	f7ff fe02 	bl	80009d8 <HAL_GetTick>
 8000dd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dd6:	e008      	b.n	8000dea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000dd8:	f7ff fdfe 	bl	80009d8 <HAL_GetTick>
 8000ddc:	4602      	mov	r2, r0
 8000dde:	693b      	ldr	r3, [r7, #16]
 8000de0:	1ad3      	subs	r3, r2, r3
 8000de2:	2b02      	cmp	r3, #2
 8000de4:	d901      	bls.n	8000dea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000de6:	2303      	movs	r3, #3
 8000de8:	e160      	b.n	80010ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dea:	4b0d      	ldr	r3, [pc, #52]	; (8000e20 <HAL_RCC_OscConfig+0x26c>)
 8000dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dee:	f003 0302 	and.w	r3, r3, #2
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d0f0      	beq.n	8000dd8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000df6:	2001      	movs	r0, #1
 8000df8:	f000 fa9c 	bl	8001334 <RCC_Delay>
 8000dfc:	e01c      	b.n	8000e38 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000dfe:	4b0a      	ldr	r3, [pc, #40]	; (8000e28 <HAL_RCC_OscConfig+0x274>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e04:	f7ff fde8 	bl	80009d8 <HAL_GetTick>
 8000e08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e0a:	e00f      	b.n	8000e2c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e0c:	f7ff fde4 	bl	80009d8 <HAL_GetTick>
 8000e10:	4602      	mov	r2, r0
 8000e12:	693b      	ldr	r3, [r7, #16]
 8000e14:	1ad3      	subs	r3, r2, r3
 8000e16:	2b02      	cmp	r3, #2
 8000e18:	d908      	bls.n	8000e2c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000e1a:	2303      	movs	r3, #3
 8000e1c:	e146      	b.n	80010ac <HAL_RCC_OscConfig+0x4f8>
 8000e1e:	bf00      	nop
 8000e20:	40021000 	.word	0x40021000
 8000e24:	42420000 	.word	0x42420000
 8000e28:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e2c:	4b92      	ldr	r3, [pc, #584]	; (8001078 <HAL_RCC_OscConfig+0x4c4>)
 8000e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e30:	f003 0302 	and.w	r3, r3, #2
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d1e9      	bne.n	8000e0c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f003 0304 	and.w	r3, r3, #4
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	f000 80a6 	beq.w	8000f92 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e46:	2300      	movs	r3, #0
 8000e48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e4a:	4b8b      	ldr	r3, [pc, #556]	; (8001078 <HAL_RCC_OscConfig+0x4c4>)
 8000e4c:	69db      	ldr	r3, [r3, #28]
 8000e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d10d      	bne.n	8000e72 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e56:	4b88      	ldr	r3, [pc, #544]	; (8001078 <HAL_RCC_OscConfig+0x4c4>)
 8000e58:	69db      	ldr	r3, [r3, #28]
 8000e5a:	4a87      	ldr	r2, [pc, #540]	; (8001078 <HAL_RCC_OscConfig+0x4c4>)
 8000e5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e60:	61d3      	str	r3, [r2, #28]
 8000e62:	4b85      	ldr	r3, [pc, #532]	; (8001078 <HAL_RCC_OscConfig+0x4c4>)
 8000e64:	69db      	ldr	r3, [r3, #28]
 8000e66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e6a:	60bb      	str	r3, [r7, #8]
 8000e6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e72:	4b82      	ldr	r3, [pc, #520]	; (800107c <HAL_RCC_OscConfig+0x4c8>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d118      	bne.n	8000eb0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e7e:	4b7f      	ldr	r3, [pc, #508]	; (800107c <HAL_RCC_OscConfig+0x4c8>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4a7e      	ldr	r2, [pc, #504]	; (800107c <HAL_RCC_OscConfig+0x4c8>)
 8000e84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e8a:	f7ff fda5 	bl	80009d8 <HAL_GetTick>
 8000e8e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e90:	e008      	b.n	8000ea4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e92:	f7ff fda1 	bl	80009d8 <HAL_GetTick>
 8000e96:	4602      	mov	r2, r0
 8000e98:	693b      	ldr	r3, [r7, #16]
 8000e9a:	1ad3      	subs	r3, r2, r3
 8000e9c:	2b64      	cmp	r3, #100	; 0x64
 8000e9e:	d901      	bls.n	8000ea4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000ea0:	2303      	movs	r3, #3
 8000ea2:	e103      	b.n	80010ac <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ea4:	4b75      	ldr	r3, [pc, #468]	; (800107c <HAL_RCC_OscConfig+0x4c8>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d0f0      	beq.n	8000e92 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	68db      	ldr	r3, [r3, #12]
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	d106      	bne.n	8000ec6 <HAL_RCC_OscConfig+0x312>
 8000eb8:	4b6f      	ldr	r3, [pc, #444]	; (8001078 <HAL_RCC_OscConfig+0x4c4>)
 8000eba:	6a1b      	ldr	r3, [r3, #32]
 8000ebc:	4a6e      	ldr	r2, [pc, #440]	; (8001078 <HAL_RCC_OscConfig+0x4c4>)
 8000ebe:	f043 0301 	orr.w	r3, r3, #1
 8000ec2:	6213      	str	r3, [r2, #32]
 8000ec4:	e02d      	b.n	8000f22 <HAL_RCC_OscConfig+0x36e>
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	68db      	ldr	r3, [r3, #12]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d10c      	bne.n	8000ee8 <HAL_RCC_OscConfig+0x334>
 8000ece:	4b6a      	ldr	r3, [pc, #424]	; (8001078 <HAL_RCC_OscConfig+0x4c4>)
 8000ed0:	6a1b      	ldr	r3, [r3, #32]
 8000ed2:	4a69      	ldr	r2, [pc, #420]	; (8001078 <HAL_RCC_OscConfig+0x4c4>)
 8000ed4:	f023 0301 	bic.w	r3, r3, #1
 8000ed8:	6213      	str	r3, [r2, #32]
 8000eda:	4b67      	ldr	r3, [pc, #412]	; (8001078 <HAL_RCC_OscConfig+0x4c4>)
 8000edc:	6a1b      	ldr	r3, [r3, #32]
 8000ede:	4a66      	ldr	r2, [pc, #408]	; (8001078 <HAL_RCC_OscConfig+0x4c4>)
 8000ee0:	f023 0304 	bic.w	r3, r3, #4
 8000ee4:	6213      	str	r3, [r2, #32]
 8000ee6:	e01c      	b.n	8000f22 <HAL_RCC_OscConfig+0x36e>
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	68db      	ldr	r3, [r3, #12]
 8000eec:	2b05      	cmp	r3, #5
 8000eee:	d10c      	bne.n	8000f0a <HAL_RCC_OscConfig+0x356>
 8000ef0:	4b61      	ldr	r3, [pc, #388]	; (8001078 <HAL_RCC_OscConfig+0x4c4>)
 8000ef2:	6a1b      	ldr	r3, [r3, #32]
 8000ef4:	4a60      	ldr	r2, [pc, #384]	; (8001078 <HAL_RCC_OscConfig+0x4c4>)
 8000ef6:	f043 0304 	orr.w	r3, r3, #4
 8000efa:	6213      	str	r3, [r2, #32]
 8000efc:	4b5e      	ldr	r3, [pc, #376]	; (8001078 <HAL_RCC_OscConfig+0x4c4>)
 8000efe:	6a1b      	ldr	r3, [r3, #32]
 8000f00:	4a5d      	ldr	r2, [pc, #372]	; (8001078 <HAL_RCC_OscConfig+0x4c4>)
 8000f02:	f043 0301 	orr.w	r3, r3, #1
 8000f06:	6213      	str	r3, [r2, #32]
 8000f08:	e00b      	b.n	8000f22 <HAL_RCC_OscConfig+0x36e>
 8000f0a:	4b5b      	ldr	r3, [pc, #364]	; (8001078 <HAL_RCC_OscConfig+0x4c4>)
 8000f0c:	6a1b      	ldr	r3, [r3, #32]
 8000f0e:	4a5a      	ldr	r2, [pc, #360]	; (8001078 <HAL_RCC_OscConfig+0x4c4>)
 8000f10:	f023 0301 	bic.w	r3, r3, #1
 8000f14:	6213      	str	r3, [r2, #32]
 8000f16:	4b58      	ldr	r3, [pc, #352]	; (8001078 <HAL_RCC_OscConfig+0x4c4>)
 8000f18:	6a1b      	ldr	r3, [r3, #32]
 8000f1a:	4a57      	ldr	r2, [pc, #348]	; (8001078 <HAL_RCC_OscConfig+0x4c4>)
 8000f1c:	f023 0304 	bic.w	r3, r3, #4
 8000f20:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	68db      	ldr	r3, [r3, #12]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d015      	beq.n	8000f56 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f2a:	f7ff fd55 	bl	80009d8 <HAL_GetTick>
 8000f2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f30:	e00a      	b.n	8000f48 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f32:	f7ff fd51 	bl	80009d8 <HAL_GetTick>
 8000f36:	4602      	mov	r2, r0
 8000f38:	693b      	ldr	r3, [r7, #16]
 8000f3a:	1ad3      	subs	r3, r2, r3
 8000f3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d901      	bls.n	8000f48 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000f44:	2303      	movs	r3, #3
 8000f46:	e0b1      	b.n	80010ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f48:	4b4b      	ldr	r3, [pc, #300]	; (8001078 <HAL_RCC_OscConfig+0x4c4>)
 8000f4a:	6a1b      	ldr	r3, [r3, #32]
 8000f4c:	f003 0302 	and.w	r3, r3, #2
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d0ee      	beq.n	8000f32 <HAL_RCC_OscConfig+0x37e>
 8000f54:	e014      	b.n	8000f80 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f56:	f7ff fd3f 	bl	80009d8 <HAL_GetTick>
 8000f5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f5c:	e00a      	b.n	8000f74 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f5e:	f7ff fd3b 	bl	80009d8 <HAL_GetTick>
 8000f62:	4602      	mov	r2, r0
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	1ad3      	subs	r3, r2, r3
 8000f68:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f6c:	4293      	cmp	r3, r2
 8000f6e:	d901      	bls.n	8000f74 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000f70:	2303      	movs	r3, #3
 8000f72:	e09b      	b.n	80010ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f74:	4b40      	ldr	r3, [pc, #256]	; (8001078 <HAL_RCC_OscConfig+0x4c4>)
 8000f76:	6a1b      	ldr	r3, [r3, #32]
 8000f78:	f003 0302 	and.w	r3, r3, #2
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d1ee      	bne.n	8000f5e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000f80:	7dfb      	ldrb	r3, [r7, #23]
 8000f82:	2b01      	cmp	r3, #1
 8000f84:	d105      	bne.n	8000f92 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f86:	4b3c      	ldr	r3, [pc, #240]	; (8001078 <HAL_RCC_OscConfig+0x4c4>)
 8000f88:	69db      	ldr	r3, [r3, #28]
 8000f8a:	4a3b      	ldr	r2, [pc, #236]	; (8001078 <HAL_RCC_OscConfig+0x4c4>)
 8000f8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f90:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	69db      	ldr	r3, [r3, #28]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	f000 8087 	beq.w	80010aa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f9c:	4b36      	ldr	r3, [pc, #216]	; (8001078 <HAL_RCC_OscConfig+0x4c4>)
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	f003 030c 	and.w	r3, r3, #12
 8000fa4:	2b08      	cmp	r3, #8
 8000fa6:	d061      	beq.n	800106c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	69db      	ldr	r3, [r3, #28]
 8000fac:	2b02      	cmp	r3, #2
 8000fae:	d146      	bne.n	800103e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fb0:	4b33      	ldr	r3, [pc, #204]	; (8001080 <HAL_RCC_OscConfig+0x4cc>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fb6:	f7ff fd0f 	bl	80009d8 <HAL_GetTick>
 8000fba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fbc:	e008      	b.n	8000fd0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fbe:	f7ff fd0b 	bl	80009d8 <HAL_GetTick>
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	1ad3      	subs	r3, r2, r3
 8000fc8:	2b02      	cmp	r3, #2
 8000fca:	d901      	bls.n	8000fd0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000fcc:	2303      	movs	r3, #3
 8000fce:	e06d      	b.n	80010ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fd0:	4b29      	ldr	r3, [pc, #164]	; (8001078 <HAL_RCC_OscConfig+0x4c4>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d1f0      	bne.n	8000fbe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6a1b      	ldr	r3, [r3, #32]
 8000fe0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fe4:	d108      	bne.n	8000ff8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000fe6:	4b24      	ldr	r3, [pc, #144]	; (8001078 <HAL_RCC_OscConfig+0x4c4>)
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	689b      	ldr	r3, [r3, #8]
 8000ff2:	4921      	ldr	r1, [pc, #132]	; (8001078 <HAL_RCC_OscConfig+0x4c4>)
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000ff8:	4b1f      	ldr	r3, [pc, #124]	; (8001078 <HAL_RCC_OscConfig+0x4c4>)
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6a19      	ldr	r1, [r3, #32]
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001008:	430b      	orrs	r3, r1
 800100a:	491b      	ldr	r1, [pc, #108]	; (8001078 <HAL_RCC_OscConfig+0x4c4>)
 800100c:	4313      	orrs	r3, r2
 800100e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001010:	4b1b      	ldr	r3, [pc, #108]	; (8001080 <HAL_RCC_OscConfig+0x4cc>)
 8001012:	2201      	movs	r2, #1
 8001014:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001016:	f7ff fcdf 	bl	80009d8 <HAL_GetTick>
 800101a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800101c:	e008      	b.n	8001030 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800101e:	f7ff fcdb 	bl	80009d8 <HAL_GetTick>
 8001022:	4602      	mov	r2, r0
 8001024:	693b      	ldr	r3, [r7, #16]
 8001026:	1ad3      	subs	r3, r2, r3
 8001028:	2b02      	cmp	r3, #2
 800102a:	d901      	bls.n	8001030 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800102c:	2303      	movs	r3, #3
 800102e:	e03d      	b.n	80010ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001030:	4b11      	ldr	r3, [pc, #68]	; (8001078 <HAL_RCC_OscConfig+0x4c4>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001038:	2b00      	cmp	r3, #0
 800103a:	d0f0      	beq.n	800101e <HAL_RCC_OscConfig+0x46a>
 800103c:	e035      	b.n	80010aa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800103e:	4b10      	ldr	r3, [pc, #64]	; (8001080 <HAL_RCC_OscConfig+0x4cc>)
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001044:	f7ff fcc8 	bl	80009d8 <HAL_GetTick>
 8001048:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800104a:	e008      	b.n	800105e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800104c:	f7ff fcc4 	bl	80009d8 <HAL_GetTick>
 8001050:	4602      	mov	r2, r0
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	1ad3      	subs	r3, r2, r3
 8001056:	2b02      	cmp	r3, #2
 8001058:	d901      	bls.n	800105e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800105a:	2303      	movs	r3, #3
 800105c:	e026      	b.n	80010ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800105e:	4b06      	ldr	r3, [pc, #24]	; (8001078 <HAL_RCC_OscConfig+0x4c4>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001066:	2b00      	cmp	r3, #0
 8001068:	d1f0      	bne.n	800104c <HAL_RCC_OscConfig+0x498>
 800106a:	e01e      	b.n	80010aa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	69db      	ldr	r3, [r3, #28]
 8001070:	2b01      	cmp	r3, #1
 8001072:	d107      	bne.n	8001084 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001074:	2301      	movs	r3, #1
 8001076:	e019      	b.n	80010ac <HAL_RCC_OscConfig+0x4f8>
 8001078:	40021000 	.word	0x40021000
 800107c:	40007000 	.word	0x40007000
 8001080:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001084:	4b0b      	ldr	r3, [pc, #44]	; (80010b4 <HAL_RCC_OscConfig+0x500>)
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6a1b      	ldr	r3, [r3, #32]
 8001094:	429a      	cmp	r2, r3
 8001096:	d106      	bne.n	80010a6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010a2:	429a      	cmp	r2, r3
 80010a4:	d001      	beq.n	80010aa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	e000      	b.n	80010ac <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80010aa:	2300      	movs	r3, #0
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3718      	adds	r7, #24
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	40021000 	.word	0x40021000

080010b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d101      	bne.n	80010cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80010c8:	2301      	movs	r3, #1
 80010ca:	e0d0      	b.n	800126e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80010cc:	4b6a      	ldr	r3, [pc, #424]	; (8001278 <HAL_RCC_ClockConfig+0x1c0>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f003 0307 	and.w	r3, r3, #7
 80010d4:	683a      	ldr	r2, [r7, #0]
 80010d6:	429a      	cmp	r2, r3
 80010d8:	d910      	bls.n	80010fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010da:	4b67      	ldr	r3, [pc, #412]	; (8001278 <HAL_RCC_ClockConfig+0x1c0>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f023 0207 	bic.w	r2, r3, #7
 80010e2:	4965      	ldr	r1, [pc, #404]	; (8001278 <HAL_RCC_ClockConfig+0x1c0>)
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	4313      	orrs	r3, r2
 80010e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80010ea:	4b63      	ldr	r3, [pc, #396]	; (8001278 <HAL_RCC_ClockConfig+0x1c0>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f003 0307 	and.w	r3, r3, #7
 80010f2:	683a      	ldr	r2, [r7, #0]
 80010f4:	429a      	cmp	r2, r3
 80010f6:	d001      	beq.n	80010fc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80010f8:	2301      	movs	r3, #1
 80010fa:	e0b8      	b.n	800126e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f003 0302 	and.w	r3, r3, #2
 8001104:	2b00      	cmp	r3, #0
 8001106:	d020      	beq.n	800114a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f003 0304 	and.w	r3, r3, #4
 8001110:	2b00      	cmp	r3, #0
 8001112:	d005      	beq.n	8001120 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001114:	4b59      	ldr	r3, [pc, #356]	; (800127c <HAL_RCC_ClockConfig+0x1c4>)
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	4a58      	ldr	r2, [pc, #352]	; (800127c <HAL_RCC_ClockConfig+0x1c4>)
 800111a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800111e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f003 0308 	and.w	r3, r3, #8
 8001128:	2b00      	cmp	r3, #0
 800112a:	d005      	beq.n	8001138 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800112c:	4b53      	ldr	r3, [pc, #332]	; (800127c <HAL_RCC_ClockConfig+0x1c4>)
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	4a52      	ldr	r2, [pc, #328]	; (800127c <HAL_RCC_ClockConfig+0x1c4>)
 8001132:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001136:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001138:	4b50      	ldr	r3, [pc, #320]	; (800127c <HAL_RCC_ClockConfig+0x1c4>)
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	689b      	ldr	r3, [r3, #8]
 8001144:	494d      	ldr	r1, [pc, #308]	; (800127c <HAL_RCC_ClockConfig+0x1c4>)
 8001146:	4313      	orrs	r3, r2
 8001148:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f003 0301 	and.w	r3, r3, #1
 8001152:	2b00      	cmp	r3, #0
 8001154:	d040      	beq.n	80011d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	2b01      	cmp	r3, #1
 800115c:	d107      	bne.n	800116e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800115e:	4b47      	ldr	r3, [pc, #284]	; (800127c <HAL_RCC_ClockConfig+0x1c4>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001166:	2b00      	cmp	r3, #0
 8001168:	d115      	bne.n	8001196 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800116a:	2301      	movs	r3, #1
 800116c:	e07f      	b.n	800126e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	2b02      	cmp	r3, #2
 8001174:	d107      	bne.n	8001186 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001176:	4b41      	ldr	r3, [pc, #260]	; (800127c <HAL_RCC_ClockConfig+0x1c4>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800117e:	2b00      	cmp	r3, #0
 8001180:	d109      	bne.n	8001196 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	e073      	b.n	800126e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001186:	4b3d      	ldr	r3, [pc, #244]	; (800127c <HAL_RCC_ClockConfig+0x1c4>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f003 0302 	and.w	r3, r3, #2
 800118e:	2b00      	cmp	r3, #0
 8001190:	d101      	bne.n	8001196 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001192:	2301      	movs	r3, #1
 8001194:	e06b      	b.n	800126e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001196:	4b39      	ldr	r3, [pc, #228]	; (800127c <HAL_RCC_ClockConfig+0x1c4>)
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	f023 0203 	bic.w	r2, r3, #3
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	4936      	ldr	r1, [pc, #216]	; (800127c <HAL_RCC_ClockConfig+0x1c4>)
 80011a4:	4313      	orrs	r3, r2
 80011a6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80011a8:	f7ff fc16 	bl	80009d8 <HAL_GetTick>
 80011ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011ae:	e00a      	b.n	80011c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011b0:	f7ff fc12 	bl	80009d8 <HAL_GetTick>
 80011b4:	4602      	mov	r2, r0
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80011be:	4293      	cmp	r3, r2
 80011c0:	d901      	bls.n	80011c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80011c2:	2303      	movs	r3, #3
 80011c4:	e053      	b.n	800126e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011c6:	4b2d      	ldr	r3, [pc, #180]	; (800127c <HAL_RCC_ClockConfig+0x1c4>)
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f003 020c 	and.w	r2, r3, #12
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d1eb      	bne.n	80011b0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80011d8:	4b27      	ldr	r3, [pc, #156]	; (8001278 <HAL_RCC_ClockConfig+0x1c0>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f003 0307 	and.w	r3, r3, #7
 80011e0:	683a      	ldr	r2, [r7, #0]
 80011e2:	429a      	cmp	r2, r3
 80011e4:	d210      	bcs.n	8001208 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011e6:	4b24      	ldr	r3, [pc, #144]	; (8001278 <HAL_RCC_ClockConfig+0x1c0>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f023 0207 	bic.w	r2, r3, #7
 80011ee:	4922      	ldr	r1, [pc, #136]	; (8001278 <HAL_RCC_ClockConfig+0x1c0>)
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	4313      	orrs	r3, r2
 80011f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011f6:	4b20      	ldr	r3, [pc, #128]	; (8001278 <HAL_RCC_ClockConfig+0x1c0>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f003 0307 	and.w	r3, r3, #7
 80011fe:	683a      	ldr	r2, [r7, #0]
 8001200:	429a      	cmp	r2, r3
 8001202:	d001      	beq.n	8001208 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001204:	2301      	movs	r3, #1
 8001206:	e032      	b.n	800126e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f003 0304 	and.w	r3, r3, #4
 8001210:	2b00      	cmp	r3, #0
 8001212:	d008      	beq.n	8001226 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001214:	4b19      	ldr	r3, [pc, #100]	; (800127c <HAL_RCC_ClockConfig+0x1c4>)
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	68db      	ldr	r3, [r3, #12]
 8001220:	4916      	ldr	r1, [pc, #88]	; (800127c <HAL_RCC_ClockConfig+0x1c4>)
 8001222:	4313      	orrs	r3, r2
 8001224:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f003 0308 	and.w	r3, r3, #8
 800122e:	2b00      	cmp	r3, #0
 8001230:	d009      	beq.n	8001246 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001232:	4b12      	ldr	r3, [pc, #72]	; (800127c <HAL_RCC_ClockConfig+0x1c4>)
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	691b      	ldr	r3, [r3, #16]
 800123e:	00db      	lsls	r3, r3, #3
 8001240:	490e      	ldr	r1, [pc, #56]	; (800127c <HAL_RCC_ClockConfig+0x1c4>)
 8001242:	4313      	orrs	r3, r2
 8001244:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001246:	f000 f821 	bl	800128c <HAL_RCC_GetSysClockFreq>
 800124a:	4602      	mov	r2, r0
 800124c:	4b0b      	ldr	r3, [pc, #44]	; (800127c <HAL_RCC_ClockConfig+0x1c4>)
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	091b      	lsrs	r3, r3, #4
 8001252:	f003 030f 	and.w	r3, r3, #15
 8001256:	490a      	ldr	r1, [pc, #40]	; (8001280 <HAL_RCC_ClockConfig+0x1c8>)
 8001258:	5ccb      	ldrb	r3, [r1, r3]
 800125a:	fa22 f303 	lsr.w	r3, r2, r3
 800125e:	4a09      	ldr	r2, [pc, #36]	; (8001284 <HAL_RCC_ClockConfig+0x1cc>)
 8001260:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001262:	4b09      	ldr	r3, [pc, #36]	; (8001288 <HAL_RCC_ClockConfig+0x1d0>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4618      	mov	r0, r3
 8001268:	f7ff fb86 	bl	8000978 <HAL_InitTick>

  return HAL_OK;
 800126c:	2300      	movs	r3, #0
}
 800126e:	4618      	mov	r0, r3
 8001270:	3710      	adds	r7, #16
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	40022000 	.word	0x40022000
 800127c:	40021000 	.word	0x40021000
 8001280:	08001d58 	.word	0x08001d58
 8001284:	20000000 	.word	0x20000000
 8001288:	20000004 	.word	0x20000004

0800128c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800128c:	b480      	push	{r7}
 800128e:	b087      	sub	sp, #28
 8001290:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001292:	2300      	movs	r3, #0
 8001294:	60fb      	str	r3, [r7, #12]
 8001296:	2300      	movs	r3, #0
 8001298:	60bb      	str	r3, [r7, #8]
 800129a:	2300      	movs	r3, #0
 800129c:	617b      	str	r3, [r7, #20]
 800129e:	2300      	movs	r3, #0
 80012a0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80012a2:	2300      	movs	r3, #0
 80012a4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80012a6:	4b1e      	ldr	r3, [pc, #120]	; (8001320 <HAL_RCC_GetSysClockFreq+0x94>)
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	f003 030c 	and.w	r3, r3, #12
 80012b2:	2b04      	cmp	r3, #4
 80012b4:	d002      	beq.n	80012bc <HAL_RCC_GetSysClockFreq+0x30>
 80012b6:	2b08      	cmp	r3, #8
 80012b8:	d003      	beq.n	80012c2 <HAL_RCC_GetSysClockFreq+0x36>
 80012ba:	e027      	b.n	800130c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80012bc:	4b19      	ldr	r3, [pc, #100]	; (8001324 <HAL_RCC_GetSysClockFreq+0x98>)
 80012be:	613b      	str	r3, [r7, #16]
      break;
 80012c0:	e027      	b.n	8001312 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	0c9b      	lsrs	r3, r3, #18
 80012c6:	f003 030f 	and.w	r3, r3, #15
 80012ca:	4a17      	ldr	r2, [pc, #92]	; (8001328 <HAL_RCC_GetSysClockFreq+0x9c>)
 80012cc:	5cd3      	ldrb	r3, [r2, r3]
 80012ce:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d010      	beq.n	80012fc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80012da:	4b11      	ldr	r3, [pc, #68]	; (8001320 <HAL_RCC_GetSysClockFreq+0x94>)
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	0c5b      	lsrs	r3, r3, #17
 80012e0:	f003 0301 	and.w	r3, r3, #1
 80012e4:	4a11      	ldr	r2, [pc, #68]	; (800132c <HAL_RCC_GetSysClockFreq+0xa0>)
 80012e6:	5cd3      	ldrb	r3, [r2, r3]
 80012e8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a0d      	ldr	r2, [pc, #52]	; (8001324 <HAL_RCC_GetSysClockFreq+0x98>)
 80012ee:	fb03 f202 	mul.w	r2, r3, r2
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80012f8:	617b      	str	r3, [r7, #20]
 80012fa:	e004      	b.n	8001306 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	4a0c      	ldr	r2, [pc, #48]	; (8001330 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001300:	fb02 f303 	mul.w	r3, r2, r3
 8001304:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	613b      	str	r3, [r7, #16]
      break;
 800130a:	e002      	b.n	8001312 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800130c:	4b05      	ldr	r3, [pc, #20]	; (8001324 <HAL_RCC_GetSysClockFreq+0x98>)
 800130e:	613b      	str	r3, [r7, #16]
      break;
 8001310:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001312:	693b      	ldr	r3, [r7, #16]
}
 8001314:	4618      	mov	r0, r3
 8001316:	371c      	adds	r7, #28
 8001318:	46bd      	mov	sp, r7
 800131a:	bc80      	pop	{r7}
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	40021000 	.word	0x40021000
 8001324:	007a1200 	.word	0x007a1200
 8001328:	08001d68 	.word	0x08001d68
 800132c:	08001d78 	.word	0x08001d78
 8001330:	003d0900 	.word	0x003d0900

08001334 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001334:	b480      	push	{r7}
 8001336:	b085      	sub	sp, #20
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800133c:	4b0a      	ldr	r3, [pc, #40]	; (8001368 <RCC_Delay+0x34>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a0a      	ldr	r2, [pc, #40]	; (800136c <RCC_Delay+0x38>)
 8001342:	fba2 2303 	umull	r2, r3, r2, r3
 8001346:	0a5b      	lsrs	r3, r3, #9
 8001348:	687a      	ldr	r2, [r7, #4]
 800134a:	fb02 f303 	mul.w	r3, r2, r3
 800134e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001350:	bf00      	nop
  }
  while (Delay --);
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	1e5a      	subs	r2, r3, #1
 8001356:	60fa      	str	r2, [r7, #12]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d1f9      	bne.n	8001350 <RCC_Delay+0x1c>
}
 800135c:	bf00      	nop
 800135e:	bf00      	nop
 8001360:	3714      	adds	r7, #20
 8001362:	46bd      	mov	sp, r7
 8001364:	bc80      	pop	{r7}
 8001366:	4770      	bx	lr
 8001368:	20000000 	.word	0x20000000
 800136c:	10624dd3 	.word	0x10624dd3

08001370 <sniprintf>:
 8001370:	b40c      	push	{r2, r3}
 8001372:	b530      	push	{r4, r5, lr}
 8001374:	4b17      	ldr	r3, [pc, #92]	; (80013d4 <sniprintf+0x64>)
 8001376:	1e0c      	subs	r4, r1, #0
 8001378:	681d      	ldr	r5, [r3, #0]
 800137a:	b09d      	sub	sp, #116	; 0x74
 800137c:	da08      	bge.n	8001390 <sniprintf+0x20>
 800137e:	238b      	movs	r3, #139	; 0x8b
 8001380:	f04f 30ff 	mov.w	r0, #4294967295
 8001384:	602b      	str	r3, [r5, #0]
 8001386:	b01d      	add	sp, #116	; 0x74
 8001388:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800138c:	b002      	add	sp, #8
 800138e:	4770      	bx	lr
 8001390:	f44f 7302 	mov.w	r3, #520	; 0x208
 8001394:	f8ad 3014 	strh.w	r3, [sp, #20]
 8001398:	bf0c      	ite	eq
 800139a:	4623      	moveq	r3, r4
 800139c:	f104 33ff 	addne.w	r3, r4, #4294967295
 80013a0:	9304      	str	r3, [sp, #16]
 80013a2:	9307      	str	r3, [sp, #28]
 80013a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013a8:	9002      	str	r0, [sp, #8]
 80013aa:	9006      	str	r0, [sp, #24]
 80013ac:	f8ad 3016 	strh.w	r3, [sp, #22]
 80013b0:	4628      	mov	r0, r5
 80013b2:	ab21      	add	r3, sp, #132	; 0x84
 80013b4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80013b6:	a902      	add	r1, sp, #8
 80013b8:	9301      	str	r3, [sp, #4]
 80013ba:	f000 f98f 	bl	80016dc <_svfiprintf_r>
 80013be:	1c43      	adds	r3, r0, #1
 80013c0:	bfbc      	itt	lt
 80013c2:	238b      	movlt	r3, #139	; 0x8b
 80013c4:	602b      	strlt	r3, [r5, #0]
 80013c6:	2c00      	cmp	r4, #0
 80013c8:	d0dd      	beq.n	8001386 <sniprintf+0x16>
 80013ca:	2200      	movs	r2, #0
 80013cc:	9b02      	ldr	r3, [sp, #8]
 80013ce:	701a      	strb	r2, [r3, #0]
 80013d0:	e7d9      	b.n	8001386 <sniprintf+0x16>
 80013d2:	bf00      	nop
 80013d4:	20000058 	.word	0x20000058

080013d8 <memset>:
 80013d8:	4603      	mov	r3, r0
 80013da:	4402      	add	r2, r0
 80013dc:	4293      	cmp	r3, r2
 80013de:	d100      	bne.n	80013e2 <memset+0xa>
 80013e0:	4770      	bx	lr
 80013e2:	f803 1b01 	strb.w	r1, [r3], #1
 80013e6:	e7f9      	b.n	80013dc <memset+0x4>

080013e8 <__errno>:
 80013e8:	4b01      	ldr	r3, [pc, #4]	; (80013f0 <__errno+0x8>)
 80013ea:	6818      	ldr	r0, [r3, #0]
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	20000058 	.word	0x20000058

080013f4 <__libc_init_array>:
 80013f4:	b570      	push	{r4, r5, r6, lr}
 80013f6:	2600      	movs	r6, #0
 80013f8:	4d0c      	ldr	r5, [pc, #48]	; (800142c <__libc_init_array+0x38>)
 80013fa:	4c0d      	ldr	r4, [pc, #52]	; (8001430 <__libc_init_array+0x3c>)
 80013fc:	1b64      	subs	r4, r4, r5
 80013fe:	10a4      	asrs	r4, r4, #2
 8001400:	42a6      	cmp	r6, r4
 8001402:	d109      	bne.n	8001418 <__libc_init_array+0x24>
 8001404:	f000 fc7a 	bl	8001cfc <_init>
 8001408:	2600      	movs	r6, #0
 800140a:	4d0a      	ldr	r5, [pc, #40]	; (8001434 <__libc_init_array+0x40>)
 800140c:	4c0a      	ldr	r4, [pc, #40]	; (8001438 <__libc_init_array+0x44>)
 800140e:	1b64      	subs	r4, r4, r5
 8001410:	10a4      	asrs	r4, r4, #2
 8001412:	42a6      	cmp	r6, r4
 8001414:	d105      	bne.n	8001422 <__libc_init_array+0x2e>
 8001416:	bd70      	pop	{r4, r5, r6, pc}
 8001418:	f855 3b04 	ldr.w	r3, [r5], #4
 800141c:	4798      	blx	r3
 800141e:	3601      	adds	r6, #1
 8001420:	e7ee      	b.n	8001400 <__libc_init_array+0xc>
 8001422:	f855 3b04 	ldr.w	r3, [r5], #4
 8001426:	4798      	blx	r3
 8001428:	3601      	adds	r6, #1
 800142a:	e7f2      	b.n	8001412 <__libc_init_array+0x1e>
 800142c:	08001db0 	.word	0x08001db0
 8001430:	08001db0 	.word	0x08001db0
 8001434:	08001db0 	.word	0x08001db0
 8001438:	08001db4 	.word	0x08001db4

0800143c <__retarget_lock_acquire_recursive>:
 800143c:	4770      	bx	lr

0800143e <__retarget_lock_release_recursive>:
 800143e:	4770      	bx	lr

08001440 <_free_r>:
 8001440:	b538      	push	{r3, r4, r5, lr}
 8001442:	4605      	mov	r5, r0
 8001444:	2900      	cmp	r1, #0
 8001446:	d040      	beq.n	80014ca <_free_r+0x8a>
 8001448:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800144c:	1f0c      	subs	r4, r1, #4
 800144e:	2b00      	cmp	r3, #0
 8001450:	bfb8      	it	lt
 8001452:	18e4      	addlt	r4, r4, r3
 8001454:	f000 f8dc 	bl	8001610 <__malloc_lock>
 8001458:	4a1c      	ldr	r2, [pc, #112]	; (80014cc <_free_r+0x8c>)
 800145a:	6813      	ldr	r3, [r2, #0]
 800145c:	b933      	cbnz	r3, 800146c <_free_r+0x2c>
 800145e:	6063      	str	r3, [r4, #4]
 8001460:	6014      	str	r4, [r2, #0]
 8001462:	4628      	mov	r0, r5
 8001464:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001468:	f000 b8d8 	b.w	800161c <__malloc_unlock>
 800146c:	42a3      	cmp	r3, r4
 800146e:	d908      	bls.n	8001482 <_free_r+0x42>
 8001470:	6820      	ldr	r0, [r4, #0]
 8001472:	1821      	adds	r1, r4, r0
 8001474:	428b      	cmp	r3, r1
 8001476:	bf01      	itttt	eq
 8001478:	6819      	ldreq	r1, [r3, #0]
 800147a:	685b      	ldreq	r3, [r3, #4]
 800147c:	1809      	addeq	r1, r1, r0
 800147e:	6021      	streq	r1, [r4, #0]
 8001480:	e7ed      	b.n	800145e <_free_r+0x1e>
 8001482:	461a      	mov	r2, r3
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	b10b      	cbz	r3, 800148c <_free_r+0x4c>
 8001488:	42a3      	cmp	r3, r4
 800148a:	d9fa      	bls.n	8001482 <_free_r+0x42>
 800148c:	6811      	ldr	r1, [r2, #0]
 800148e:	1850      	adds	r0, r2, r1
 8001490:	42a0      	cmp	r0, r4
 8001492:	d10b      	bne.n	80014ac <_free_r+0x6c>
 8001494:	6820      	ldr	r0, [r4, #0]
 8001496:	4401      	add	r1, r0
 8001498:	1850      	adds	r0, r2, r1
 800149a:	4283      	cmp	r3, r0
 800149c:	6011      	str	r1, [r2, #0]
 800149e:	d1e0      	bne.n	8001462 <_free_r+0x22>
 80014a0:	6818      	ldr	r0, [r3, #0]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	4408      	add	r0, r1
 80014a6:	6010      	str	r0, [r2, #0]
 80014a8:	6053      	str	r3, [r2, #4]
 80014aa:	e7da      	b.n	8001462 <_free_r+0x22>
 80014ac:	d902      	bls.n	80014b4 <_free_r+0x74>
 80014ae:	230c      	movs	r3, #12
 80014b0:	602b      	str	r3, [r5, #0]
 80014b2:	e7d6      	b.n	8001462 <_free_r+0x22>
 80014b4:	6820      	ldr	r0, [r4, #0]
 80014b6:	1821      	adds	r1, r4, r0
 80014b8:	428b      	cmp	r3, r1
 80014ba:	bf01      	itttt	eq
 80014bc:	6819      	ldreq	r1, [r3, #0]
 80014be:	685b      	ldreq	r3, [r3, #4]
 80014c0:	1809      	addeq	r1, r1, r0
 80014c2:	6021      	streq	r1, [r4, #0]
 80014c4:	6063      	str	r3, [r4, #4]
 80014c6:	6054      	str	r4, [r2, #4]
 80014c8:	e7cb      	b.n	8001462 <_free_r+0x22>
 80014ca:	bd38      	pop	{r3, r4, r5, pc}
 80014cc:	2000036c 	.word	0x2000036c

080014d0 <sbrk_aligned>:
 80014d0:	b570      	push	{r4, r5, r6, lr}
 80014d2:	4e0e      	ldr	r6, [pc, #56]	; (800150c <sbrk_aligned+0x3c>)
 80014d4:	460c      	mov	r4, r1
 80014d6:	6831      	ldr	r1, [r6, #0]
 80014d8:	4605      	mov	r5, r0
 80014da:	b911      	cbnz	r1, 80014e2 <sbrk_aligned+0x12>
 80014dc:	f000 fbaa 	bl	8001c34 <_sbrk_r>
 80014e0:	6030      	str	r0, [r6, #0]
 80014e2:	4621      	mov	r1, r4
 80014e4:	4628      	mov	r0, r5
 80014e6:	f000 fba5 	bl	8001c34 <_sbrk_r>
 80014ea:	1c43      	adds	r3, r0, #1
 80014ec:	d00a      	beq.n	8001504 <sbrk_aligned+0x34>
 80014ee:	1cc4      	adds	r4, r0, #3
 80014f0:	f024 0403 	bic.w	r4, r4, #3
 80014f4:	42a0      	cmp	r0, r4
 80014f6:	d007      	beq.n	8001508 <sbrk_aligned+0x38>
 80014f8:	1a21      	subs	r1, r4, r0
 80014fa:	4628      	mov	r0, r5
 80014fc:	f000 fb9a 	bl	8001c34 <_sbrk_r>
 8001500:	3001      	adds	r0, #1
 8001502:	d101      	bne.n	8001508 <sbrk_aligned+0x38>
 8001504:	f04f 34ff 	mov.w	r4, #4294967295
 8001508:	4620      	mov	r0, r4
 800150a:	bd70      	pop	{r4, r5, r6, pc}
 800150c:	20000370 	.word	0x20000370

08001510 <_malloc_r>:
 8001510:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001514:	1ccd      	adds	r5, r1, #3
 8001516:	f025 0503 	bic.w	r5, r5, #3
 800151a:	3508      	adds	r5, #8
 800151c:	2d0c      	cmp	r5, #12
 800151e:	bf38      	it	cc
 8001520:	250c      	movcc	r5, #12
 8001522:	2d00      	cmp	r5, #0
 8001524:	4607      	mov	r7, r0
 8001526:	db01      	blt.n	800152c <_malloc_r+0x1c>
 8001528:	42a9      	cmp	r1, r5
 800152a:	d905      	bls.n	8001538 <_malloc_r+0x28>
 800152c:	230c      	movs	r3, #12
 800152e:	2600      	movs	r6, #0
 8001530:	603b      	str	r3, [r7, #0]
 8001532:	4630      	mov	r0, r6
 8001534:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001538:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800160c <_malloc_r+0xfc>
 800153c:	f000 f868 	bl	8001610 <__malloc_lock>
 8001540:	f8d8 3000 	ldr.w	r3, [r8]
 8001544:	461c      	mov	r4, r3
 8001546:	bb5c      	cbnz	r4, 80015a0 <_malloc_r+0x90>
 8001548:	4629      	mov	r1, r5
 800154a:	4638      	mov	r0, r7
 800154c:	f7ff ffc0 	bl	80014d0 <sbrk_aligned>
 8001550:	1c43      	adds	r3, r0, #1
 8001552:	4604      	mov	r4, r0
 8001554:	d155      	bne.n	8001602 <_malloc_r+0xf2>
 8001556:	f8d8 4000 	ldr.w	r4, [r8]
 800155a:	4626      	mov	r6, r4
 800155c:	2e00      	cmp	r6, #0
 800155e:	d145      	bne.n	80015ec <_malloc_r+0xdc>
 8001560:	2c00      	cmp	r4, #0
 8001562:	d048      	beq.n	80015f6 <_malloc_r+0xe6>
 8001564:	6823      	ldr	r3, [r4, #0]
 8001566:	4631      	mov	r1, r6
 8001568:	4638      	mov	r0, r7
 800156a:	eb04 0903 	add.w	r9, r4, r3
 800156e:	f000 fb61 	bl	8001c34 <_sbrk_r>
 8001572:	4581      	cmp	r9, r0
 8001574:	d13f      	bne.n	80015f6 <_malloc_r+0xe6>
 8001576:	6821      	ldr	r1, [r4, #0]
 8001578:	4638      	mov	r0, r7
 800157a:	1a6d      	subs	r5, r5, r1
 800157c:	4629      	mov	r1, r5
 800157e:	f7ff ffa7 	bl	80014d0 <sbrk_aligned>
 8001582:	3001      	adds	r0, #1
 8001584:	d037      	beq.n	80015f6 <_malloc_r+0xe6>
 8001586:	6823      	ldr	r3, [r4, #0]
 8001588:	442b      	add	r3, r5
 800158a:	6023      	str	r3, [r4, #0]
 800158c:	f8d8 3000 	ldr.w	r3, [r8]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d038      	beq.n	8001606 <_malloc_r+0xf6>
 8001594:	685a      	ldr	r2, [r3, #4]
 8001596:	42a2      	cmp	r2, r4
 8001598:	d12b      	bne.n	80015f2 <_malloc_r+0xe2>
 800159a:	2200      	movs	r2, #0
 800159c:	605a      	str	r2, [r3, #4]
 800159e:	e00f      	b.n	80015c0 <_malloc_r+0xb0>
 80015a0:	6822      	ldr	r2, [r4, #0]
 80015a2:	1b52      	subs	r2, r2, r5
 80015a4:	d41f      	bmi.n	80015e6 <_malloc_r+0xd6>
 80015a6:	2a0b      	cmp	r2, #11
 80015a8:	d917      	bls.n	80015da <_malloc_r+0xca>
 80015aa:	1961      	adds	r1, r4, r5
 80015ac:	42a3      	cmp	r3, r4
 80015ae:	6025      	str	r5, [r4, #0]
 80015b0:	bf18      	it	ne
 80015b2:	6059      	strne	r1, [r3, #4]
 80015b4:	6863      	ldr	r3, [r4, #4]
 80015b6:	bf08      	it	eq
 80015b8:	f8c8 1000 	streq.w	r1, [r8]
 80015bc:	5162      	str	r2, [r4, r5]
 80015be:	604b      	str	r3, [r1, #4]
 80015c0:	4638      	mov	r0, r7
 80015c2:	f104 060b 	add.w	r6, r4, #11
 80015c6:	f000 f829 	bl	800161c <__malloc_unlock>
 80015ca:	f026 0607 	bic.w	r6, r6, #7
 80015ce:	1d23      	adds	r3, r4, #4
 80015d0:	1af2      	subs	r2, r6, r3
 80015d2:	d0ae      	beq.n	8001532 <_malloc_r+0x22>
 80015d4:	1b9b      	subs	r3, r3, r6
 80015d6:	50a3      	str	r3, [r4, r2]
 80015d8:	e7ab      	b.n	8001532 <_malloc_r+0x22>
 80015da:	42a3      	cmp	r3, r4
 80015dc:	6862      	ldr	r2, [r4, #4]
 80015de:	d1dd      	bne.n	800159c <_malloc_r+0x8c>
 80015e0:	f8c8 2000 	str.w	r2, [r8]
 80015e4:	e7ec      	b.n	80015c0 <_malloc_r+0xb0>
 80015e6:	4623      	mov	r3, r4
 80015e8:	6864      	ldr	r4, [r4, #4]
 80015ea:	e7ac      	b.n	8001546 <_malloc_r+0x36>
 80015ec:	4634      	mov	r4, r6
 80015ee:	6876      	ldr	r6, [r6, #4]
 80015f0:	e7b4      	b.n	800155c <_malloc_r+0x4c>
 80015f2:	4613      	mov	r3, r2
 80015f4:	e7cc      	b.n	8001590 <_malloc_r+0x80>
 80015f6:	230c      	movs	r3, #12
 80015f8:	4638      	mov	r0, r7
 80015fa:	603b      	str	r3, [r7, #0]
 80015fc:	f000 f80e 	bl	800161c <__malloc_unlock>
 8001600:	e797      	b.n	8001532 <_malloc_r+0x22>
 8001602:	6025      	str	r5, [r4, #0]
 8001604:	e7dc      	b.n	80015c0 <_malloc_r+0xb0>
 8001606:	605b      	str	r3, [r3, #4]
 8001608:	deff      	udf	#255	; 0xff
 800160a:	bf00      	nop
 800160c:	2000036c 	.word	0x2000036c

08001610 <__malloc_lock>:
 8001610:	4801      	ldr	r0, [pc, #4]	; (8001618 <__malloc_lock+0x8>)
 8001612:	f7ff bf13 	b.w	800143c <__retarget_lock_acquire_recursive>
 8001616:	bf00      	nop
 8001618:	20000368 	.word	0x20000368

0800161c <__malloc_unlock>:
 800161c:	4801      	ldr	r0, [pc, #4]	; (8001624 <__malloc_unlock+0x8>)
 800161e:	f7ff bf0e 	b.w	800143e <__retarget_lock_release_recursive>
 8001622:	bf00      	nop
 8001624:	20000368 	.word	0x20000368

08001628 <__ssputs_r>:
 8001628:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800162c:	461f      	mov	r7, r3
 800162e:	688e      	ldr	r6, [r1, #8]
 8001630:	4682      	mov	sl, r0
 8001632:	42be      	cmp	r6, r7
 8001634:	460c      	mov	r4, r1
 8001636:	4690      	mov	r8, r2
 8001638:	680b      	ldr	r3, [r1, #0]
 800163a:	d82c      	bhi.n	8001696 <__ssputs_r+0x6e>
 800163c:	898a      	ldrh	r2, [r1, #12]
 800163e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001642:	d026      	beq.n	8001692 <__ssputs_r+0x6a>
 8001644:	6965      	ldr	r5, [r4, #20]
 8001646:	6909      	ldr	r1, [r1, #16]
 8001648:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800164c:	eba3 0901 	sub.w	r9, r3, r1
 8001650:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001654:	1c7b      	adds	r3, r7, #1
 8001656:	444b      	add	r3, r9
 8001658:	106d      	asrs	r5, r5, #1
 800165a:	429d      	cmp	r5, r3
 800165c:	bf38      	it	cc
 800165e:	461d      	movcc	r5, r3
 8001660:	0553      	lsls	r3, r2, #21
 8001662:	d527      	bpl.n	80016b4 <__ssputs_r+0x8c>
 8001664:	4629      	mov	r1, r5
 8001666:	f7ff ff53 	bl	8001510 <_malloc_r>
 800166a:	4606      	mov	r6, r0
 800166c:	b360      	cbz	r0, 80016c8 <__ssputs_r+0xa0>
 800166e:	464a      	mov	r2, r9
 8001670:	6921      	ldr	r1, [r4, #16]
 8001672:	f000 fafd 	bl	8001c70 <memcpy>
 8001676:	89a3      	ldrh	r3, [r4, #12]
 8001678:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800167c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001680:	81a3      	strh	r3, [r4, #12]
 8001682:	6126      	str	r6, [r4, #16]
 8001684:	444e      	add	r6, r9
 8001686:	6026      	str	r6, [r4, #0]
 8001688:	463e      	mov	r6, r7
 800168a:	6165      	str	r5, [r4, #20]
 800168c:	eba5 0509 	sub.w	r5, r5, r9
 8001690:	60a5      	str	r5, [r4, #8]
 8001692:	42be      	cmp	r6, r7
 8001694:	d900      	bls.n	8001698 <__ssputs_r+0x70>
 8001696:	463e      	mov	r6, r7
 8001698:	4632      	mov	r2, r6
 800169a:	4641      	mov	r1, r8
 800169c:	6820      	ldr	r0, [r4, #0]
 800169e:	f000 faaf 	bl	8001c00 <memmove>
 80016a2:	2000      	movs	r0, #0
 80016a4:	68a3      	ldr	r3, [r4, #8]
 80016a6:	1b9b      	subs	r3, r3, r6
 80016a8:	60a3      	str	r3, [r4, #8]
 80016aa:	6823      	ldr	r3, [r4, #0]
 80016ac:	4433      	add	r3, r6
 80016ae:	6023      	str	r3, [r4, #0]
 80016b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80016b4:	462a      	mov	r2, r5
 80016b6:	f000 fae9 	bl	8001c8c <_realloc_r>
 80016ba:	4606      	mov	r6, r0
 80016bc:	2800      	cmp	r0, #0
 80016be:	d1e0      	bne.n	8001682 <__ssputs_r+0x5a>
 80016c0:	4650      	mov	r0, sl
 80016c2:	6921      	ldr	r1, [r4, #16]
 80016c4:	f7ff febc 	bl	8001440 <_free_r>
 80016c8:	230c      	movs	r3, #12
 80016ca:	f8ca 3000 	str.w	r3, [sl]
 80016ce:	89a3      	ldrh	r3, [r4, #12]
 80016d0:	f04f 30ff 	mov.w	r0, #4294967295
 80016d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016d8:	81a3      	strh	r3, [r4, #12]
 80016da:	e7e9      	b.n	80016b0 <__ssputs_r+0x88>

080016dc <_svfiprintf_r>:
 80016dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016e0:	4698      	mov	r8, r3
 80016e2:	898b      	ldrh	r3, [r1, #12]
 80016e4:	4607      	mov	r7, r0
 80016e6:	061b      	lsls	r3, r3, #24
 80016e8:	460d      	mov	r5, r1
 80016ea:	4614      	mov	r4, r2
 80016ec:	b09d      	sub	sp, #116	; 0x74
 80016ee:	d50e      	bpl.n	800170e <_svfiprintf_r+0x32>
 80016f0:	690b      	ldr	r3, [r1, #16]
 80016f2:	b963      	cbnz	r3, 800170e <_svfiprintf_r+0x32>
 80016f4:	2140      	movs	r1, #64	; 0x40
 80016f6:	f7ff ff0b 	bl	8001510 <_malloc_r>
 80016fa:	6028      	str	r0, [r5, #0]
 80016fc:	6128      	str	r0, [r5, #16]
 80016fe:	b920      	cbnz	r0, 800170a <_svfiprintf_r+0x2e>
 8001700:	230c      	movs	r3, #12
 8001702:	603b      	str	r3, [r7, #0]
 8001704:	f04f 30ff 	mov.w	r0, #4294967295
 8001708:	e0d0      	b.n	80018ac <_svfiprintf_r+0x1d0>
 800170a:	2340      	movs	r3, #64	; 0x40
 800170c:	616b      	str	r3, [r5, #20]
 800170e:	2300      	movs	r3, #0
 8001710:	9309      	str	r3, [sp, #36]	; 0x24
 8001712:	2320      	movs	r3, #32
 8001714:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001718:	2330      	movs	r3, #48	; 0x30
 800171a:	f04f 0901 	mov.w	r9, #1
 800171e:	f8cd 800c 	str.w	r8, [sp, #12]
 8001722:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80018c4 <_svfiprintf_r+0x1e8>
 8001726:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800172a:	4623      	mov	r3, r4
 800172c:	469a      	mov	sl, r3
 800172e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001732:	b10a      	cbz	r2, 8001738 <_svfiprintf_r+0x5c>
 8001734:	2a25      	cmp	r2, #37	; 0x25
 8001736:	d1f9      	bne.n	800172c <_svfiprintf_r+0x50>
 8001738:	ebba 0b04 	subs.w	fp, sl, r4
 800173c:	d00b      	beq.n	8001756 <_svfiprintf_r+0x7a>
 800173e:	465b      	mov	r3, fp
 8001740:	4622      	mov	r2, r4
 8001742:	4629      	mov	r1, r5
 8001744:	4638      	mov	r0, r7
 8001746:	f7ff ff6f 	bl	8001628 <__ssputs_r>
 800174a:	3001      	adds	r0, #1
 800174c:	f000 80a9 	beq.w	80018a2 <_svfiprintf_r+0x1c6>
 8001750:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001752:	445a      	add	r2, fp
 8001754:	9209      	str	r2, [sp, #36]	; 0x24
 8001756:	f89a 3000 	ldrb.w	r3, [sl]
 800175a:	2b00      	cmp	r3, #0
 800175c:	f000 80a1 	beq.w	80018a2 <_svfiprintf_r+0x1c6>
 8001760:	2300      	movs	r3, #0
 8001762:	f04f 32ff 	mov.w	r2, #4294967295
 8001766:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800176a:	f10a 0a01 	add.w	sl, sl, #1
 800176e:	9304      	str	r3, [sp, #16]
 8001770:	9307      	str	r3, [sp, #28]
 8001772:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001776:	931a      	str	r3, [sp, #104]	; 0x68
 8001778:	4654      	mov	r4, sl
 800177a:	2205      	movs	r2, #5
 800177c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001780:	4850      	ldr	r0, [pc, #320]	; (80018c4 <_svfiprintf_r+0x1e8>)
 8001782:	f000 fa67 	bl	8001c54 <memchr>
 8001786:	9a04      	ldr	r2, [sp, #16]
 8001788:	b9d8      	cbnz	r0, 80017c2 <_svfiprintf_r+0xe6>
 800178a:	06d0      	lsls	r0, r2, #27
 800178c:	bf44      	itt	mi
 800178e:	2320      	movmi	r3, #32
 8001790:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001794:	0711      	lsls	r1, r2, #28
 8001796:	bf44      	itt	mi
 8001798:	232b      	movmi	r3, #43	; 0x2b
 800179a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800179e:	f89a 3000 	ldrb.w	r3, [sl]
 80017a2:	2b2a      	cmp	r3, #42	; 0x2a
 80017a4:	d015      	beq.n	80017d2 <_svfiprintf_r+0xf6>
 80017a6:	4654      	mov	r4, sl
 80017a8:	2000      	movs	r0, #0
 80017aa:	f04f 0c0a 	mov.w	ip, #10
 80017ae:	9a07      	ldr	r2, [sp, #28]
 80017b0:	4621      	mov	r1, r4
 80017b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80017b6:	3b30      	subs	r3, #48	; 0x30
 80017b8:	2b09      	cmp	r3, #9
 80017ba:	d94d      	bls.n	8001858 <_svfiprintf_r+0x17c>
 80017bc:	b1b0      	cbz	r0, 80017ec <_svfiprintf_r+0x110>
 80017be:	9207      	str	r2, [sp, #28]
 80017c0:	e014      	b.n	80017ec <_svfiprintf_r+0x110>
 80017c2:	eba0 0308 	sub.w	r3, r0, r8
 80017c6:	fa09 f303 	lsl.w	r3, r9, r3
 80017ca:	4313      	orrs	r3, r2
 80017cc:	46a2      	mov	sl, r4
 80017ce:	9304      	str	r3, [sp, #16]
 80017d0:	e7d2      	b.n	8001778 <_svfiprintf_r+0x9c>
 80017d2:	9b03      	ldr	r3, [sp, #12]
 80017d4:	1d19      	adds	r1, r3, #4
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	9103      	str	r1, [sp, #12]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	bfbb      	ittet	lt
 80017de:	425b      	neglt	r3, r3
 80017e0:	f042 0202 	orrlt.w	r2, r2, #2
 80017e4:	9307      	strge	r3, [sp, #28]
 80017e6:	9307      	strlt	r3, [sp, #28]
 80017e8:	bfb8      	it	lt
 80017ea:	9204      	strlt	r2, [sp, #16]
 80017ec:	7823      	ldrb	r3, [r4, #0]
 80017ee:	2b2e      	cmp	r3, #46	; 0x2e
 80017f0:	d10c      	bne.n	800180c <_svfiprintf_r+0x130>
 80017f2:	7863      	ldrb	r3, [r4, #1]
 80017f4:	2b2a      	cmp	r3, #42	; 0x2a
 80017f6:	d134      	bne.n	8001862 <_svfiprintf_r+0x186>
 80017f8:	9b03      	ldr	r3, [sp, #12]
 80017fa:	3402      	adds	r4, #2
 80017fc:	1d1a      	adds	r2, r3, #4
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	9203      	str	r2, [sp, #12]
 8001802:	2b00      	cmp	r3, #0
 8001804:	bfb8      	it	lt
 8001806:	f04f 33ff 	movlt.w	r3, #4294967295
 800180a:	9305      	str	r3, [sp, #20]
 800180c:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80018c8 <_svfiprintf_r+0x1ec>
 8001810:	2203      	movs	r2, #3
 8001812:	4650      	mov	r0, sl
 8001814:	7821      	ldrb	r1, [r4, #0]
 8001816:	f000 fa1d 	bl	8001c54 <memchr>
 800181a:	b138      	cbz	r0, 800182c <_svfiprintf_r+0x150>
 800181c:	2240      	movs	r2, #64	; 0x40
 800181e:	9b04      	ldr	r3, [sp, #16]
 8001820:	eba0 000a 	sub.w	r0, r0, sl
 8001824:	4082      	lsls	r2, r0
 8001826:	4313      	orrs	r3, r2
 8001828:	3401      	adds	r4, #1
 800182a:	9304      	str	r3, [sp, #16]
 800182c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001830:	2206      	movs	r2, #6
 8001832:	4826      	ldr	r0, [pc, #152]	; (80018cc <_svfiprintf_r+0x1f0>)
 8001834:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001838:	f000 fa0c 	bl	8001c54 <memchr>
 800183c:	2800      	cmp	r0, #0
 800183e:	d038      	beq.n	80018b2 <_svfiprintf_r+0x1d6>
 8001840:	4b23      	ldr	r3, [pc, #140]	; (80018d0 <_svfiprintf_r+0x1f4>)
 8001842:	bb1b      	cbnz	r3, 800188c <_svfiprintf_r+0x1b0>
 8001844:	9b03      	ldr	r3, [sp, #12]
 8001846:	3307      	adds	r3, #7
 8001848:	f023 0307 	bic.w	r3, r3, #7
 800184c:	3308      	adds	r3, #8
 800184e:	9303      	str	r3, [sp, #12]
 8001850:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001852:	4433      	add	r3, r6
 8001854:	9309      	str	r3, [sp, #36]	; 0x24
 8001856:	e768      	b.n	800172a <_svfiprintf_r+0x4e>
 8001858:	460c      	mov	r4, r1
 800185a:	2001      	movs	r0, #1
 800185c:	fb0c 3202 	mla	r2, ip, r2, r3
 8001860:	e7a6      	b.n	80017b0 <_svfiprintf_r+0xd4>
 8001862:	2300      	movs	r3, #0
 8001864:	f04f 0c0a 	mov.w	ip, #10
 8001868:	4619      	mov	r1, r3
 800186a:	3401      	adds	r4, #1
 800186c:	9305      	str	r3, [sp, #20]
 800186e:	4620      	mov	r0, r4
 8001870:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001874:	3a30      	subs	r2, #48	; 0x30
 8001876:	2a09      	cmp	r2, #9
 8001878:	d903      	bls.n	8001882 <_svfiprintf_r+0x1a6>
 800187a:	2b00      	cmp	r3, #0
 800187c:	d0c6      	beq.n	800180c <_svfiprintf_r+0x130>
 800187e:	9105      	str	r1, [sp, #20]
 8001880:	e7c4      	b.n	800180c <_svfiprintf_r+0x130>
 8001882:	4604      	mov	r4, r0
 8001884:	2301      	movs	r3, #1
 8001886:	fb0c 2101 	mla	r1, ip, r1, r2
 800188a:	e7f0      	b.n	800186e <_svfiprintf_r+0x192>
 800188c:	ab03      	add	r3, sp, #12
 800188e:	9300      	str	r3, [sp, #0]
 8001890:	462a      	mov	r2, r5
 8001892:	4638      	mov	r0, r7
 8001894:	4b0f      	ldr	r3, [pc, #60]	; (80018d4 <_svfiprintf_r+0x1f8>)
 8001896:	a904      	add	r1, sp, #16
 8001898:	f3af 8000 	nop.w
 800189c:	1c42      	adds	r2, r0, #1
 800189e:	4606      	mov	r6, r0
 80018a0:	d1d6      	bne.n	8001850 <_svfiprintf_r+0x174>
 80018a2:	89ab      	ldrh	r3, [r5, #12]
 80018a4:	065b      	lsls	r3, r3, #25
 80018a6:	f53f af2d 	bmi.w	8001704 <_svfiprintf_r+0x28>
 80018aa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80018ac:	b01d      	add	sp, #116	; 0x74
 80018ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80018b2:	ab03      	add	r3, sp, #12
 80018b4:	9300      	str	r3, [sp, #0]
 80018b6:	462a      	mov	r2, r5
 80018b8:	4638      	mov	r0, r7
 80018ba:	4b06      	ldr	r3, [pc, #24]	; (80018d4 <_svfiprintf_r+0x1f8>)
 80018bc:	a904      	add	r1, sp, #16
 80018be:	f000 f87d 	bl	80019bc <_printf_i>
 80018c2:	e7eb      	b.n	800189c <_svfiprintf_r+0x1c0>
 80018c4:	08001d7a 	.word	0x08001d7a
 80018c8:	08001d80 	.word	0x08001d80
 80018cc:	08001d84 	.word	0x08001d84
 80018d0:	00000000 	.word	0x00000000
 80018d4:	08001629 	.word	0x08001629

080018d8 <_printf_common>:
 80018d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80018dc:	4616      	mov	r6, r2
 80018de:	4699      	mov	r9, r3
 80018e0:	688a      	ldr	r2, [r1, #8]
 80018e2:	690b      	ldr	r3, [r1, #16]
 80018e4:	4607      	mov	r7, r0
 80018e6:	4293      	cmp	r3, r2
 80018e8:	bfb8      	it	lt
 80018ea:	4613      	movlt	r3, r2
 80018ec:	6033      	str	r3, [r6, #0]
 80018ee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80018f2:	460c      	mov	r4, r1
 80018f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80018f8:	b10a      	cbz	r2, 80018fe <_printf_common+0x26>
 80018fa:	3301      	adds	r3, #1
 80018fc:	6033      	str	r3, [r6, #0]
 80018fe:	6823      	ldr	r3, [r4, #0]
 8001900:	0699      	lsls	r1, r3, #26
 8001902:	bf42      	ittt	mi
 8001904:	6833      	ldrmi	r3, [r6, #0]
 8001906:	3302      	addmi	r3, #2
 8001908:	6033      	strmi	r3, [r6, #0]
 800190a:	6825      	ldr	r5, [r4, #0]
 800190c:	f015 0506 	ands.w	r5, r5, #6
 8001910:	d106      	bne.n	8001920 <_printf_common+0x48>
 8001912:	f104 0a19 	add.w	sl, r4, #25
 8001916:	68e3      	ldr	r3, [r4, #12]
 8001918:	6832      	ldr	r2, [r6, #0]
 800191a:	1a9b      	subs	r3, r3, r2
 800191c:	42ab      	cmp	r3, r5
 800191e:	dc2b      	bgt.n	8001978 <_printf_common+0xa0>
 8001920:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001924:	1e13      	subs	r3, r2, #0
 8001926:	6822      	ldr	r2, [r4, #0]
 8001928:	bf18      	it	ne
 800192a:	2301      	movne	r3, #1
 800192c:	0692      	lsls	r2, r2, #26
 800192e:	d430      	bmi.n	8001992 <_printf_common+0xba>
 8001930:	4649      	mov	r1, r9
 8001932:	4638      	mov	r0, r7
 8001934:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001938:	47c0      	blx	r8
 800193a:	3001      	adds	r0, #1
 800193c:	d023      	beq.n	8001986 <_printf_common+0xae>
 800193e:	6823      	ldr	r3, [r4, #0]
 8001940:	6922      	ldr	r2, [r4, #16]
 8001942:	f003 0306 	and.w	r3, r3, #6
 8001946:	2b04      	cmp	r3, #4
 8001948:	bf14      	ite	ne
 800194a:	2500      	movne	r5, #0
 800194c:	6833      	ldreq	r3, [r6, #0]
 800194e:	f04f 0600 	mov.w	r6, #0
 8001952:	bf08      	it	eq
 8001954:	68e5      	ldreq	r5, [r4, #12]
 8001956:	f104 041a 	add.w	r4, r4, #26
 800195a:	bf08      	it	eq
 800195c:	1aed      	subeq	r5, r5, r3
 800195e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8001962:	bf08      	it	eq
 8001964:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001968:	4293      	cmp	r3, r2
 800196a:	bfc4      	itt	gt
 800196c:	1a9b      	subgt	r3, r3, r2
 800196e:	18ed      	addgt	r5, r5, r3
 8001970:	42b5      	cmp	r5, r6
 8001972:	d11a      	bne.n	80019aa <_printf_common+0xd2>
 8001974:	2000      	movs	r0, #0
 8001976:	e008      	b.n	800198a <_printf_common+0xb2>
 8001978:	2301      	movs	r3, #1
 800197a:	4652      	mov	r2, sl
 800197c:	4649      	mov	r1, r9
 800197e:	4638      	mov	r0, r7
 8001980:	47c0      	blx	r8
 8001982:	3001      	adds	r0, #1
 8001984:	d103      	bne.n	800198e <_printf_common+0xb6>
 8001986:	f04f 30ff 	mov.w	r0, #4294967295
 800198a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800198e:	3501      	adds	r5, #1
 8001990:	e7c1      	b.n	8001916 <_printf_common+0x3e>
 8001992:	2030      	movs	r0, #48	; 0x30
 8001994:	18e1      	adds	r1, r4, r3
 8001996:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800199a:	1c5a      	adds	r2, r3, #1
 800199c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80019a0:	4422      	add	r2, r4
 80019a2:	3302      	adds	r3, #2
 80019a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80019a8:	e7c2      	b.n	8001930 <_printf_common+0x58>
 80019aa:	2301      	movs	r3, #1
 80019ac:	4622      	mov	r2, r4
 80019ae:	4649      	mov	r1, r9
 80019b0:	4638      	mov	r0, r7
 80019b2:	47c0      	blx	r8
 80019b4:	3001      	adds	r0, #1
 80019b6:	d0e6      	beq.n	8001986 <_printf_common+0xae>
 80019b8:	3601      	adds	r6, #1
 80019ba:	e7d9      	b.n	8001970 <_printf_common+0x98>

080019bc <_printf_i>:
 80019bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80019c0:	7e0f      	ldrb	r7, [r1, #24]
 80019c2:	4691      	mov	r9, r2
 80019c4:	2f78      	cmp	r7, #120	; 0x78
 80019c6:	4680      	mov	r8, r0
 80019c8:	460c      	mov	r4, r1
 80019ca:	469a      	mov	sl, r3
 80019cc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80019ce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80019d2:	d807      	bhi.n	80019e4 <_printf_i+0x28>
 80019d4:	2f62      	cmp	r7, #98	; 0x62
 80019d6:	d80a      	bhi.n	80019ee <_printf_i+0x32>
 80019d8:	2f00      	cmp	r7, #0
 80019da:	f000 80d5 	beq.w	8001b88 <_printf_i+0x1cc>
 80019de:	2f58      	cmp	r7, #88	; 0x58
 80019e0:	f000 80c1 	beq.w	8001b66 <_printf_i+0x1aa>
 80019e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80019e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80019ec:	e03a      	b.n	8001a64 <_printf_i+0xa8>
 80019ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80019f2:	2b15      	cmp	r3, #21
 80019f4:	d8f6      	bhi.n	80019e4 <_printf_i+0x28>
 80019f6:	a101      	add	r1, pc, #4	; (adr r1, 80019fc <_printf_i+0x40>)
 80019f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80019fc:	08001a55 	.word	0x08001a55
 8001a00:	08001a69 	.word	0x08001a69
 8001a04:	080019e5 	.word	0x080019e5
 8001a08:	080019e5 	.word	0x080019e5
 8001a0c:	080019e5 	.word	0x080019e5
 8001a10:	080019e5 	.word	0x080019e5
 8001a14:	08001a69 	.word	0x08001a69
 8001a18:	080019e5 	.word	0x080019e5
 8001a1c:	080019e5 	.word	0x080019e5
 8001a20:	080019e5 	.word	0x080019e5
 8001a24:	080019e5 	.word	0x080019e5
 8001a28:	08001b6f 	.word	0x08001b6f
 8001a2c:	08001a95 	.word	0x08001a95
 8001a30:	08001b29 	.word	0x08001b29
 8001a34:	080019e5 	.word	0x080019e5
 8001a38:	080019e5 	.word	0x080019e5
 8001a3c:	08001b91 	.word	0x08001b91
 8001a40:	080019e5 	.word	0x080019e5
 8001a44:	08001a95 	.word	0x08001a95
 8001a48:	080019e5 	.word	0x080019e5
 8001a4c:	080019e5 	.word	0x080019e5
 8001a50:	08001b31 	.word	0x08001b31
 8001a54:	682b      	ldr	r3, [r5, #0]
 8001a56:	1d1a      	adds	r2, r3, #4
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	602a      	str	r2, [r5, #0]
 8001a5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001a60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001a64:	2301      	movs	r3, #1
 8001a66:	e0a0      	b.n	8001baa <_printf_i+0x1ee>
 8001a68:	6820      	ldr	r0, [r4, #0]
 8001a6a:	682b      	ldr	r3, [r5, #0]
 8001a6c:	0607      	lsls	r7, r0, #24
 8001a6e:	f103 0104 	add.w	r1, r3, #4
 8001a72:	6029      	str	r1, [r5, #0]
 8001a74:	d501      	bpl.n	8001a7a <_printf_i+0xbe>
 8001a76:	681e      	ldr	r6, [r3, #0]
 8001a78:	e003      	b.n	8001a82 <_printf_i+0xc6>
 8001a7a:	0646      	lsls	r6, r0, #25
 8001a7c:	d5fb      	bpl.n	8001a76 <_printf_i+0xba>
 8001a7e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8001a82:	2e00      	cmp	r6, #0
 8001a84:	da03      	bge.n	8001a8e <_printf_i+0xd2>
 8001a86:	232d      	movs	r3, #45	; 0x2d
 8001a88:	4276      	negs	r6, r6
 8001a8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001a8e:	230a      	movs	r3, #10
 8001a90:	4859      	ldr	r0, [pc, #356]	; (8001bf8 <_printf_i+0x23c>)
 8001a92:	e012      	b.n	8001aba <_printf_i+0xfe>
 8001a94:	682b      	ldr	r3, [r5, #0]
 8001a96:	6820      	ldr	r0, [r4, #0]
 8001a98:	1d19      	adds	r1, r3, #4
 8001a9a:	6029      	str	r1, [r5, #0]
 8001a9c:	0605      	lsls	r5, r0, #24
 8001a9e:	d501      	bpl.n	8001aa4 <_printf_i+0xe8>
 8001aa0:	681e      	ldr	r6, [r3, #0]
 8001aa2:	e002      	b.n	8001aaa <_printf_i+0xee>
 8001aa4:	0641      	lsls	r1, r0, #25
 8001aa6:	d5fb      	bpl.n	8001aa0 <_printf_i+0xe4>
 8001aa8:	881e      	ldrh	r6, [r3, #0]
 8001aaa:	2f6f      	cmp	r7, #111	; 0x6f
 8001aac:	bf0c      	ite	eq
 8001aae:	2308      	moveq	r3, #8
 8001ab0:	230a      	movne	r3, #10
 8001ab2:	4851      	ldr	r0, [pc, #324]	; (8001bf8 <_printf_i+0x23c>)
 8001ab4:	2100      	movs	r1, #0
 8001ab6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001aba:	6865      	ldr	r5, [r4, #4]
 8001abc:	2d00      	cmp	r5, #0
 8001abe:	bfa8      	it	ge
 8001ac0:	6821      	ldrge	r1, [r4, #0]
 8001ac2:	60a5      	str	r5, [r4, #8]
 8001ac4:	bfa4      	itt	ge
 8001ac6:	f021 0104 	bicge.w	r1, r1, #4
 8001aca:	6021      	strge	r1, [r4, #0]
 8001acc:	b90e      	cbnz	r6, 8001ad2 <_printf_i+0x116>
 8001ace:	2d00      	cmp	r5, #0
 8001ad0:	d04b      	beq.n	8001b6a <_printf_i+0x1ae>
 8001ad2:	4615      	mov	r5, r2
 8001ad4:	fbb6 f1f3 	udiv	r1, r6, r3
 8001ad8:	fb03 6711 	mls	r7, r3, r1, r6
 8001adc:	5dc7      	ldrb	r7, [r0, r7]
 8001ade:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001ae2:	4637      	mov	r7, r6
 8001ae4:	42bb      	cmp	r3, r7
 8001ae6:	460e      	mov	r6, r1
 8001ae8:	d9f4      	bls.n	8001ad4 <_printf_i+0x118>
 8001aea:	2b08      	cmp	r3, #8
 8001aec:	d10b      	bne.n	8001b06 <_printf_i+0x14a>
 8001aee:	6823      	ldr	r3, [r4, #0]
 8001af0:	07de      	lsls	r6, r3, #31
 8001af2:	d508      	bpl.n	8001b06 <_printf_i+0x14a>
 8001af4:	6923      	ldr	r3, [r4, #16]
 8001af6:	6861      	ldr	r1, [r4, #4]
 8001af8:	4299      	cmp	r1, r3
 8001afa:	bfde      	ittt	le
 8001afc:	2330      	movle	r3, #48	; 0x30
 8001afe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001b02:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001b06:	1b52      	subs	r2, r2, r5
 8001b08:	6122      	str	r2, [r4, #16]
 8001b0a:	464b      	mov	r3, r9
 8001b0c:	4621      	mov	r1, r4
 8001b0e:	4640      	mov	r0, r8
 8001b10:	f8cd a000 	str.w	sl, [sp]
 8001b14:	aa03      	add	r2, sp, #12
 8001b16:	f7ff fedf 	bl	80018d8 <_printf_common>
 8001b1a:	3001      	adds	r0, #1
 8001b1c:	d14a      	bne.n	8001bb4 <_printf_i+0x1f8>
 8001b1e:	f04f 30ff 	mov.w	r0, #4294967295
 8001b22:	b004      	add	sp, #16
 8001b24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b28:	6823      	ldr	r3, [r4, #0]
 8001b2a:	f043 0320 	orr.w	r3, r3, #32
 8001b2e:	6023      	str	r3, [r4, #0]
 8001b30:	2778      	movs	r7, #120	; 0x78
 8001b32:	4832      	ldr	r0, [pc, #200]	; (8001bfc <_printf_i+0x240>)
 8001b34:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8001b38:	6823      	ldr	r3, [r4, #0]
 8001b3a:	6829      	ldr	r1, [r5, #0]
 8001b3c:	061f      	lsls	r7, r3, #24
 8001b3e:	f851 6b04 	ldr.w	r6, [r1], #4
 8001b42:	d402      	bmi.n	8001b4a <_printf_i+0x18e>
 8001b44:	065f      	lsls	r7, r3, #25
 8001b46:	bf48      	it	mi
 8001b48:	b2b6      	uxthmi	r6, r6
 8001b4a:	07df      	lsls	r7, r3, #31
 8001b4c:	bf48      	it	mi
 8001b4e:	f043 0320 	orrmi.w	r3, r3, #32
 8001b52:	6029      	str	r1, [r5, #0]
 8001b54:	bf48      	it	mi
 8001b56:	6023      	strmi	r3, [r4, #0]
 8001b58:	b91e      	cbnz	r6, 8001b62 <_printf_i+0x1a6>
 8001b5a:	6823      	ldr	r3, [r4, #0]
 8001b5c:	f023 0320 	bic.w	r3, r3, #32
 8001b60:	6023      	str	r3, [r4, #0]
 8001b62:	2310      	movs	r3, #16
 8001b64:	e7a6      	b.n	8001ab4 <_printf_i+0xf8>
 8001b66:	4824      	ldr	r0, [pc, #144]	; (8001bf8 <_printf_i+0x23c>)
 8001b68:	e7e4      	b.n	8001b34 <_printf_i+0x178>
 8001b6a:	4615      	mov	r5, r2
 8001b6c:	e7bd      	b.n	8001aea <_printf_i+0x12e>
 8001b6e:	682b      	ldr	r3, [r5, #0]
 8001b70:	6826      	ldr	r6, [r4, #0]
 8001b72:	1d18      	adds	r0, r3, #4
 8001b74:	6961      	ldr	r1, [r4, #20]
 8001b76:	6028      	str	r0, [r5, #0]
 8001b78:	0635      	lsls	r5, r6, #24
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	d501      	bpl.n	8001b82 <_printf_i+0x1c6>
 8001b7e:	6019      	str	r1, [r3, #0]
 8001b80:	e002      	b.n	8001b88 <_printf_i+0x1cc>
 8001b82:	0670      	lsls	r0, r6, #25
 8001b84:	d5fb      	bpl.n	8001b7e <_printf_i+0x1c2>
 8001b86:	8019      	strh	r1, [r3, #0]
 8001b88:	2300      	movs	r3, #0
 8001b8a:	4615      	mov	r5, r2
 8001b8c:	6123      	str	r3, [r4, #16]
 8001b8e:	e7bc      	b.n	8001b0a <_printf_i+0x14e>
 8001b90:	682b      	ldr	r3, [r5, #0]
 8001b92:	2100      	movs	r1, #0
 8001b94:	1d1a      	adds	r2, r3, #4
 8001b96:	602a      	str	r2, [r5, #0]
 8001b98:	681d      	ldr	r5, [r3, #0]
 8001b9a:	6862      	ldr	r2, [r4, #4]
 8001b9c:	4628      	mov	r0, r5
 8001b9e:	f000 f859 	bl	8001c54 <memchr>
 8001ba2:	b108      	cbz	r0, 8001ba8 <_printf_i+0x1ec>
 8001ba4:	1b40      	subs	r0, r0, r5
 8001ba6:	6060      	str	r0, [r4, #4]
 8001ba8:	6863      	ldr	r3, [r4, #4]
 8001baa:	6123      	str	r3, [r4, #16]
 8001bac:	2300      	movs	r3, #0
 8001bae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001bb2:	e7aa      	b.n	8001b0a <_printf_i+0x14e>
 8001bb4:	462a      	mov	r2, r5
 8001bb6:	4649      	mov	r1, r9
 8001bb8:	4640      	mov	r0, r8
 8001bba:	6923      	ldr	r3, [r4, #16]
 8001bbc:	47d0      	blx	sl
 8001bbe:	3001      	adds	r0, #1
 8001bc0:	d0ad      	beq.n	8001b1e <_printf_i+0x162>
 8001bc2:	6823      	ldr	r3, [r4, #0]
 8001bc4:	079b      	lsls	r3, r3, #30
 8001bc6:	d413      	bmi.n	8001bf0 <_printf_i+0x234>
 8001bc8:	68e0      	ldr	r0, [r4, #12]
 8001bca:	9b03      	ldr	r3, [sp, #12]
 8001bcc:	4298      	cmp	r0, r3
 8001bce:	bfb8      	it	lt
 8001bd0:	4618      	movlt	r0, r3
 8001bd2:	e7a6      	b.n	8001b22 <_printf_i+0x166>
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	4632      	mov	r2, r6
 8001bd8:	4649      	mov	r1, r9
 8001bda:	4640      	mov	r0, r8
 8001bdc:	47d0      	blx	sl
 8001bde:	3001      	adds	r0, #1
 8001be0:	d09d      	beq.n	8001b1e <_printf_i+0x162>
 8001be2:	3501      	adds	r5, #1
 8001be4:	68e3      	ldr	r3, [r4, #12]
 8001be6:	9903      	ldr	r1, [sp, #12]
 8001be8:	1a5b      	subs	r3, r3, r1
 8001bea:	42ab      	cmp	r3, r5
 8001bec:	dcf2      	bgt.n	8001bd4 <_printf_i+0x218>
 8001bee:	e7eb      	b.n	8001bc8 <_printf_i+0x20c>
 8001bf0:	2500      	movs	r5, #0
 8001bf2:	f104 0619 	add.w	r6, r4, #25
 8001bf6:	e7f5      	b.n	8001be4 <_printf_i+0x228>
 8001bf8:	08001d8b 	.word	0x08001d8b
 8001bfc:	08001d9c 	.word	0x08001d9c

08001c00 <memmove>:
 8001c00:	4288      	cmp	r0, r1
 8001c02:	b510      	push	{r4, lr}
 8001c04:	eb01 0402 	add.w	r4, r1, r2
 8001c08:	d902      	bls.n	8001c10 <memmove+0x10>
 8001c0a:	4284      	cmp	r4, r0
 8001c0c:	4623      	mov	r3, r4
 8001c0e:	d807      	bhi.n	8001c20 <memmove+0x20>
 8001c10:	1e43      	subs	r3, r0, #1
 8001c12:	42a1      	cmp	r1, r4
 8001c14:	d008      	beq.n	8001c28 <memmove+0x28>
 8001c16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001c1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001c1e:	e7f8      	b.n	8001c12 <memmove+0x12>
 8001c20:	4601      	mov	r1, r0
 8001c22:	4402      	add	r2, r0
 8001c24:	428a      	cmp	r2, r1
 8001c26:	d100      	bne.n	8001c2a <memmove+0x2a>
 8001c28:	bd10      	pop	{r4, pc}
 8001c2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001c2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001c32:	e7f7      	b.n	8001c24 <memmove+0x24>

08001c34 <_sbrk_r>:
 8001c34:	b538      	push	{r3, r4, r5, lr}
 8001c36:	2300      	movs	r3, #0
 8001c38:	4d05      	ldr	r5, [pc, #20]	; (8001c50 <_sbrk_r+0x1c>)
 8001c3a:	4604      	mov	r4, r0
 8001c3c:	4608      	mov	r0, r1
 8001c3e:	602b      	str	r3, [r5, #0]
 8001c40:	f7fe fe22 	bl	8000888 <_sbrk>
 8001c44:	1c43      	adds	r3, r0, #1
 8001c46:	d102      	bne.n	8001c4e <_sbrk_r+0x1a>
 8001c48:	682b      	ldr	r3, [r5, #0]
 8001c4a:	b103      	cbz	r3, 8001c4e <_sbrk_r+0x1a>
 8001c4c:	6023      	str	r3, [r4, #0]
 8001c4e:	bd38      	pop	{r3, r4, r5, pc}
 8001c50:	20000364 	.word	0x20000364

08001c54 <memchr>:
 8001c54:	4603      	mov	r3, r0
 8001c56:	b510      	push	{r4, lr}
 8001c58:	b2c9      	uxtb	r1, r1
 8001c5a:	4402      	add	r2, r0
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	4618      	mov	r0, r3
 8001c60:	d101      	bne.n	8001c66 <memchr+0x12>
 8001c62:	2000      	movs	r0, #0
 8001c64:	e003      	b.n	8001c6e <memchr+0x1a>
 8001c66:	7804      	ldrb	r4, [r0, #0]
 8001c68:	3301      	adds	r3, #1
 8001c6a:	428c      	cmp	r4, r1
 8001c6c:	d1f6      	bne.n	8001c5c <memchr+0x8>
 8001c6e:	bd10      	pop	{r4, pc}

08001c70 <memcpy>:
 8001c70:	440a      	add	r2, r1
 8001c72:	4291      	cmp	r1, r2
 8001c74:	f100 33ff 	add.w	r3, r0, #4294967295
 8001c78:	d100      	bne.n	8001c7c <memcpy+0xc>
 8001c7a:	4770      	bx	lr
 8001c7c:	b510      	push	{r4, lr}
 8001c7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001c82:	4291      	cmp	r1, r2
 8001c84:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001c88:	d1f9      	bne.n	8001c7e <memcpy+0xe>
 8001c8a:	bd10      	pop	{r4, pc}

08001c8c <_realloc_r>:
 8001c8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c90:	4680      	mov	r8, r0
 8001c92:	4614      	mov	r4, r2
 8001c94:	460e      	mov	r6, r1
 8001c96:	b921      	cbnz	r1, 8001ca2 <_realloc_r+0x16>
 8001c98:	4611      	mov	r1, r2
 8001c9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001c9e:	f7ff bc37 	b.w	8001510 <_malloc_r>
 8001ca2:	b92a      	cbnz	r2, 8001cb0 <_realloc_r+0x24>
 8001ca4:	f7ff fbcc 	bl	8001440 <_free_r>
 8001ca8:	4625      	mov	r5, r4
 8001caa:	4628      	mov	r0, r5
 8001cac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001cb0:	f000 f81b 	bl	8001cea <_malloc_usable_size_r>
 8001cb4:	4284      	cmp	r4, r0
 8001cb6:	4607      	mov	r7, r0
 8001cb8:	d802      	bhi.n	8001cc0 <_realloc_r+0x34>
 8001cba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8001cbe:	d812      	bhi.n	8001ce6 <_realloc_r+0x5a>
 8001cc0:	4621      	mov	r1, r4
 8001cc2:	4640      	mov	r0, r8
 8001cc4:	f7ff fc24 	bl	8001510 <_malloc_r>
 8001cc8:	4605      	mov	r5, r0
 8001cca:	2800      	cmp	r0, #0
 8001ccc:	d0ed      	beq.n	8001caa <_realloc_r+0x1e>
 8001cce:	42bc      	cmp	r4, r7
 8001cd0:	4622      	mov	r2, r4
 8001cd2:	4631      	mov	r1, r6
 8001cd4:	bf28      	it	cs
 8001cd6:	463a      	movcs	r2, r7
 8001cd8:	f7ff ffca 	bl	8001c70 <memcpy>
 8001cdc:	4631      	mov	r1, r6
 8001cde:	4640      	mov	r0, r8
 8001ce0:	f7ff fbae 	bl	8001440 <_free_r>
 8001ce4:	e7e1      	b.n	8001caa <_realloc_r+0x1e>
 8001ce6:	4635      	mov	r5, r6
 8001ce8:	e7df      	b.n	8001caa <_realloc_r+0x1e>

08001cea <_malloc_usable_size_r>:
 8001cea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001cee:	1f18      	subs	r0, r3, #4
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	bfbc      	itt	lt
 8001cf4:	580b      	ldrlt	r3, [r1, r0]
 8001cf6:	18c0      	addlt	r0, r0, r3
 8001cf8:	4770      	bx	lr
	...

08001cfc <_init>:
 8001cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cfe:	bf00      	nop
 8001d00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d02:	bc08      	pop	{r3}
 8001d04:	469e      	mov	lr, r3
 8001d06:	4770      	bx	lr

08001d08 <_fini>:
 8001d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d0a:	bf00      	nop
 8001d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d0e:	bc08      	pop	{r3}
 8001d10:	469e      	mov	lr, r3
 8001d12:	4770      	bx	lr
